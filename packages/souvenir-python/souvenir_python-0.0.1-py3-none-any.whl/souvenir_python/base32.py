# https://github.com/jetify-com/typeid-go/blob/b8c05c2056f37277c432df51e42f5b0176241a5f/base32/base32.go

# Encoding and Decoding code based on the go implementation of ulid
# found at: https://github.com/oklog/ulid
# (Copyright 2016 The Oklog Authors)
# Modifications made available under the same license as the original

alphabet = "0123456789abcdefghjkmnpqrstvwxyz"

# fmt: off
dec = [
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01,
    0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x0B, 0x0C,
    0x0D, 0x0E, 0x0F, 0x10, 0x11, 0xFF, 0x12, 0x13, 0xFF, 0x14,
    0x15, 0xFF, 0x16, 0x17, 0x18, 0x19, 0x1A, 0xFF, 0x1B, 0x1C,
    0x1D, 0x1E, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
]
# fmt: on


def encode(src: bytes) -> str:
    """
    Base32 encoding: converts 16-byte input into a 26-character string.
    """

    if len(src) != 16:
        raise ValueError("expected 16 bytes")

    dst = [""] * 26
    dst[0] = alphabet[(src[0] & 0xE0) >> 5]
    dst[1] = alphabet[src[0] & 0x1F]
    dst[2] = alphabet[(src[1] & 0xF8) >> 3]
    dst[3] = alphabet[((src[1] & 0x07) << 2) | ((src[2] & 0xC0) >> 6)]
    dst[4] = alphabet[(src[2] & 0x3E) >> 1]
    dst[5] = alphabet[((src[2] & 0x01) << 4) | ((src[3] & 0xF0) >> 4)]
    dst[6] = alphabet[((src[3] & 0x0F) << 1) | ((src[4] & 0x80) >> 7)]
    dst[7] = alphabet[(src[4] & 0x7C) >> 2]
    dst[8] = alphabet[((src[4] & 0x03) << 3) | ((src[5] & 0xE0) >> 5)]
    dst[9] = alphabet[src[5] & 0x1F]
    dst[10] = alphabet[(src[6] & 0xF8) >> 3]
    dst[11] = alphabet[((src[6] & 0x07) << 2) | ((src[7] & 0xC0) >> 6)]
    dst[12] = alphabet[(src[7] & 0x3E) >> 1]
    dst[13] = alphabet[((src[7] & 0x01) << 4) | ((src[8] & 0xF0) >> 4)]
    dst[14] = alphabet[((src[8] & 0x0F) << 1) | ((src[9] & 0x80) >> 7)]
    dst[15] = alphabet[(src[9] & 0x7C) >> 2]
    dst[16] = alphabet[((src[9] & 0x03) << 3) | ((src[10] & 0xE0) >> 5)]
    dst[17] = alphabet[src[10] & 0x1F]
    dst[18] = alphabet[(src[11] & 0xF8) >> 3]
    dst[19] = alphabet[((src[11] & 0x07) << 2) | ((src[12] & 0xC0) >> 6)]
    dst[20] = alphabet[(src[12] & 0x3E) >> 1]
    dst[21] = alphabet[((src[12] & 0x01) << 4) | ((src[13] & 0xF0) >> 4)]
    dst[22] = alphabet[((src[13] & 0x0F) << 1) | ((src[14] & 0x80) >> 7)]
    dst[23] = alphabet[(src[14] & 0x7C) >> 2]
    dst[24] = alphabet[((src[14] & 0x03) << 3) | ((src[15] & 0xE0) >> 5)]
    dst[25] = alphabet[src[15] & 0x1F]

    return "".join(dst)


def decode(s: str) -> bytes:
    """
    Base32 decoding: converts 26-character string back into 16 bytes.
    """

    if len(s) != 26:
        raise ValueError("invalid length")

    val = bytes(s, "utf-8")

    values = []
    for b in val:
        if dec[b] == 0xFF:
            raise ValueError("invalid base32 character")
        values.append(dec[b])

    id = bytearray(16)
    id[0] = ((values[0] << 5) | values[1]) & 0xFF
    id[1] = ((values[2] << 3) | (values[3] >> 2)) & 0xFF
    id[2] = ((values[3] << 6) | (values[4] << 1) | (values[5] >> 4)) & 0xFF
    id[3] = ((values[5] << 4) | (values[6] >> 1)) & 0xFF
    id[4] = ((values[6] << 7) | (values[7] << 2) | (values[8] >> 3)) & 0xFF
    id[5] = ((values[8] << 5) | values[9]) & 0xFF
    id[6] = ((values[10] << 3) | (values[11] >> 2)) & 0xFF
    id[7] = ((values[11] << 6) | (values[12] << 1) | (values[13] >> 4)) & 0xFF
    id[8] = ((values[13] << 4) | (values[14] >> 1)) & 0xFF
    id[9] = ((values[14] << 7) | (values[15] << 2) | (values[16] >> 3)) & 0xFF
    id[10] = ((values[16] << 5) | values[17]) & 0xFF
    id[11] = ((values[18] << 3) | (values[19] >> 2)) & 0xFF
    id[12] = ((values[19] << 6) | (values[20] << 1) | (values[21] >> 4)) & 0xFF
    id[13] = ((values[21] << 4) | (values[22] >> 1)) & 0xFF
    id[14] = ((values[22] << 7) | (values[23] << 2) | (values[24] >> 3)) & 0xFF
    id[15] = ((values[24] << 5) | values[25]) & 0xFF

    return bytes(id)
