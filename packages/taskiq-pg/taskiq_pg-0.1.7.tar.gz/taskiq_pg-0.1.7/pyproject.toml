[project]
name = "taskiq-pg"
dynamic = ["version"]
description = "AsyncPG and PostgreSQL integration for taskiq"
authors = [{ name = "Oliver Lambson", email = "ollie@karoo.ca" }]
readme = "README.md"
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
keywords = [
  "taskiq",
  "tasks",
  "distributed",
  "async",
  "postgresql",
  "result_backend",
  "asyncpg",
]
requires-python = ">=3.9"
dependencies = ["asyncpg >=0.30.0", "taskiq>=0.11.10"]

[project.urls]
Repository = "https://github.com/karoo-ca/taskiq-pg"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "taskiq_pg/__init__.py"

[tool.hatch.build.targets.sdist]
include = ["taskiq_pg"]

[dependency-groups]
dev = [
  "mypy>=1.1.1",
  "yesqa>=1.4.0",
  "pytest>=7.2.2",
  "pytest-xdist>=3.2.1",
  "anyio>=3.6.2",
  "pytest-cov>=4.0.0",
  "wemake-python-styleguide>=0.18.0",
  "ruff>=0.3.4",
  "asyncpg-stubs>=0.30.0",
]

[tool.mypy]
strict = true
pretty = true
show_error_codes = true
exclude = ["examples"]

[tool.ruff]
line-length = 88

[tool.ruff.lint]
# List of enabled rulsets.
# See https://docs.astral.sh/ruff/rules/ for more information.
select = [
  "E",   # Error
  "F",   # Pyflakes
  "W",   # Pycodestyle
  "C90", # McCabe complexity
  "I",   # Isort
  "N",   # pep8-naming
  "D",   # Pydocstyle
  "ANN", # Pytype annotations
  "S",   # Bandit
  "B",   # Bugbear
  "COM", # Commas
  "C4",  # Comprehensions
  "ISC", # Implicit string concat
  "PIE", # Unnecessary code
  "T20", # Catch prints
  "PYI", # validate pyi files
  "Q",   # Checks for quotes
  "RSE", # Checks raise statements
  "RET", # Checks return statements
  "SLF", # Self checks
  "SIM", # Simplificator
  "PTH", # Pathlib checks
  "ERA", # Checks for commented out code
  "PL",  # PyLint checks
  "RUF", # Specific to Ruff checks
]
ignore = [
  "D105",    # Missing docstring in magic method
  "D107",    # Missing docstring in __init__
  "D212",    # Multi-line docstring summary should start at the first line
  "D401",    # First line should be in imperative mood
  "D104",    # Missing docstring in public package
  "D100",    # Missing docstring in public module
  "ANN401",  # typing.Any are disallowed in `**kwargs
  "PLR0913", # Too many arguments for function call
  "D106",    # Missing docstring in public nested class
  "COM812",  # Missing trailing comma (formatter handles)
  "ISC001",  # Single line implicit string concatenation (formatter handles)
]
exclude = [".venv/"]
mccabe = { max-complexity = 10 }

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "S101",   # Use of assert detected
  "S301",   # Use of pickle detected
  "D103",   # Missing docstring in public function
  "SLF001", # Private member accessed
  "S311",   # Standard pseudo-random generators are not suitable for security/cryptographic purposes
  "D101",   # Missing docstring in public class
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["int", "str", "float"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["taskiq_dependencies.Depends", "taskiq.TaskiqDepends"]
