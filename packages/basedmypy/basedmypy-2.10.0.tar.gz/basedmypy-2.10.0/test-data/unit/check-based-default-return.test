-- Type checker test cases for default return type.


[case testSimple]
def f(): ...
reveal_type(f)  # N: Revealed type is "def () -> None"
reveal_type(f())  # N: Revealed type is "None"

def g(i: int): ...
reveal_type(g)  # N: Revealed type is "def (i: int) -> None"

class A:
    def f(self): ...
    def g(self, i: int): ...

reveal_type(A.f)  # N: Revealed type is "def (self: __main__.A) -> None"
reveal_type(A.g)  # N: Revealed type is "def (self: __main__.A, i: int) -> None"


[case testUntypedDefs]
# flags: --allow-untyped-defs --allow-any-expr

def f(): ...
reveal_type(f)  # N: Revealed type is "def () -> Untyped"

def g(i: int): ...
reveal_type(g)  # N: Revealed type is "def (i: int) -> None"

def h(i: int, j): ...  # E: Function is missing a type annotation for one or more arguments  [no-untyped-def]

class A:
    def f(self): ...
    def g(self, i): ...
    def h(self, i: int): ...
    def i(self, i: int, j): ... # E: Function is missing a type annotation for one or more arguments  [no-untyped-def]

reveal_type(A.f)  # N: Revealed type is "def (self: __main__.A) -> Untyped"
reveal_type(A.g)  # N: Revealed type is "def (self: __main__.A, i: Untyped) -> Untyped"
reveal_type(A.h)  # N: Revealed type is "def (self: __main__.A, i: int) -> None"
reveal_type(A.i)  # N: Revealed type is "def (self: __main__.A, i: int, j: Untyped) -> None"


[case testIncompleteDefs]
# flags: --allow-incomplete-defs --allow-untyped-defs --allow-any-expr

def f(i): ...
reveal_type(f)  # N: Revealed type is "def (i: Untyped) -> Untyped"

def g(i: int, j): ...
reveal_type(g)  # N: Revealed type is "def (i: int, j: Untyped) -> None"

class A:
    def f(self): ...
    def g(self, i): ...
    def h(self, i: int): ...
    def i(self, i: int, j): ...

reveal_type(A.f)  # N: Revealed type is "def (self: __main__.A) -> Untyped"
reveal_type(A.g)  # N: Revealed type is "def (self: __main__.A, i: Untyped) -> Untyped"
reveal_type(A.h)  # N: Revealed type is "def (self: __main__.A, i: int) -> None"
reveal_type(A.i)  # N: Revealed type is "def (self: __main__.A, i: int, j: Untyped) -> None"


[case testGenerator]
def f():  # E: The return type of a generator function should be "Generator" or one of its supertypes  [misc]
    yield

def g(i: int):  # E: The return type of a generator function should be "Generator" or one of its supertypes  [misc]
    yield

class A:
    def f(self): # E: The return type of a generator function should be "Generator" or one of its supertypes  [misc]
        yield
    def g(self, i: int): # E: The return type of a generator function should be "Generator" or one of its supertypes  [misc]
        yield


[case testAsync]
async def f1():
    ...
async def f2():  # E: The return type of an async generator function should be "AsyncGenerator" or one of its supertypes  [misc]
    yield

async def g1(i: int):
    ...
async def g2(i: int):  # E: The return type of an async generator function should be "AsyncGenerator" or one of its supertypes  [misc]
    yield

class A:
    async def f1(self):
        ...
    async def f2(self): # E: The return type of an async generator function should be "AsyncGenerator" or one of its supertypes  [misc]
        yield
    async def g1(self, i: int):
        ...
    async def g2(self, i: int): # E: The return type of an async generator function should be "AsyncGenerator" or one of its supertypes  [misc]
        yield

[case testLambda]
# flags: --allow-any-expr

f = lambda x: x
g = lambda: ...
reveal_type(f)  # N: Revealed type is "def (x: Untyped) -> Any"
reveal_type(g)  # N: Revealed type is "def () -> ellipsis"


[case testExplicitAny]
# flags: --allow-any-expr  --allow-any-explicit
from typing import Any

def f() -> Any: ...
def g(i: int) -> Any: ...
reveal_type(f)  # N: Revealed type is "def () -> Any"
reveal_type(g)  # N: Revealed type is "def (i: int) -> Any"

class A:
    def f(self) -> Any: ...
    def g(self, i: int) -> Any: ...
reveal_type(A.f)  # N: Revealed type is "def (self: __main__.A) -> Any"
reveal_type(A.g)  # N: Revealed type is "def (self: __main__.A, i: int) -> Any"


[case testNoDefaultReturn]
# flags: --no-default-return --allow-any-expr

def f(i): ...  # E: Function is missing a type annotation  [no-untyped-def]
def g(i: int, j): ...  # E: Function is missing a return type annotation  [no-untyped-def] \
                       # E: Function is missing a type annotation for one or more arguments  [no-untyped-def]

class A:
    def f(self, i): ...  # E: Function is missing a type annotation  [no-untyped-def]
    def g(self, i: int, j): ...  # E: Function is missing a return type annotation  [no-untyped-def] \
                                 # E: Function is missing a type annotation for one or more arguments  [no-untyped-def]


[case testOverload]
from typing import overload

class A:
    @overload
    def f(self): ...
    @overload
    def f(self, i: int): ...
    def f(self, i: int = 0): ...

reveal_type(A.f)  # N: Revealed type is "Overload(def (self: __main__.A) -> None, def (self: __main__.A, i: int) -> None)"

@overload
def f(): ...
@overload
def f(i: int): ...
def f(i: int = 0): ...

reveal_type(f)  # N: Revealed type is "Overload(def () -> None, def (i: int) -> None)"


[case testOverloadIncomplete]
# flags: --allow-incomplete-defs --allow-untyped-defs --allow-any-expr --allow-any-decorated
from typing import overload

class A:
    @overload
    def f(self): ...
    @overload
    def f(self, i): ...
    @overload
    def f(self, i, j: int): ...
    def f(self, i: int = 0, j: int = 0): ...

reveal_type(A.f)  # N: Revealed type is "Overload(def (self: __main__.A) -> None, def (self: __main__.A, i: Untyped) -> None, def (self: __main__.A, i: Untyped, j: int) -> None)"

@overload
def f(): ...
@overload
def f(i): ...
@overload
def f(i, j: int): ...
def f(i: int = 0, j: int = 0): ...

reveal_type(f)  # N: Revealed type is "Overload(def () -> None, def (i: Untyped) -> None, def (i: Untyped, j: int) -> None)"


[case testOverloadUntyped]
# flags: --allow-untyped-defs --allow-any-expr --allow-any-decorated
from typing import overload

class A:
    @overload
    def f(self): ...
    @overload
    def f(self, i): ...
    @overload
    def f(self, *, j: int): ...
    def f(self, i: int = 0, j: int = 0): ...

reveal_type(A.f)  # N: Revealed type is "Overload(def (self: __main__.A) -> None, def (self: __main__.A, i: Untyped) -> None, def (self: __main__.A, *, j: int) -> None)"

@overload
def f(): ...
@overload
def f(i): ...
@overload
def f(*, j: int): ...
def f(i: int = 0, j: int = 0): ...

reveal_type(f)  # N: Revealed type is "Overload(def () -> None, def (i: Untyped) -> None, def (*, j: int) -> None)"

[case testOverloadOther]
# flags: --allow-untyped-defs --allow-incomplete-defs --allow-any-expr --allow-any-decorated
from typing import overload

class A:
    @overload
    def f(self) -> int: ...
    @overload
    def f(self, i): ...
    @overload
    def f(self, i, j: int): ...
    def f(self, i: int = 0, j: int = 0) -> object: ...

reveal_type(A.f)  # N: Revealed type is "Overload(def (self: __main__.A) -> int, def (self: __main__.A, i: Untyped) -> None, def (self: __main__.A, i: Untyped, j: int) -> None)"

class B:
    @overload
    def f(self) -> str: ...
    @overload
    def f(self, i): ...
    @overload
    def f(self, i, j: int) -> int: ...
    def f(self, i: int = 0, j: int = 0) -> object: ...

reveal_type(B.f)  # N: Revealed type is "Overload(def (self: __main__.B) -> str, def (self: __main__.B, i: Untyped) -> None, def (self: __main__.B, i: Untyped, j: int) -> int)"


[case testNewHasError]
# flags: --no-infer-function-types
class A:
    def __new__(cls): ...  # E: "__new__" must return a class instance (got "None")  [misc]

reveal_type(A.__new__)  # N: Revealed type is "def (cls: type[__main__.A]) -> None"
