[case testAnyOverloadMatch]
from typing import overload, Any, Callable

@overload
def f(fn: Callable[[], bool]) -> str: ...
@overload
def f(fn: Callable[[], None]) -> int: ...
def f(fn: object = 1) -> object: ...

def n(x: object) -> None: ...
a: Any  # type: ignore[explicit-any]
x = f(lambda:
      n(a))  # E: Expression has type "Any"  [any]
reveal_type(x)  # N: Revealed type is "int"



[case testAnyExprInHigherOrderOverload]
from typing import Any, Callable, overload

@overload
def f(fn: Callable[[int], object]) -> None: ...
@overload
def f(fn: object=...) -> None: ...

def f(fn: object=1) -> None: ...

# don't reveal erroneous Any
f(lambda x: reveal_type(x))  # N: Revealed type is "int"

# do reveal real Any
a: Any  # type: ignore[explicit-any]
def noop(x: object) -> None: ...
f(lambda x: noop(a))  # E: Expression has type "Any"  [any]
f(a)  # E: Expression has type "Any"  [any]

# don't reveal narrowed type
o: object
assert isinstance(o, str)
f(lambda _: reveal_type(o))  # N: Revealed type is "object"
[builtins fixtures/tuple.pyi]


[case testPositional]
from typing import overload

@overload
def f(a: int, b: int): ...
@overload
def f(a: int, c: str, /): ...
def f(a, b):
    reveal_type(a)  # N: Revealed type is "int"
    reveal_type(b)  # N: Revealed type is "int | str"


[case testInferDefault]
from typing import overload

@overload
def f(a: int, b: int, c: 1): ...
@overload
def f(a: int, b: str, c: 2): ...
def f(a="who", b=None, c=3):
    reveal_type(a)  # N: Revealed type is "int | 'who'"
    reveal_type(b)  # N: Revealed type is "int | str | None"
    reveal_type(c)  # N: Revealed type is "1 | 2 | 3"
