[case testTupleLiteralType]
from __future__ import annotations

a: (1, str) = (1, "")
reveal_type(a)  # N: Revealed type is "(1, str)"
b: (str,) = ("sus",)
reveal_type(b)  # N: Revealed type is "(str,)"
c: () = (1,)  # E: Incompatible types in assignment (expression has type "(int,)", variable has type "()")  [assignment]
reveal_type(c)  # N: Revealed type is "()"

def f1() -> (int, str):
    return 1, ""
reveal_type(f1) # N: Revealed type is "def () -> (int, str)"

def f2() -> (str,):
    return "sus",
reveal_type(f2) # N: Revealed type is "def () -> (str,)"

def f3() -> ():
    return 1,  # E: Incompatible return value type (got "(int,)", expected "()")  [return-value]
reveal_type(f3) # N: Revealed type is "def () -> ()"
[builtins fixtures/tuple.pyi]


[case testInvalidVariadic]
from __future__ import annotations

a: (1, ...) = (1, ...)   # E: Unexpected "..."  [misc]
b: (1, ...) = (1, 1)   # E: Unexpected "..."  [misc]
[builtins fixtures/tuple.pyi]


[case testInvalidUsage]
# flags: --allow-any-explicit --allow-any-expr
from typing import TypeVar
from typing_extensions import TypeAlias

A = TypeVar("A", bound=(int, str))  # E: "int" not callable  [operator] \
                                    # E: TypeVar "bound" must be a type  [misc]
B: TypeAlias = (int, str)  # E: Invalid type alias: expression is not a valid type  [valid-type]
[builtins fixtures/tuple.pyi]


[case testInvalidSyntax]
a: int, str = 1, ""  # E: invalid syntax  [syntax]
[builtins fixtures/tuple.pyi]


[case testTupleLiteralInOperation]
# flags: --python-version 3.12
a: (int, str) | int  # E: "(int, str)" is a bare literal and shouldn't be used in a type operation without "__future__.annotations"  [valid-type]
[builtins fixtures/tuple.pyi]


[case testTupleLiteralInOperationFuture]
from __future__ import annotations
a: (int, str) | int
[builtins fixtures/tuple.pyi]
