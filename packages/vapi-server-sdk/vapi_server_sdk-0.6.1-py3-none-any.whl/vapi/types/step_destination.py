# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .step_destination_conditions_item import StepDestinationConditionsItem
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class StepDestination(UniversalBaseModel):
    type: typing.Literal["step"] = "step"
    conditions: typing.Optional[typing.List[StepDestinationConditionsItem]] = pydantic.Field(default=None)
    """
    This is an optional array of conditions that must be met for this destination to be triggered. If empty, this is the default destination that the step transfers to.
    """

    step_name: typing_extensions.Annotated[str, FieldMetadata(alias="stepName")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
