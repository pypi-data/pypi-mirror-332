{
    // Copilot custom instructions settings
    "github.copilot.chat.codeGeneration.useInstructionFiles": true,
    "github.copilot.chat.codeGeneration.instructions": [
        {
            "text": "Follow PEP 8 style guidelines."
        },
        {
            "text": "Use type hints for all functions."
        },
        {
            "text": "Include docstrings for all public functions and methods."
        },
        {
            "text": "Prefer modern Python features (f-strings, walrus operator, etc)."
        },
        {
            "text": "Import libraries at the top of the file."
        },
        {
            "text": "Write explicit code - avoid 'magic' when clear alternatives exist."
        },
        {
            "text": "Use one statement per line for better readability."
        },
        {
            "text": "Prefer 'if x:' over 'if x == True:' and 'if x is None:' over 'if x == None:'."
        },
        {
            "text": "Use 'with' statements for file operations and resource management."
        },
        {
            "text": "Prefer list/dict/set comprehensions for simple transformations."
        },
        {
            "text": "Never iterate over a collection while modifying it."
        },
        {
            "text": "Use parentheses for line continuations rather than backslashes."
        },
        {
            "text": "Use 'in' syntax for dictionary membership checks instead of .has_key()."
        },
        {
            "text": "Use enumerate() when you need both index and value from an iterable."
        }
    ],
    "github.copilot.chat.testGeneration.instructions": [
        {
            "text": "Use pytest for all test cases."
        },
        {
            "text": "Include docstrings explaining what is being tested."
        },
        {
            "text": "Create comprehensive tests with edge cases."
        },
        {
            "text": "Mock external dependencies when appropriate."
        }
    ],
    "github.copilot.chat.reviewSelection.instructions": [
        {
            "text": "Focus on identifying potential bugs, performance issues, and security concerns."
        },
        {
            "text": "Suggest improvements for readability and maintainability."
        },
        {
            "text": "Check for proper error handling and edge cases."
        },
        {
            "text": "Ensure code follows Pythonic idioms and PEP 8 guidelines."
        },
        {
            "text": "Flag any non-idiomatic patterns like modifying collections during iteration."
        },
        {
            "text": "Verify proper use of context managers for resource handling."
        }
    ],
    "github.copilot.chat.commitMessageGeneration.instructions": [
        {
            "text": "Follow conventional commit format (feat, fix, chore, docs, etc)."
        },
        {
            "text": "Keep messages concise but descriptive of all changes made."
        },
        {
            "text": "Reference issue numbers where applicable."
        }
    ],

    // Editor settings
    "editor.rulers": [
        88
    ],
    "editor.tabSize": 4,
    "editor.insertSpaces": true,
    "editor.suggestSelection": "first",
    "editor.wordWrap": "on",
    "editor.renderWhitespace": "all",
    "files.trimTrailingWhitespace": true,
    "files.insertFinalNewline": true,
    // Python specific settings
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": true,
    "python.linting.pycodestyleEnabled": true,
    "python.formatting.provider": "black",
    "python.formatting.blackArgs": [
        "--line-length=88"
    ],
    // Search settings
    "search.exclude": {
        "**/__pycache__": true,
        "**/.venv": true,
        "**/.pytest_cache": true,
        "**/.coverage": true
    }
}
