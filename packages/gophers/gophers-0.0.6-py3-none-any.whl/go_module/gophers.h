/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) char* ReadCSV(char* csvFile);
extern __declspec(dllexport) char* ReadJSON(char* jsonStr);
extern __declspec(dllexport) char* ReadNDJSON(char* jsonStr);

// ReadYAML reads a YAML string or file and converts it to a DataFrame.
extern __declspec(dllexport) char* ReadYAML(char* yamlStr);

// ReadParquetWrapper is a c-shared exported function that wraps ReadParquet.
// It accepts a C string representing the path (or content) of a parquet file,
// calls ReadParquet, marshals the resulting DataFrame back to JSON, and returns it as a C string.
//
extern __declspec(dllexport) char* ReadParquetWrapper(char* parquetPath);
extern __declspec(dllexport) char* GetAPIJSON(char* endpoint, char* headers, char* queryParams);

// Print displays the DataFrame in a simple tabular format.
//
extern __declspec(dllexport) char* Show(char* dfJson, int chars, int record_count);
extern __declspec(dllexport) char* Head(char* dfJson, int chars);
extern __declspec(dllexport) char* Tail(char* dfJson, int chars);
extern __declspec(dllexport) char* Vertical(char* dfJson, int chars, int record_count);

// DisplayBrowserWrapper is an exported function that wraps the DisplayBrowser method.
// It takes a JSON-string representing the DataFrame, calls DisplayBrowser, and
// returns an empty string on success or an error message on failure.
//
extern __declspec(dllexport) char* DisplayBrowserWrapper(char* dfJson);

// DisplayWrapper is an exported function that wraps the Display method.
// It takes a JSON-string representing the DataFrame, calls Display, and
// returns the HTML string on success or an error message on failure.
//
extern __declspec(dllexport) char* DisplayWrapper(char* dfJson);

// DisplayToFile
// DisplayToFileWrapper is an exported function that wraps the DisplayToFile method.
// It takes a JSON-string representing the DataFrame and a file path, calls DisplayToFile,
// and returns an empty string on success or an error message on failure.
//
extern __declspec(dllexport) char* DisplayToFileWrapper(char* dfJson, char* filePath);

// DisplayChartWrapper is an exported function that wraps the DisplayChart function.
// It takes a JSON-string representing the Chart, calls DisplayChart, and
// returns the HTML string on success or an error message on failure.
//
extern __declspec(dllexport) char* DisplayChartWrapper(char* chartJson);

// DisplayHTMLWrapper is an exported function that wraps the DisplayHTML function.
// It takes a string representing the HTML content and returns the HTML content as a C string.
//
extern __declspec(dllexport) char* DisplayHTMLWrapper(char* html);

// BarChartWrapper is an exported function that wraps the BarChart function.
//
extern __declspec(dllexport) char* BarChartWrapper(char* dfJson, char* title, char* subtitle, char* groupcol, char* aggsJson);

// ColumnChartWrapper is an exported function that wraps the ColumnChart function.
// It takes a JSON-string representing the DataFrame and chart parameters, calls ColumnChart, and
// returns the HTML string on success or an error message on failure.
//
extern __declspec(dllexport) char* ColumnChartWrapper(char* dfJson, char* title, char* subtitle, char* groupcol, char* aggsJson);

// StackedBarChartWrapper is an exported function that wraps the StackedBarChart function.
// It takes a JSON-string representing the DataFrame and chart parameters, calls StackedBarChart, and
// returns the HTML string on success or an error message on failure.
//
extern __declspec(dllexport) char* StackedBarChartWrapper(char* dfJson, char* title, char* subtitle, char* groupcol, char* aggsJson);

// StackedPercentChartWrapper is an exported function that wraps the StackedPercentChart function.
// It takes a JSON-string representing the DataFrame and chart parameters, calls StackedPercentChart, and
// returns the HTML string on success or an error message on failure.
//
extern __declspec(dllexport) char* StackedPercentChartWrapper(char* dfJson, char* title, char* subtitle, char* groupcol, char* aggsJson);

// CreateDashboardWrapper is an exported function that wraps the CreateDashboard method.
//
extern __declspec(dllexport) char* CreateDashboardWrapper(char* dfJson, char* title);

// OpenDashboardWrapper is an exported function that wraps the Open method.
//
extern __declspec(dllexport) char* OpenDashboardWrapper(char* dashboardJson);

// SaveDashboardWrapper is an exported function that wraps the Save method.
//
extern __declspec(dllexport) char* SaveDashboardWrapper(char* dashboardJson, char* filename);

// AddPageWrapper is an exported function that wraps the AddPage method.
//
extern __declspec(dllexport) char* AddPageWrapper(char* dashboardJson, char* name);

// AddHTMLWrapper is an exported function that wraps the AddHTML method.
//
extern __declspec(dllexport) char* AddHTMLWrapper(char* dashboardJson, char* page, char* text);

// AddDataframeWrapper is an exported function that wraps the AddDataframe method.
//
extern __declspec(dllexport) char* AddDataframeWrapper(char* dashboardJson, char* page, char* dfJson);

// AddChartWrapper is an exported function that wraps the AddChart method.
//
extern __declspec(dllexport) char* AddChartWrapper(char* dashboardJson, char* page, char* chartJson);

// AddHeadingWrapper is an exported function that wraps the AddHeading method.
//
// AddHeadingWrapper is an exported function that wraps the AddHeading method.
//
//export AddHeadingWrapper
extern __declspec(dllexport) char* AddHeadingWrapper(char* dashboardJson, char* page, char* heading, int size);

// AddTextWrapper is an exported function that wraps the AddText method.
//
extern __declspec(dllexport) char* AddTextWrapper(char* dashboardJson, char* page, char* text);

// AddSubTextWrapper is an exported function that wraps the AddSubText method.
//
extern __declspec(dllexport) char* AddSubTextWrapper(char* dashboardJson, char* page, char* text);

// AddBulletsWrapper is an exported function that wraps the AddBullets method.
//
extern __declspec(dllexport) char* AddBulletsWrapper(char* dashboardJson, char* page, char* bulletsJson);

// SumWrapper is an exported function that returns an Aggregation struct for the Sum function.
//
extern __declspec(dllexport) char* SumWrapper(char* name);

// AggWrapper is an exported function that converts multiple Column functions to a slice of Aggregation structs.
//
extern __declspec(dllexport) char* AggWrapper(char* colsJson);

// MaxWrapper is an exported function that wraps the Max function.
//
extern __declspec(dllexport) char* MaxWrapper(char* name);

// MinWrapper is an exported function that wraps the Min function.
//
extern __declspec(dllexport) char* MinWrapper(char* name);

// MedianWrapper is an exported function that wraps the Median function.
//
extern __declspec(dllexport) char* MedianWrapper(char* name);

// MeanWrapper is an exported function that wraps the Mean function.
//
extern __declspec(dllexport) char* MeanWrapper(char* name);

// ModeWrapper is an exported function that wraps the Mode function.
//
extern __declspec(dllexport) char* ModeWrapper(char* name);

// UniqueWrapper is an exported function that wraps the Unique function.
//
extern __declspec(dllexport) char* UniqueWrapper(char* name);

// FirstWrapper is an exported function that wraps the First function.
//
extern __declspec(dllexport) char* FirstWrapper(char* name);

// ColumnOp applies an operation (identified by opName) to the columns
// specified in colsJson (a JSON array of strings) and stores the result in newCol.
// The supported opName cases here are "SHA256" and "SHA512". You can add more operations as needed.
//
extern __declspec(dllexport) char* ColumnOp(char* dfJson, char* newCol, char* opName, char* colsJson);

// GroupByWrapper is an exported function that wraps the GroupBy method.
// It takes a JSON-string representing the DataFrame, the group column, and a JSON-string representing the aggregations.
// It returns the resulting DataFrame as a JSON string.
//
extern __declspec(dllexport) char* GroupByWrapper(char* dfJson, char* groupCol, char* aggsJson);

// ColumnCollectList applies CollectList on the specified source column
// and creates a new column.
//
extern __declspec(dllexport) char* ColumnCollectList(char* dfJson, char* newCol, char* source);

// ColumnCollectSet applies CollectSet on the specified source column
// and creates a new column.
//
extern __declspec(dllexport) char* ColumnCollectSet(char* dfJson, char* newCol, char* source);

// ColumnSplit applies Split on the specified source column with the given delimiter
// and creates a new column.
//
extern __declspec(dllexport) char* ColumnSplit(char* dfJson, char* newCol, char* source, char* delim);
extern __declspec(dllexport) char* DFColumns(char* dfJson);

// DFCount returns the number of rows in the DataFrame.
//
extern __declspec(dllexport) int DFCount(char* dfJson);

// DFCountDuplicates returns the count of duplicate rows.
// It accepts a JSON array of column names (or an empty array to use all columns).
//
extern __declspec(dllexport) int DFCountDuplicates(char* dfJson, char* colsJson);

// DFCountDistinct returns the count of unique rows (or unique values in the provided columns).
// Accepts a JSON array of column names (or an empty array to use all columns).
//
extern __declspec(dllexport) int DFCountDistinct(char* dfJson, char* colsJson);

// DFCollect returns the collected values from a specified column as a JSON-array.
//
extern __declspec(dllexport) char* DFCollect(char* dfJson, char* colName);
extern __declspec(dllexport) char* ToCSVFileWrapper(char* dfJson, char* filename);

#ifdef __cplusplus
}
#endif
