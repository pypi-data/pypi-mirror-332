[build-system]
requires = ["flit_core"]
build-backend = "flit_core.buildapi"

[project]
dynamic = ["version", "description"]
name = "asyncstdlib"
authors = [
    {name = "Max KÃ¼hn", email = "maxfischer2781@gmail.com"},
]
readme = "README.rst"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
license = {"file" = "LICENSE"}
keywords = ["async", "enumerate", "itertools", "builtins", "functools", "contextlib"]
requires-python = "~=3.8"
dependencies = []

[project.optional-dependencies]
test = [
    "pytest",
    "flake8",
    "flake8-bugbear",
    "black; implementation_name=='cpython'",
    "coverage",
    "pytest-cov",
    "flake8-2020",
    "mypy; implementation_name=='cpython'",
]
typetest = [
    "mypy; implementation_name=='cpython'",
    "pyright",
    "typing-extensions",
]
doc = ["sphinx", "sphinxcontrib-trio"]

[project.urls]
Documentation = "https://asyncstdlib.readthedocs.io/en/latest/"
Source = "https://github.com/maxfischer2781/asyncstdlib"

[tool.flit.sdist]
include = ["unittests"]

[tool.mypy]
files = ["asyncstdlib", "typetests"]
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true

[tool.pyright]
include = ["asyncstdlib", "typetests"]
typeCheckingMode = "strict"
pythonPlatform = "All"
pythonVersion = "3.8"
verboseOutput = true

[tool.pytest.ini_options]
testpaths = [
    "unittests",
]
