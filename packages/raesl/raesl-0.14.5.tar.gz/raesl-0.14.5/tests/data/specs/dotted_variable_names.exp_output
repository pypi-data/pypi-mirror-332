
TYPES:
type#1 = type
type#2 = type
type#3 = type
type#4 = type
type#5 = type <-- type#1
type#6 = bundle
    x: type#5
    y: type#5
type#6 end

type#7 = type <-- type#1
type#8 = type <-- type#1
type#9 = type <-- type#1
type#10 = bundle
    I: type#8
    V: type#9
type#10 end


typedef real: type#1
typedef integer: type#2
typedef string: type#3
typedef boolean: type#4
typedef fii: type#5
typedef foo: type#6
typedef fuu: type#7
typedef current: type#8
typedef voltage: type#9
typedef power: type#10

VERBS:
    VerbPrepos('provide', 'to')
      #< No doc-comments found.
    VerbPrepos('convert', 'into')
      #< No doc-comments found.

RELATION-DEFINITIONS:
    def a2b:
      #< No doc-comments found.
        input a: type#5
        output b: type#5

COMPONENTS:
    world:
      #< No doc-comments found.
        var faa
          \- x - type#5
          |      #< No doc-comments found.
          \- y - type#5
                 #< No doc-comments found.
        var p
          \- I - type#8
          |      #< No doc-comments found.
          \- V - type#9
                 #< No doc-comments found.
        child-component c1: def=blob
          #< No doc-comments found.
            arg faa.x <-> param q
              - type#5
                #< No doc-comments found.
            arg faa.y <-> param r
              - type#5
                #< No doc-comments found.
        child-component c2: def=blib
          #< No doc-comments found.
            No instance argument!
        relation-instance r1: def=a2b
          #< No doc-comments found.
            ['faa.x'] <-> param('a', input, multi=False)
              - type#5
                #< No doc-comments found.
            ['faa.y'] <-> param('b', output, multi=False)
              - type#5
                #< No doc-comments found.
        requirement goal g1:
          #< No doc-comments found.
            comp 'c1' must (provide to) comp 'c2'
            flow 'faa.x':
              - type#5
                #< No doc-comments found.
            subclause s:
              faa.y must <= 12[-]
              - type#5
                #< No doc-comments found.
        requirement design d1
          #< No doc-comments found.
            faa.y must >= 10[-]
            - type#5
              #< No doc-comments found.
        requirement design d2
          #< No doc-comments found.
            faa.x must < faa.y
            - type#5
              #< No doc-comments found.
            - type#5
              #< No doc-comments found.
        requirement behavior b1:
          #< No doc-comments found.
            case c1:
                w1: if
                  faa.y is <= 3[-]
                  - type#5
                    #< No doc-comments found.
                t1: then
                  faa.x must <= 2[-]
                  - type#5
                    #< No doc-comments found.
            no default case.
    def component blib:
      #< No doc-comments found.
    def component blob:
      #< No doc-comments found.
        param q
          - type#5
            #< No doc-comments found.
        param r
          - type#5
            #< No doc-comments found.
        requirement transform t1:
          #< No doc-comments found.
          must (convert into)
          in-flow 'q':
          - type#5
            #< No doc-comments found.
          out-flow 'r':
          - type#5
            #< No doc-comments found.
