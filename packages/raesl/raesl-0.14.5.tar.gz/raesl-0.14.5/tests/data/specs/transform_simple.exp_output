
TYPES:
type#1 = type
type#2 = type
type#3 = type
type#4 = type

typedef real: type#1
typedef integer: type#2
typedef string: type#3
typedef boolean: type#4

VERBS:
    VerbPrepos('convert', 'to')
      #< No doc-comments found.

RELATION-DEFINITIONS:

COMPONENTS:
    world:
      #< No doc-comments found.
        child-component x: def=X
          #< No doc-comments found.
            No instance argument!
    def component X:
      #< No doc-comments found.
        var a
          - type#1
            #< No doc-comments found.
        child-component y: def=Y
          #< No doc-comments found.
            arg a <-> param b
              - type#1
                #< No doc-comments found.
    def component Y:
      #< No doc-comments found.
        param b
          - type#1
            #< No doc-comments found.
        requirement transform g1:
          #< No doc-comments found.
          must (convert to)
          in-flow 'b':
          - type#1
            #< No doc-comments found.
          out-flow 'b':
          - type#1
            #< No doc-comments found.
