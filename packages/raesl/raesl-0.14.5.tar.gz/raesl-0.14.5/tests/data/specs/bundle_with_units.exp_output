
TYPES:
type#1 = type
type#2 = type
type#3 = type
type#4 = type
type#5 = type <-- type#1
    units: m, cm, mm
type#6 = bundle
    x: type#5
    y: type#2
type#6 end


typedef real: type#1
typedef integer: type#2
typedef string: type#3
typedef boolean: type#4
typedef fuu: type#5
typedef foo: type#6

VERBS:
    VerbPrepos('provide', 'to')
      #< No doc-comments found.

RELATION-DEFINITIONS:

COMPONENTS:
    world:
      #< No doc-comments found.
        var faa
          \- x - type#5
          |      #< No doc-comments found.
          \- y - type#2
                 #< No doc-comments found.
        child-component b1: def=blob
          #< No doc-comments found.
            No instance argument!
        child-component b2: def=blob
          #< No doc-comments found.
            No instance argument!
        requirement goal g1:
          #< No doc-comments found.
            comp 'b1' must (provide to) comp 'b2'
            flow 'faa.x':
              - type#5
                #< No doc-comments found.
            subclause s1:
              faa.y must == 1[-]
              - type#2
                #< No doc-comments found.
    def component blob:
      #< No doc-comments found.
