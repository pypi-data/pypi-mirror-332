#< pre-defverb-error
define verb
    #< post-defverb-error
    transfer with    #< after-verb-comment

#< pre-defrel-comment
define relation
#< pos-defrel-error
    func
    #< post-func-rel-comment
        relating parameters
            #< post-relparam-comment
            * x is a real
            #< post-rel-x-comment

#< pre-compdef-comment
define component X
    #< pre-var-comment
    variable
        #< post-var-error
        a is a real
        #< post-var-a-comment

    #< pre-param-comment
    parameter
        #< post-param-error
        p is a real
        #< post-var-p-comment

    #< pre-compinst-comment
    components
        #< post-compinst-error
        y is a Y
        #< post-compinst-y

    #< pre-relinst-comment
    relations
        #< post-relinst-error
        f1: func
            #< post-rel-f1
            relating arguments #< post-rel-f1-args
            * a  #< post-rel-f1-a-arg

    #< pre-goalreq-comment
    goal-requirement
        #< post-goal-error
        g1: y must transfer a with y
        #< post-g1-comment

    #< pre-transformreq-comment
    transformation-requirement
        #< post-transform-error
        t1: must transfer a with p #< after-t1-comment

    #< pre-designreq-comment
    design-constraints
        #< post-designreq-error
        d1: a should be smaller than p

    #< pre-behavereq-comment
    behavior-requirement
        #< post-behavior-error
        h1:
            #< post-h1
            case otherwise: #< post-otherwise-case
            when no other case applies #< post-default-when
            then #< post-then
                * h2: p must be at least 29
                #< post-h2

    #< pre-need-comment
    needs #< after-need-error
        var-need:       a must be big  #< post-varneed
        param-need:     p must be small #< post-paramneed
        compinst-need:  y must be itself
        #< post-compinst-need
        relinst-need:   f1 could be related
        #< post-relinst-need
        goal-need:      g1 must be implemented #< post-goal-need
        transform-need: t1 must be transformed #< post-transform-need
        design-need:    d1 must be designed #< post-design-need
        behave-need:    h1 should behave #< post-behave-need

    comments
        X #< comments-X
        a
            #< comments-a
        p #< comments-b
        y #< comments-y
        f1 #< comments-f1
        g1 #< comments-g1
        t1 #< comments-t1
        d1 #< comments-d1
        h1 #< comments-h1

        var-need #< comment-vn
        param-need #< comment-pn
        compinst-need #< comment-ci
        relinst-need #< comment-ri
        goal-need #< comment-gn
        transform-need #< comment-tn
        design-need #< comment-dn
        behave-need #< comment-bn

define component Y
    #< post-Y-compdef
    empty  #< after-empty

world #< after-world-error
    empty
#< final-line-error
