
TYPES:
type#1 = type
type#2 = type
type#3 = type
type#4 = type

typedef real: type#1
typedef integer: type#2
typedef string: type#3
typedef boolean: type#4

VERBS:
    VerbPrepos('provide', 'to')
      #< No doc-comments found.

RELATION-DEFINITIONS:

COMPONENTS:
    world:
      #< No doc-comments found.
        var power
          - type#1
            #< No doc-comments found.
        child-component power-supply: def=PowerSupply
          #< No doc-comments found.
            No instance argument!
        child-component drive-mechanism: def=ElectricalDriveMechanism
          #< No doc-comments found.
            No instance argument!
        requirement goal provide-foo-01:
          #< Regular comment @rationale Explanation of the 'why' of this requirement. @rationale More explanation of the 'why' of this requirement. @stakeholders Those who require this goal. @expertise The expertise you need to implement this goal.
            comp 'power-supply' must (provide to) comp 'drive-mechanism'
            flow 'power':
              - type#1
                #< No doc-comments found.
    def component ElectricalDriveMechanism:
      #< No doc-comments found.
    def component PowerSupply:
      #< No doc-comments found.
