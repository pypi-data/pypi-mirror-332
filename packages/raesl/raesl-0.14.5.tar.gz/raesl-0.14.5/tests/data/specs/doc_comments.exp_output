
TYPES:
type#1 = type
type#2 = type
type#3 = type
type#4 = type

typedef real: type#1
typedef integer: type#2
typedef string: type#3
typedef boolean: type#4

VERBS:
    VerbPrepos('transfer', 'with')
      #< after-verb-comment pre-defrel-comment

RELATION-DEFINITIONS:
    def func:
      #< post-func-rel-comment post-relparam-comment post-rel-x-comment pre-compdef-comment
        inp_out x: type#1

COMPONENTS:
    world:
      #< No doc-comments found.
    def component X:
      #< pre-var-comment comments-X
        var a
          - type#1
            #< post-var-a-comment pre-param-comment comments-a
        param p
          - type#1
            #< post-var-p-comment pre-compinst-comment comments-b
        child-component y: def=Y
          #< post-compinst-y pre-relinst-comment comments-y
            No instance argument!
        relation-instance f1: def=func
          #< post-rel-f1 post-rel-f1-args post-rel-f1-a-arg pre-goalreq-comment comments-f1
            ['a'] <-> param('x', inp_out, multi=False)
              - type#1
                #< post-var-a-comment pre-param-comment comments-a
        requirement goal g1:
          #< post-g1-comment pre-transformreq-comment comments-g1
            comp 'y' must (transfer with) comp 'y'
            flow 'a':
              - type#1
                #< post-var-a-comment pre-param-comment comments-a
        requirement transform t1:
          #< after-t1-comment pre-designreq-comment comments-t1
          must (transfer with)
          in-flow 'a':
          - type#1
            #< post-var-a-comment pre-param-comment comments-a
          out-flow 'p':
          - type#1
            #< post-var-p-comment pre-compinst-comment comments-b
        need var-need: subject a
          #< post-varneed comment-vn
        need param-need: subject p
          #< post-paramneed comment-pn
        need compinst-need: subject y
          #< post-compinst-need comment-ci
        need relinst-need: subject f1
          #< post-relinst-need comment-ri
        need goal-need: subject g1
          #< post-goal-need comment-gn
        need transform-need: subject t1
          #< post-transform-need comment-tn
        need design-need: subject d1
          #< post-design-need comment-dn
        need behave-need: subject h1
          #< post-behave-need comment-bn
        constraint design d1
          #< pre-behavereq-comment comments-d1
            a should < p
            - type#1
              #< post-var-a-comment pre-param-comment comments-a
            - type#1
              #< post-var-p-comment pre-compinst-comment comments-b
        requirement behavior h1:
          #< post-h1 post-otherwise-case post-default-when post-then post-h2 pre-need-comment comments-h1
            default:
                h2: then
                  p must >= 29[-]
                  - type#1
                    #< post-var-p-comment pre-compinst-comment comments-b
    def component Y:
      #< post-Y-compdef after-empty
