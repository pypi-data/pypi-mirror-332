
TYPES:
type#1 = type
type#2 = type
type#3 = type
type#4 = type

typedef real: type#1
typedef integer: type#2
typedef string: type#3
typedef boolean: type#4

VERBS:
    VerbPrepos('provide', 'to')
      #< No doc-comments found.

RELATION-DEFINITIONS:

COMPONENTS:
    world:
      #< No doc-comments found.
        var x
          - type#1
            #< Oh yeah it works! Even multi-line!
        var y
          - type#1
            #< No doc-comments found.
        child-component blib: def=Blab
          #< Hello
            No instance argument!
        child-component blub: def=Blab
          #< Goodby
            No instance argument!
        requirement goal g2:
          #< Peace Au revoir
            comp 'blub' must (provide to) comp 'blib'
            flow 'y':
              - type#1
                #< No doc-comments found.
        requirement goal g4:
          #< Pear Bonjour
            comp 'blib' must (provide to) comp 'blub'
            flow 'x':
              - type#1
                #< Oh yeah it works! Even multi-line!
    def component Blab:
      #< No doc-comments found.
        var x
          - type#1
            #< No doc-comments found.
        var y
          - type#1
            #< No doc-comments found.
        child-component A: def=Blob
          #< Apple
            No instance argument!
        child-component B: def=Blob
          #< Pie
            No instance argument!
        requirement goal g1:
          #< Strawberry Bonjour
            comp 'A' must (provide to) comp 'B'
            flow 'x':
              - type#1
                #< No doc-comments found.
        requirement goal g2:
          #< Banana's Au revoir
            comp 'B' must (provide to) comp 'A'
            flow 'y':
              - type#1
                #< No doc-comments found.
    def component Blob:
      #< No doc-comments found.
