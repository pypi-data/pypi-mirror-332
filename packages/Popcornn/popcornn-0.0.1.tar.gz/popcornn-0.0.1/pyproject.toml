[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "Popcornn"
description="Path Optimization with a Continuous Representation Neural Network (Popcornn) optimizes molecular reaction paths along analytic and MLIP potentials."
version = "0.0.1"
readme = "README.md"
license = { text = "CC-BY 4.0" }
authors = [
{ name = "Kareem Hegazy", email = "khegazy@berkeley.edu" },
{ name = "Eric C.-Y. Yuan", email = "ericyuan@berkeley.edu" },
{ name = "Anup Kumar", email = "anukumar94663@gmail.com" },
{ name = "Dmitriy Morozov", email = "dmitriy@mrzv.org" },
{ name = "Michael Mahoney", email = "mmahoney@stat.berkeley.edu" },
{ name = "Teresa Head-Gordon", email = "thg@berkeley.edu" },
{ name = "Samuel M. Blau", email = "smblau@lbl.gov " }
]
keywords = ["Chemistry", "Transition State", "Reaction path", "Minimum Energy Path", "Geodesic"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Unix",
    "Operating System :: MacOS",
]
requires-python = ">=3.10, <3.13"
dependencies = [
    "numpy",
    "torch",
    "matplotlib",
    "pytest",
    "pytest-cov",
    "PyYAML",
    "torchpathdiffeq",
    "newtonnet",
]

[project.optional-dependencies]
dev = ["pytest>=7.4.0", "pytest-cov>=3.0.0", "ruff>=0.0.285"]
docs = [
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.22.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "pillow>=10.0.0",
    "cairosvg>=2.7.1"
]

[project.urls]
repository = "https://github.com/khegazy/Popcornn"
documentation = "https://khegazy.github.io/Popcornn/"
changelog = "https://github.com/khegazy/Popcornn/blob/main/CHANGELOG.md"

[tool.setuptools.package-data]
Popcornn = ["py.typed"]

[tool.pyright]
include = ["Popcornn"]
exclude = ["**/__pycache__"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-p no:warnings", "--import-mode=importlib"]
xfail_strict = true
log_cli_level = "warn"
pythonpath = "Popcornn"
testpaths = ["tests"]

[tool.black]
exclude = '''
/(
    \.git
  | \.tox
)/
'''
skip-magic-trailing-comma = true

[tool.isort]
profile = 'black'
skip_gitignore = true

[tool.coverage.run]
source = ["Popcornn"]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "except ImportError",
]

[tool.ruff]
lint.select = [
  "A",      # flake8-builtins
  "ARG",    # flake8-unused-arguments
  "ASYNC",  # flake8-async
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "DTZ",    # flake8-datetimez
  "E",      # pycodestyle error
  "EXE",    # flake8-executable
  "F",      # pyflakes
  "FA",     # flake8-future-annotations
  "FLY",    # flynt
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "INT",    # flake8-gettext
  "ISC",    # flake8-implicit-str-concat
  "LOG",    # flake8-logging
  "NPY",    # numpy-specific rules
  "PD",     # pandas-vet
  "PERF",   # perflint
  "PIE",    # flake8-pie
  "PL",     # pylint
  "PT",     # flake8-pytest-style
  "PTH",    # flake8-use-pathlib
  "PYI",    # flake8-pyi
  "Q",      # flake8-quotes
  "RET",    # flake8-return
  "RSE",    # flake8-raise
  "RUF",    # Ruff-specific rules
  "SIM",    # flake8-simplify
  "SLOT",   # flake8-slots
  "T20",    # flake8-print
  "TCH",    # flake8-type-checking
  "TID",    # flake8-tidy-imports
  "TRIO",   # flake8-trio
  "UP",     # pyupgrade
  "W",      # pycodestyle warning
  "YTT",    # flake8-2020
]
lint.ignore = [
  "E501",   # Line too long
  "ISC001",   # single-line-implicit-string-concatenation
  "PERF203",  # try-except-in-loop
  "PLR",    # Design related pylint codes
  "PT004",  # Fixture does not return anything
  "PT011",  # pytest.raises
  "PT012",  # pytest.raises
  "RET505", # Unnecessary `elif` after `return`
]
src = ["Popcornn"]
lint.unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
lint.pydocstyle.convention = "numpy"
lint.isort.known-first-party = ["Popcornn"]
lint.isort.required-imports = ["from __future__ import annotations"]
extend-include = ["*.ipynb"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**" = ["ANN", "ARG", "D", "E402", "PTH", "S101"]

[tool.docformatter]
pre-summary-newline = true
black = true

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false
disable_error_code = "annotation-unchecked"
