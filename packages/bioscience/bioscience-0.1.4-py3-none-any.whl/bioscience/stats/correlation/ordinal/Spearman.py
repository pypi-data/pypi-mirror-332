from bioscience.base import *

import math
import sys
import os
import threading
import warnings
import numpy as np
import time

def spearman(dataset, deviceCount = 0, mode = 1, debug = False):
    """
    Application of the Spearman correlation method.
    
    :param dataset: The dataset object to be binarized.
    :type dataset: :class:`bioscience.base.models.Dataset`
    
    param deviceCount: Number of GPU devices to execute
    :type deviceCount: int
    
    :param mode: Type of execution of the algorithm: `mode=1` for sequential execution, `mode=2` for parallel execution on CPUs and `mode=3` for execution on a multi-GPU architecture.
    :type mode: int
    
    :return: A CorrelationModel object that stores values generated by a correlation method.
    :rtype: :class:`bioscience.base.models.CorrelationModel`      
    """ 
    
    oModel = None
    if (dataset is not None):
        sMode = ""
        if mode == 2: # NUMBA: CPU Parallel mode
            # To be developed
            sMode = "NUMBA - CPU Parallel mode (to be developed)"
        elif mode == 3: # NUMBA: GPU Parallel mode
            # To be developed
            sMode = "NUMBA - GPU Parallel mode (to be developed)"
        else: # Sequential mode
            oModel = __spearmanSequential(dataset, debug)
            deviceCount = 0
            sMode = "CPU Sequential"
    
    return oModel

def __spearmanSequential(dataset, debug):
    iRows = dataset.data.shape[0]
    iCols = dataset.data.shape[1]
    fExecutionTime = None    
    
    maxPairs = 0
    for i in range(iRows):
        for j in range(i + 1, iRows):
            maxPairs += 1
    
    fSpearmanRankG1 = np.zeros((maxPairs,iCols))
    fSpearmanRankG2 = np.zeros((maxPairs,iCols))
    fSpearmanStats = np.zeros((maxPairs,4)) # [0] --> Mean of rank G1; [1] --> Mean of rank G2; ; [2] --> aux ; [3] --> aux
    resultsCorrelation = np.zeros(maxPairs)    
    
    if debug == True:
        start_time = time.time()
    
    pattern = 0
    while pattern < maxPairs:
        
        # Get R1 and R2 from index results vector
        r1 = 0
        r2 = -1
        auxPat = pattern - iRows + 1
        
        if auxPat < 0:
            r2 = auxPat + iRows

        j = iRows - 2
        while r2 == -1:
            auxPat -= j
            r1 += 1
            if auxPat < 0:
                r2 = (j + auxPat) + (r1 + 1)
            j -= 1
        
        if r1 < iRows and r2 < iRows:
            
            # Calculation G1 and G2 ranks
            for iConditions in range(iCols):
                numEqualOrdG1 = readG1 = numEqualOrdG2 = readG2 = 1.0
                for iCont in range(iCols):
                    if iCont != iConditions:
                        if dataset.data[r1][iCont] < dataset.data[r1][iConditions]:
                            readG1 += 1.0
                        elif dataset.data[r1][iCont] == dataset.data[r1][iConditions]:
                            numEqualOrdG1 += 1.0

                        if dataset.data[r2][iCont] < dataset.data[r2][iConditions]:
                            readG2 += 1.0
                        elif dataset.data[r2][iCont] == dataset.data[r2][iConditions]:
                            numEqualOrdG2 += 1.0

                fSpearmanRankG1[pattern][iConditions] = readG1 + ((numEqualOrdG1 - 1.0) * 0.5)
                fSpearmanRankG2[pattern][iConditions] = readG2 + ((numEqualOrdG2 - 1.0) * 0.5)
                fSpearmanStats[pattern][0] += fSpearmanRankG1[pattern][iConditions]
                fSpearmanStats[pattern][1] += fSpearmanRankG2[pattern][iConditions]

            fSpearmanStats[pattern][0] /= iCols
            fSpearmanStats[pattern][1] /= iCols
            
            
            # Covariance Spearman calculation
            for iConditions in range(iCols):
                fSpearmanStats[pattern][2] += (fSpearmanRankG1[pattern][iConditions] - fSpearmanStats[pattern][0]) * (fSpearmanRankG2[pattern][iConditions] - fSpearmanStats[pattern][1])
            resultsCorrelation[pattern] = fSpearmanStats[pattern][2] / (iCols - 1)
            
            # Spearman calculation values
            fSpearmanStats[pattern][2] = 0
            fSpearmanStats[pattern][3] = 0
            for iConditions in range(iCols):
                fSpearmanStats[pattern][2] += (fSpearmanRankG1[pattern][iConditions] - fSpearmanStats[pattern][0]) * (fSpearmanRankG1[pattern][iConditions] - fSpearmanStats[pattern][0])
                fSpearmanStats[pattern][3] += (fSpearmanRankG2[pattern][iConditions] - fSpearmanStats[pattern][1]) * (fSpearmanRankG2[pattern][iConditions] - fSpearmanStats[pattern][1])
            fSpearmanStats[pattern][2] = math.sqrt(fSpearmanStats[pattern][2] / (iCols - 1))
            fSpearmanStats[pattern][3] = math.sqrt(fSpearmanStats[pattern][3] / (iCols - 1))
            
            dSpearman = None
            if (fSpearmanStats[pattern][2] * fSpearmanStats[pattern][3]) != 0:
                dSpearman = resultsCorrelation[pattern] / (fSpearmanStats[pattern][2] * fSpearmanStats[pattern][3])
            
            resultsCorrelation[pattern] = dSpearman
        
        pattern += 1
    
    if debug == True:
        end_time = time.time()
        fExecutionTime = end_time - start_time
    
    oCorrelationResults = CorrelationModel(name=SPEARMAN, results=resultsCorrelation, rows = iRows, executionTime=fExecutionTime)
    return oCorrelationResults