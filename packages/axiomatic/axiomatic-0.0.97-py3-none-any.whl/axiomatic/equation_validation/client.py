# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.variable_requirement import VariableRequirement
from ..core.request_options import RequestOptions
from ..types.equation_validation_result import EquationValidationResult
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EquationValidationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def validate_equations(
        self, *, request: typing.Sequence[VariableRequirement], request_options: typing.Optional[RequestOptions] = None
    ) -> EquationValidationResult:
        """
        Validates a set of variables against stored equations to check for inconsistencies.
        Returns validation results for each relevant equation.

        Parameters
        ----------
        request : typing.Sequence[VariableRequirement]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EquationValidationResult
            Successful Response

        Examples
        --------
        from axiomatic import Axiomatic, VariableRequirement

        client = Axiomatic(
            api_key="YOUR_API_KEY",
        )
        client.equation_validation.validate_equations(
            request=[
                VariableRequirement(
                    symbol="symbol",
                    name="name",
                    value=1.1,
                    units="units",
                    tolerance=1.1,
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "equations/validation",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[VariableRequirement], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EquationValidationResult,
                    parse_obj_as(
                        type_=EquationValidationResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEquationValidationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def validate_equations(
        self, *, request: typing.Sequence[VariableRequirement], request_options: typing.Optional[RequestOptions] = None
    ) -> EquationValidationResult:
        """
        Validates a set of variables against stored equations to check for inconsistencies.
        Returns validation results for each relevant equation.

        Parameters
        ----------
        request : typing.Sequence[VariableRequirement]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EquationValidationResult
            Successful Response

        Examples
        --------
        import asyncio

        from axiomatic import AsyncAxiomatic, VariableRequirement

        client = AsyncAxiomatic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.equation_validation.validate_equations(
                request=[
                    VariableRequirement(
                        symbol="symbol",
                        name="name",
                        value=1.1,
                        units="units",
                        tolerance=1.1,
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "equations/validation",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[VariableRequirement], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EquationValidationResult,
                    parse_obj_as(
                        type_=EquationValidationResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
