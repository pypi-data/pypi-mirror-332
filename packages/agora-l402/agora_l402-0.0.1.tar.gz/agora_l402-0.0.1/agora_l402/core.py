"""SDK to interact with Agora private api"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['base_url', 'Agora', 'ProductCard']

# %% ../nbs/00_core.ipynb 3
from fastcore.utils import *
import os
import httpx
from typing import Dict, Any, List
from time import time, sleep
import json
from httpx import HTTPError


# %% ../nbs/00_core.ipynb 4
base_url = 'https://zues.searchagora.com/api/v1'

# %% ../nbs/00_core.ipynb 5
class Agora:
    "Client for interacting with the Agora API"
    def __init__(self,
                 api_key: str = None, # The API key for the Agora account
                 base_url: str = "https://zues.searchagora.com/api/v1"): # The Agora API base URL
        self.api_key = api_key or os.environ.get("AGORA_API_KEY")
        # TODO: maybe change this for a decorator so search_trial can be used without api_key
        # if not self.api_key:
        #     raise ValueError("The api_key client option must be set either by passing api_key to the client or by setting the AGORA_API_KEY environment variable")
        self.base_url = base_url
        self._httpx_client = httpx.Client()
        self._httpx_client.headers.update({"Authorization": f"Bearer {self.api_key}"})



# %% ../nbs/00_core.ipynb 7
@patch
def search_trial(self: Agora,
                 query: str, # Search query text
                 price_range: List[int] = None, # Price range filter [min_price, max_price]
                 sort: str = None, # Sorting field: price:relevance
                 order: str = None): # Sorting order: asc or desc
    """
    Search for products using the trial endpoint.
    
    Args:
        query (str): Search query text
        price_range (list, optional): Price range filter [min_price, max_price]
        sort (str, optional): Sorting field: price:relevance
        order (str, optional): Sorting order: asc or desc
        
    Returns:
        dict: Search results with products matching the query
    
    Example:
        search_trial("shoes", [100, 1000], "price:relevance", "desc")
    """
    endpoint = f'{self.base_url}/search/trial'
    
    # Build query parameters
    params = {'q': query}
    
    if price_range: params['priceRange'] = price_range
    if sort: params['sort'] = sort
    if order: params['order'] = order
    
    # Make the request
    return httpx.get(endpoint, params=params)

# %% ../nbs/00_core.ipynb 11
@patch
def _request(self: Agora, 
             method: str, # The HTTP method to use
             path: str, # The path to request
             timeout: int = 10, # Timeout for the request in s
             **kwargs) -> Dict[str, Any]:
    "Makes an authenticated request to Agora API"
    url = f"{self.base_url}/{path}"
    return  self._httpx_client.request(method, url, timeout=timeout, **kwargs)


@patch
def text_search(self: Agora, 
                query: str, # Search query text
                count: int = 20, # Number of products per page (default: 20, max: 250)
                page: int = 1, # Page number for pagination (default: 1)
                price_range: List[int] = None, # Price range filter [min_price, max_price]
                sort: str = None, # Sorting field: price:relevance
                order: str = None, # Sorting order: asc or desc
                image_id: str = None): # Image search identifier
    """
    Search for products with full functionality.
    
    Args:
        token (str): Authentication token for API access
        query (str): Search query text
        count (int, optional): Number of products per page (default: 20, max: 250)
        page (int, optional): Page number for pagination (default: 1)
        price_range (list, optional): Price range filter [min_price, max_price]
        sort (str, optional): Sorting field: price:relevance
        order (str, optional): Sorting order: asc or desc
        image_id (str, optional): Image search identifier
        
    Returns:
        dict: Search results with products matching the query
    
    Example:
        text_search("your_token", "red shoes", count=10, page=1, 
                   price_range=[50, 200], sort="price", order="asc")
    """
    
    # Build query parameters
    params = {'q': query, 'count': count, 'page': page}
    
    if price_range: params['priceRange'] = price_range
    if sort: params['sort'] = sort
    if order: params['order'] = order
    if image_id: params['imageId'] = image_id
    
    return self._request('GET', path='search', params=params)
    

# %% ../nbs/00_core.ipynb 12
@patch
def get_product_detail(self: Agora, 
                      slug: str): # The unique identifier of the product to retrieve
    """
    Retrieve detailed information about a specific product.
    
    Args:
        slug (str): The unique identifier of the product to retrieve
        
    Returns:
        dict: Detailed information about the requested product
    
    Example:
        agora.get_product_detail("calzuro-without-pistachio-eb12f468-48a2-48af-9f5e-3fda5f6c135c-1708446961787")
    """
    # Build query parameters
    params = {'slug': slug}
    
    # Make the request
    return self._request('GET', path='product-detail', params=params)


# %% ../nbs/00_core.ipynb 14
@patch
def create_cart(self: Agora, 
                custom_user_id: str = None, # Unique identifier for the user
                items: List[Dict] = None): # List of items to add to the cart
    """
    Create a new cart for a user.
    
    Args:
        custom_user_id (str, optional): Unique identifier for the user
        items (list, optional): List of items to add to the cart
            Each item should be a dict with:
            - variantId (int): Variant ID of the product
            - product (int/str): Product ID
            - quantity (int): Quantity of the product
            
    Returns:
        dict: Response with cart creation status
    
    Example:
        agora.create_cart("user123", [
            {"variantId": 123, "product": "678f71a9356a36f784ee2e88", "quantity": 1}
        ])
    """
    # Add custom user ID if provided
    headers = {}
    if custom_user_id:
        headers['customuserid'] = custom_user_id
    
    # Prepare request body
    data = {}
    if items:
        data['items'] = items
    
    # Make the request
    return self._request('POST', path='cart', headers=headers, json=data)

# %% ../nbs/00_core.ipynb 15
@patch
def add_to_cart(self: Agora, 
                product_id: str, # ID of the product to add
                variant_id: str, # Variant ID of the product
                quantity: int = 1, # Quantity of the product (default: 1)
                custom_user_id: str = None): # Unique identifier for the user
    """
    Add a product to an existing cart.
    
    Args:
        product_id (str/int): ID of the product to add
        variant_id (str/int): Variant ID of the product
        quantity (int, optional): Quantity of the product (default: 1)
        custom_user_id (str, optional): Unique identifier for the user
        
    Returns:
        dict: Response with cart update status
    
    Example:
        agora.add_to_cart("678f71a9356a36f784ee2e88", "2061038485517", 2, "user123")
    """
    # Add custom user ID if provided
    headers = {}
    if custom_user_id:
        headers['customuserid'] = custom_user_id
    
    # Prepare request body
    data = {
        "product": {
            "product": product_id,
            "variantId": variant_id,
            "quantity": quantity
        }
    }
    
    # Make the PUT request
    return self._request('PUT', path='cart', headers=headers, json=data)

# %% ../nbs/00_core.ipynb 16
@patch
def create_order(self: Agora, 
                encrypted_payment_info: str, # Encrypted payment information
                shipping_address: Dict[str, str], # Dictionary containing shipping address details
                current_user: Dict[str, str]): # Dictionary containing user information
    """
    Create a new order from cart items.
    
    Args:
        encrypted_payment_info (str): Encrypted payment information
        shipping_address (dict): Dictionary containing shipping address details:
            - addressFirst (str): Street address
            - city (str): City name
            - state (str): State/province
            - country (str): Country name
            - addressName (str): Name associated with address
            - zipCode (str): Postal/ZIP code
        current_user (dict): Dictionary containing user information:
            - firstname (str): User's first name
            - lastname (str): User's last name
            - email (str): User's email address
            - _id (str): User's ID
            
    Returns:
        dict: Order creation response with success status and order ID
    
    Example:
        agora.create_order(
            "encrypted_data",
            {
                "addressFirst": "123 Main St",
                "city": "New York",
                "state": "NY",
                "country": "US",
                "addressName": "Home",
                "zipCode": "10001"
            },
            {
                "firstname": "John",
                "lastname": "Doe",
                "email": "john@example.com",
                "_id": "user123"
            }
        )
    """
    # Prepare request body
    data = {
        "encryptedPaymentInfo": encrypted_payment_info,
        "shippingAddress": shipping_address,
        "currentUser": current_user
    }
    
    # Make the POST request
    return self._request('POST', path='order', json=data)

# %% ../nbs/00_core.ipynb 17
@patch
def track_order(self: Agora, 
               order_id: str): # Unique identifier of the order to track
    """
    Track an existing order by its ID.
    
    Args:
        order_id (str): Unique identifier of the order to track
        
    Returns:
        dict: Detailed order information including items, status, and shipping details
    
    Example:
        agora.track_order("67c8577b3e370f07d12c7722")
    """
    # Make the GET request
    return self._request('GET', path=f'order-tracking/{order_id}')

# %% ../nbs/00_core.ipynb 18
@patch
def refresh_token(self: Agora, 
                 refresh_token_str: str): # The refresh token to validate
    """
    Refresh API key and token by providing a valid refresh token.
    
    Args:
        refresh_token_str (str): The refresh token to validate and retrieve
                               a new API key and refresh token
        
    Returns:
        dict: Object containing new API key, refresh token, and expiration time
              with the following structure:
              {
                "status": "success",
                "data": {
                  "apiKey": "...",
                  "refreshToken": "...",
                  "expiresAt": "..."
                }
              }
    
    Raises:
        ValueError: If the refresh token is invalid or missing
    """
    # Prepare request body
    data = {"refreshToken": refresh_token_str}
    
    # Make the POST request (using direct httpx call since we don't need auth here)
    r = httpx.post(f'{self.base_url}/refresh-token', json=data)
    response = dict2obj(r.json())
    
    # Check for errors
    if r.status_code != 200 or response.status == "error":
        raise ValueError(response.message)
        
    return response

# %% ../nbs/00_core.ipynb 19
@patch
def as_tools(self:Agora):
    "Return list of available tools for AI agents"
    return [
        self.search_trial,
        self.get_product_detail,
        self.create_cart,
        self.add_to_cart,
        self.create_order,
        self.track_order,
        self.refresh_token,
    ]

# %% ../nbs/00_core.ipynb 30
import json
from fasthtml.common import *
from monsterui.all import *

# %% ../nbs/00_core.ipynb 32
def ProductCard(
    item: str # JSON string containing product details (`name`, `price`, `brand`, `storeName`, `agoraScore`, `images`, `_id`)
):
    """
    Renders a product card UI component displaying product details clearly and attractively.
    Expects `item` as a JSON-formatted string with these keys:
    - `name`: Product name (str)
    - `price`: Product price (float or str)
    - `brand`: Brand name (str)
    - `storeName`: Store name (str)
    - `agoraScore`: Product rating score out of 100 (int or float)
    - `images`: List of image URLs (list[str]), first image used as main display
    - `_id`: Unique identifier for the product (str)
    """
    item = dict2obj(json.loads(item))
    return to_xml(
        Card(
            DivHStacked(
                # Left column with image
                Div(
                    Img(src=item.images[0], alt=item.name, cls="max-h-52 object-contain")
                ),
                # Right column with product details
                DivVStacked(
                    H3(item.name),
                    Strong(f"${item.price}"),
                    Div(f"Brand: {item.brand}"),
                    Div(f"Store: {item.storeName}"),
                    Div(f"Rating: {item.agoraScore}/100"),
                    Button("View Details", id=f"view-{item._id}")
                )
            )
        )
    )
