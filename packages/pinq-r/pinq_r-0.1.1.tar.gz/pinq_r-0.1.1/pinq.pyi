from typing import (
    Any,
    Callable,
    Dict,
    Iterable,
    List,
    Optional,
    Set,
    Tuple,
    TypeVar,
    Union,
)

T = TypeVar('T')
U = TypeVar('U')
K = TypeVar('K')
V = TypeVar('V')

class PinqSeq:
    """
    PinqSeq is a C#-like LINQ-inspired query processing library for Python.

    It provides fluent, chainable methods for transforming, filtering, and
    analyzing sequences of data with a focus on readability and expressiveness.
    The class maintains an internal pointer for certain operations that manage
    the current position in the sequence.
    """

    def __init__(self, items: List[Any]) -> None:
        """
        Initialize a new PinqSeq instance.

        Args:
            items: The input list of items to create the sequence from
        """
        ...

    def list(self) -> List[Any]:
        """
        Returns a Python list containing all items in the sequence.

        Returns:
            A new Python list with all the sequence elements
        """
        ...

    def tuple(self) -> Tuple[Any, ...]:
        """
        Returns a Python tuple containing all items in the sequence.

        Returns:
            A new Python tuple with all the sequence elements
        """
        ...

    def set(self) -> Set[Any]:
        """
        Returns a Python set containing all items in the sequence.

        Returns:
            A new Python set with all unique sequence elements
        """
        ...

    def enumerate(self, start_index: int = 0) -> 'PinqSeq':
        """
        Returns a new sequence where each element is a tuple of (index, value).

        Args:
            start_index: The starting index value (default: 0)

        Returns:
            A new PinqSeq where each element is a tuple of (index, original_item)
        """
        ...

    def iter(self) -> Iterable[Any]:
        """
        Returns a Python iterator over the sequence.

        Returns:
            A Python iterator that yields each element in the sequence
        """
        ...

    def len(self) -> int:
        """
        Returns the number of items in the sequence.

        Returns:
            The count of elements in the sequence
        """
        ...

    def empty(self) -> bool:
        """
        Returns true if the sequence is empty.

        Returns:
            True if the sequence has no elements, False otherwise
        """
        ...

    def rev(self) -> 'PinqSeq':
        """
        Reverses the sequence.

        Returns:
            A new PinqSeq with elements in reverse order
        """
        ...

    def select(self, func: Callable[[Any], Any]) -> 'PinqSeq':
        """
        Returns a new sequence applying the given function to each item.

        Args:
            func: A function that transforms each element

        Returns:
            A new PinqSeq with transformed elements
        """
        ...

    def where(self, predicate: Callable[[Any], bool]) -> 'PinqSeq':
        """
        Returns a new sequence filtering items based on the given predicate.

        Args:
            predicate: A function that returns True for elements to keep

        Returns:
            A new PinqSeq containing only elements that satisfy the predicate
        """
        ...

    def of_type(self, ty: type) -> 'PinqSeq':
        """
        Returns a new sequence filtering items based on the given type.

        Args:
            ty: The type to filter by

        Returns:
            A new PinqSeq containing only elements that are instances of the specified type
        """
        ...

    def order_by(self, key: Callable[[Any], Any]) -> 'PinqSeq':
        """
        Orders the sequence based on the given key function.

        Args:
            key: A function that extracts a comparison key from each element

        Returns:
            A new PinqSeq with elements sorted by the key function
        """
        ...

    def group_by(self, key_func: Callable[[Any], Any]) -> 'PinqSeq':
        """
        Groups items by keys generated by the key_func.

        Args:
            key_func: A function that generates a key for each element

        Returns:
            A new PinqSeq with tuples of (key, sub_sequence) where sub_sequence contains all
            elements sharing the same key
        """
        ...

    def at(self, index: int, default: Any = None) -> Any:
        """
        Returns the element at the given index, or the default value if the index is out of bounds.

        Args:
            index: The index of the element to retrieve (negative indices count from the end)
            default: Value to return if the index is out of bounds (default: None)

        Returns:
            The element at the specified index or the default value
        """
        ...

    def first(self, default: Any = None) -> Any:
        """
        Returns the first element in the sequence, or the default value if the sequence is empty.

        Args:
            default: Value to return if the sequence is empty (default: None)

        Returns:
            The first element or the default value
        """
        ...

    def last(self, default: Any = None) -> Any:
        """
        Returns the last element in the sequence, or the default value if the sequence is empty.

        Args:
            default: Value to return if the sequence is empty (default: None)

        Returns:
            The last element or the default value
        """
        ...

    def append(self, item: Any) -> 'PinqSeq':
        """
        Adds an item to the end of the sequence.

        Args:
            item: The item to add to the end

        Returns:
            A new PinqSeq with the item added
        """
        ...

    def prepend(self, item: Any) -> 'PinqSeq':
        """
        Adds an item to the beginning of the sequence.

        Args:
            item: The item to add to the beginning

        Returns:
            A new PinqSeq with the item added
        """
        ...

    def join(self, other: Union['PinqSeq', List[Any], Tuple[Any, ...]],
             outer_key_func: Callable[[Any], Any],
             inner_key_func: Callable[[Any], Any]) -> 'PinqSeq':
        """
        Joins this sequence with another sequence based on matching keys.

        Args:
            other: The sequence to join with (PinqSeq, list, or tuple)
            outer_key_func: A function that extracts keys from this sequence
            inner_key_func: A function that extracts keys from the input sequence

        Returns:
            A new PinqSeq with pairs of matching elements as tuples
        """
        ...

    def distinct(self) -> 'PinqSeq':
        """
        Returns a new sequence with duplicate elements removed.

        Returns:
            A new PinqSeq with only unique elements
        """
        ...

    def concat(self, other: Union['PinqSeq', List[Any], Tuple[Any, ...]]) -> 'PinqSeq':
        """
        Concatenates this sequence with another sequence, list, or tuple.

        Args:
            other: The sequence to concatenate with (PinqSeq, list, or tuple)

        Returns:
            A new PinqSeq with all elements from both sequences
        """
        ...

    def union(self, other: Union['PinqSeq', List[Any], Tuple[Any, ...]]) -> 'PinqSeq':
        """
        Returns a new sequence with elements from both sequences, removing duplicates.

        Args:
            other: The sequence to union with (PinqSeq, list, or tuple)

        Returns:
            A new PinqSeq with unique elements from both sequences
        """
        ...

    def intersect(self, other: Union['PinqSeq', List[Any], Tuple[Any, ...]]) -> 'PinqSeq':
        """
        Returns a new sequence with elements that exist in both sequences.

        Args:
            other: The sequence to intersect with (PinqSeq, list, or tuple)

        Returns:
            A new PinqSeq with elements common to both sequences
        """
        ...

    def differ(self, other: Union['PinqSeq', List[Any], Tuple[Any, ...]]) -> 'PinqSeq':
        """
        Returns a new sequence with elements from this sequence that don't exist in the other sequence.

        Args:
            other: The sequence to compare against (PinqSeq, list, or tuple)

        Returns:
            A new PinqSeq with elements unique to this sequence
        """
        ...

    def skip(self, n: int) -> 'PinqSeq':
        """
        Skips the next n items in the sequence, advancing the pointer.

        Args:
            n: The number of items to skip

        Returns:
            A new PinqSeq with the pointer advanced by n positions
        """
        ...

    def restart(self) -> 'PinqSeq':
        """
        Restarts the sequence by resetting the pointer to zero.

        Returns:
            A new PinqSeq with the pointer reset to the beginning
        """
        ...

    def take(self, n: int) -> Tuple['PinqSeq', 'PinqSeq']:
        """
        Takes the next n items from the current position.

        Args:
            n: The number of items to take

        Returns:
            A tuple containing:
            - A new PinqSeq with the next n items (or fewer if less are available)
            - The original PinqSeq with the pointer advanced past the taken items
        """
        ...

    def zip(self, other: Union['PinqSeq', List[Any], Tuple[Any, ...]], until_exhausted: bool = False) -> 'PinqSeq':
        """
        Combines elements from this sequence with elements from another sequence.

        Args:
            other: The sequence to zip with (PinqSeq, list, or tuple)
            until_exhausted: If True, continues until both sequences are exhausted,
                            filling in None for missing values. If False (default),
                            stops when the shorter sequence is exhausted.

        Returns:
            A new PinqSeq of tuples containing corresponding elements from each sequence
        """
        ...

    def zips(self, others: List[Union['PinqSeq', List[Any], Tuple[Any, ...]]], until_exhausted: bool = False) -> 'PinqSeq':
        """
        Combines elements from this sequence with elements from other sequences.

        Args:
            others: A list of sequences to zip with (PinqSeq, list, or tuple)
            until_exhausted: If True, continues until all sequences are exhausted,
                            filling in None for missing values. If False (default),
                            stops when the shortest sequence is exhausted.

        Returns:
            A new PinqSeq with tuples containing corresponding elements from each sequence
        """
        ...

    def flatten(self) -> 'PinqSeq':
        """
        Flattens nested sequences into a single sequence.

        Returns:
            A new PinqSeq with all nested sequences (lists, tuples, PinqSeq) flattened
            into a single level
        """
        ...

    def sum(self) -> Optional[float]:
        """
        Returns the sum of all elements. Warns if non-numeric elements are present.

        Returns:
            The sum of all numeric elements, or None if the sequence is empty
        """
        ...

    def average(self) -> Optional[float]:
        """
        Returns the average of all elements. Warns if non-numeric elements are present.

        Returns:
            The average of all numeric elements, or None if the sequence is empty or
            contains no numeric elements
        """
        ...

    def max(self) -> Optional[float]:
        """
        Returns the maximum value in the sequence. Warns if non-numeric elements are present.

        Returns:
            The maximum numeric value, or None if the sequence is empty or contains
            no numeric elements
        """
        ...

    def min(self) -> Optional[float]:
        """
        Returns the minimum value in the sequence. Warns if non-numeric elements are present.

        Returns:
            The minimum numeric value, or None if the sequence is empty or contains
            no numeric elements
        """
        ...

    def cast(self, ty: type, silent: bool = False) -> 'PinqSeq':
        """
        Attempts to cast all items in the sequence to the specified type.

        Args:
            type_: The target type to cast elements to
            silent: If True, items that can't be cast will be skipped instead of
                   raising an error (default: False)

        Returns:
            A new PinqSeq with elements cast to the specified type

        Raises:
            TypeError: If silent is False and an element can't be cast
        """
        ...

    def to_dict(self, key_func: Callable[[Any], K], value_func: Callable[[Any], V]) -> Dict[K, V]:
        """
        Creates a dictionary from the sequence using key_func to generate keys and value_func to generate values.

        Args:
            key_func: A function that extracts the dictionary key from each element
            value_func: A function that extracts the dictionary value from each element

        Returns:
            A dictionary with keys and values generated from the sequence
        """
        ...

    def aggregate(self, func: Callable[[Any, Any], Any], seed: Any = None) -> Any:
        """
        Applies an accumulator function over a sequence.

        Args:
            func: The accumulator function that takes two parameters (accumulator, item)
            seed: The initial value for the accumulator (default: None, which uses the first element)

        Returns:
            The final accumulated value

        Raises:
            ValueError: If the sequence is empty
        """
        ...

    def skip_while(self, predicate: Callable[[Any], bool]) -> 'PinqSeq':
        """
        Skips elements as long as a condition is true.

        Args:
            predicate: A function that returns True for elements to skip

        Returns:
            A new PinqSeq with the pointer advanced past elements where the predicate is True
        """
        ...

    def take_while(self, predicate: Callable[[Any], bool]) -> Tuple['PinqSeq', 'PinqSeq']:
        """
        Takes items from the current position as long as they satisfy the predicate.

        Args:
            predicate: A function that returns True for elements to take

        Returns:
            A tuple containing:
            - A new PinqSeq with the items that satisfy the predicate
            - The original PinqSeq with the pointer advanced past those items
        """
        ...

    def distinct_by(self, key_selector: Callable[[Any], Any]) -> 'PinqSeq':
        """
        Returns a new sequence with elements having distinct values according to the key selector function.

        Args:
            key_selector: A function that extracts the comparison key from each element

        Returns:
            A new PinqSeq with only the first element encountered for each unique key
        """
        ...

    def except_by(self, other: Union['PinqSeq', List[Any], Tuple[Any, ...]],
                      key_selector: Callable[[Any], Any]) -> 'PinqSeq':
        """
        Returns a new sequence with elements from this sequence whose keys don't exist in the other sequence.

        Args:
            other: The sequence to compare against (PinqSeq, list, or tuple)
            key_selector: A function that extracts the comparison key from each element

        Returns:
            A new PinqSeq with elements whose keys don't appear in the other sequence
        """
        ...

    def intersect_by(self, other: Union['PinqSeq', List[Any], Tuple[Any, ...]],
                        key_selector: Callable[[Any], Any]) -> 'PinqSeq':
        """
        Returns a new sequence with elements that exist in both sequences, comparing by keys.

        Args:
            other: The sequence to intersect with (PinqSeq, list, or tuple)
            key_selector: A function that extracts the comparison key from each element

        Returns:
            A new PinqSeq with elements whose keys appear in both sequences
        """
        ...

    def union_by(self, other: Union['PinqSeq', List[Any], Tuple[Any, ...]],
                key_selector: Callable[[Any], Any]) -> 'PinqSeq':
        """
        Returns a new sequence with elements from both sequences, removing duplicates based on keys.

        Args:
            other: The sequence to union with (PinqSeq, list, or tuple)
            key_selector: A function that extracts the comparison key from each element

        Returns:
            A new PinqSeq with unique elements from both sequences based on their keys
        """
        ...

    def min_by(self, key_selector: Callable[[Any], Any]) -> Any:
        """
        Returns the element with the minimum value as determined by the key selector.

        Args:
            key_selector: A function that extracts the comparison value from each element

        Returns:
            The element with the minimum key value, or None if the sequence is empty
        """
        ...

    def max_by(self, key_selector: Callable[[Any], Any]) -> Any:
        """
        Returns the element with the maximum value as determined by the key selector.

        Args:
            key_selector: A function that extracts the comparison value from each element

        Returns:
            The element with the maximum key value, or None if the sequence is empty
        """
        ...

    def chunk(self, chunk_size: int) -> 'PinqSeq':
        """
        Splits the sequence into chunks of the specified size.

        Args:
            chunk_size: The size of each chunk (must be greater than 0)

        Returns:
            A new PinqSeq containing subsequences (as PinqSeq objects) of the specified size.
            The last chunk may contain fewer elements if the sequence length is not divisible
            by the chunk_size.

        Raises:
            ValueError: If chunk_size is 0
        """
        ...
