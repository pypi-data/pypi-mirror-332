Metadata-Version: 2.2
Name: remote_cmd
Version: 0.1.2
Summary: A small package to create a remote command line for testing and automation purposes
Author-email: Aad3b435 <aad3b435@gmail.com>
License: MIT License
        
        Copyright (c) 2025 Aad3b435
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: websockets

# Remote CMD

A small package to create a remote command line for testing and automation purposes


# Example usage
```python
import asyncio
from remote_cmd import cmd

async def main():
    a, b, process, socket = await cmd.createSession("127.0.0.1", 80, True)
    await asyncio.gather(a,b)


asyncio.run(main())
```

# Example server
```python
import asyncio
import websockets
from http import HTTPStatus

async def handle_request(path, request_headers):
    if "Connection" not in request_headers or request_headers["Connection"] != "Upgrade":
        return [HTTPStatus.OK, request_headers, b"OK\n"]

# Commands to be ran
COMMANDS = ["whoami", "hostname", "dir"]

async def handle_input(websocket):
    message = await websocket.recv()
    print(message, end="")
    async for message in websocket:
        print(message, end="")

# WebSocket server handler
async def handle_client(websocket, path):
    """Handle a single WebSocket client connection."""
    a = asyncio.create_task(handle_input(websocket))
    try:
        for cmd in COMMANDS:
            cmd += "\n"
            await websocket.send(cmd)
        await asyncio.gather(a)

    except websockets.exceptions.ConnectionClosed:
        print("Client disconnected")

# Main server function
async def main():
    # Start the WebSocket server
    server = await websockets.serve(handle_client, "localhost", 80, process_request=handle_request)
    print("WebSocket server started on ws://localhost:80")

    # Run the server forever
    await server.wait_closed()

if __name__ == "__main__":
    # Run the WebSocket server asynchronously
    asyncio.run(main())
```
