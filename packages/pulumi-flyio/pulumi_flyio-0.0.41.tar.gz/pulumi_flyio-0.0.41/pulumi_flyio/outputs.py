# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import flyio as _flyio

__all__ = [
    'AppArgs',
    'CertificateArgs',
    'CertificateStateChecks',
    'IPArgs',
    'MachineArgs',
    'VolumeArgs',
]

@pulumi.output_type
class AppArgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableSubdomains":
            suggest = "enable_subdomains"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppArgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppArgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppArgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 org: str,
                 enable_subdomains: Optional[bool] = None,
                 network: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org", org)
        if enable_subdomains is not None:
            pulumi.set(__self__, "enable_subdomains", enable_subdomains)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def org(self) -> str:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="enableSubdomains")
    def enable_subdomains(self) -> Optional[bool]:
        return pulumi.get(self, "enable_subdomains")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")


@pulumi.output_type
class CertificateArgs(dict):
    def __init__(__self__, *,
                 app: str,
                 hostname: str):
        pulumi.set(__self__, "app", app)
        pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def app(self) -> str:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class CertificateStateChecks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aRecords":
            suggest = "a_records"
        elif key == "aaaaRecords":
            suggest = "aaaa_records"
        elif key == "cnameRecords":
            suggest = "cname_records"
        elif key == "dnsProvider":
            suggest = "dns_provider"
        elif key == "dnsVerificationRecord":
            suggest = "dns_verification_record"
        elif key == "resolvedAddresses":
            suggest = "resolved_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateStateChecks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateStateChecks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateStateChecks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 a_records: Sequence[str],
                 aaaa_records: Sequence[str],
                 cname_records: Sequence[str],
                 dns_provider: str,
                 dns_verification_record: str,
                 resolved_addresses: Sequence[str],
                 soa: str):
        pulumi.set(__self__, "a_records", a_records)
        pulumi.set(__self__, "aaaa_records", aaaa_records)
        pulumi.set(__self__, "cname_records", cname_records)
        pulumi.set(__self__, "dns_provider", dns_provider)
        pulumi.set(__self__, "dns_verification_record", dns_verification_record)
        pulumi.set(__self__, "resolved_addresses", resolved_addresses)
        pulumi.set(__self__, "soa", soa)

    @property
    @pulumi.getter(name="aRecords")
    def a_records(self) -> Sequence[str]:
        return pulumi.get(self, "a_records")

    @property
    @pulumi.getter(name="aaaaRecords")
    def aaaa_records(self) -> Sequence[str]:
        return pulumi.get(self, "aaaa_records")

    @property
    @pulumi.getter(name="cnameRecords")
    def cname_records(self) -> Sequence[str]:
        return pulumi.get(self, "cname_records")

    @property
    @pulumi.getter(name="dnsProvider")
    def dns_provider(self) -> str:
        return pulumi.get(self, "dns_provider")

    @property
    @pulumi.getter(name="dnsVerificationRecord")
    def dns_verification_record(self) -> str:
        return pulumi.get(self, "dns_verification_record")

    @property
    @pulumi.getter(name="resolvedAddresses")
    def resolved_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "resolved_addresses")

    @property
    @pulumi.getter
    def soa(self) -> str:
        return pulumi.get(self, "soa")


@pulumi.output_type
class IPArgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPArgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPArgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPArgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_type: str,
                 app: str,
                 region: str,
                 network: Optional[str] = None):
        pulumi.set(__self__, "addr_type", addr_type)
        pulumi.set(__self__, "app", app)
        pulumi.set(__self__, "region", region)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> str:
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def app(self) -> str:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")


@pulumi.output_type
class MachineArgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentStrategy":
            suggest = "deployment_strategy"
        elif key == "leaseTtl":
            suggest = "lease_ttl"
        elif key == "skipLaunch":
            suggest = "skip_launch"
        elif key == "skipServiceRegistration":
            suggest = "skip_service_registration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineArgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineArgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineArgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: str,
                 config: '_flyio.outputs.FlyMachineConfig',
                 deployment_strategy: Optional[str] = None,
                 lease_ttl: Optional[int] = None,
                 lsvd: Optional[bool] = None,
                 name: Optional[str] = None,
                 region: Optional[str] = None,
                 skip_launch: Optional[bool] = None,
                 skip_service_registration: Optional[bool] = None):
        pulumi.set(__self__, "app", app)
        pulumi.set(__self__, "config", config)
        if deployment_strategy is not None:
            pulumi.set(__self__, "deployment_strategy", deployment_strategy)
        if lease_ttl is not None:
            pulumi.set(__self__, "lease_ttl", lease_ttl)
        if lsvd is not None:
            pulumi.set(__self__, "lsvd", lsvd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if skip_launch is not None:
            pulumi.set(__self__, "skip_launch", skip_launch)
        if skip_service_registration is not None:
            pulumi.set(__self__, "skip_service_registration", skip_service_registration)

    @property
    @pulumi.getter
    def app(self) -> str:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter
    def config(self) -> '_flyio.outputs.FlyMachineConfig':
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="deploymentStrategy")
    def deployment_strategy(self) -> Optional[str]:
        return pulumi.get(self, "deployment_strategy")

    @property
    @pulumi.getter(name="leaseTtl")
    def lease_ttl(self) -> Optional[int]:
        return pulumi.get(self, "lease_ttl")

    @property
    @pulumi.getter
    def lsvd(self) -> Optional[bool]:
        return pulumi.get(self, "lsvd")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="skipLaunch")
    def skip_launch(self) -> Optional[bool]:
        return pulumi.get(self, "skip_launch")

    @property
    @pulumi.getter(name="skipServiceRegistration")
    def skip_service_registration(self) -> Optional[bool]:
        return pulumi.get(self, "skip_service_registration")


@pulumi.output_type
class VolumeArgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoBackupEnabled":
            suggest = "auto_backup_enabled"
        elif key == "computeImage":
            suggest = "compute_image"
        elif key == "requireUniqueZone":
            suggest = "require_unique_zone"
        elif key == "sizeGb":
            suggest = "size_gb"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "snapshotRetention":
            suggest = "snapshot_retention"
        elif key == "sourceVolumeId":
            suggest = "source_volume_id"
        elif key == "uniqueZoneAppWide":
            suggest = "unique_zone_app_wide"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeArgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeArgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeArgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: str,
                 auto_backup_enabled: Optional[bool] = None,
                 compute: Optional['_flyio.outputs.FlyMachineGuest'] = None,
                 compute_image: Optional[str] = None,
                 encrypted: Optional[bool] = None,
                 fstype: Optional[str] = None,
                 name: Optional[str] = None,
                 region: Optional[str] = None,
                 require_unique_zone: Optional[bool] = None,
                 size_gb: Optional[int] = None,
                 snapshot_id: Optional[str] = None,
                 snapshot_retention: Optional[int] = None,
                 source_volume_id: Optional[str] = None,
                 unique_zone_app_wide: Optional[bool] = None):
        pulumi.set(__self__, "app", app)
        if auto_backup_enabled is not None:
            pulumi.set(__self__, "auto_backup_enabled", auto_backup_enabled)
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if compute_image is not None:
            pulumi.set(__self__, "compute_image", compute_image)
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if fstype is not None:
            pulumi.set(__self__, "fstype", fstype)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if require_unique_zone is not None:
            pulumi.set(__self__, "require_unique_zone", require_unique_zone)
        if size_gb is not None:
            pulumi.set(__self__, "size_gb", size_gb)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if snapshot_retention is not None:
            pulumi.set(__self__, "snapshot_retention", snapshot_retention)
        if source_volume_id is not None:
            pulumi.set(__self__, "source_volume_id", source_volume_id)
        if unique_zone_app_wide is not None:
            pulumi.set(__self__, "unique_zone_app_wide", unique_zone_app_wide)

    @property
    @pulumi.getter
    def app(self) -> str:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="autoBackupEnabled")
    def auto_backup_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "auto_backup_enabled")

    @property
    @pulumi.getter
    def compute(self) -> Optional['_flyio.outputs.FlyMachineGuest']:
        return pulumi.get(self, "compute")

    @property
    @pulumi.getter(name="computeImage")
    def compute_image(self) -> Optional[str]:
        return pulumi.get(self, "compute_image")

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[bool]:
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def fstype(self) -> Optional[str]:
        return pulumi.get(self, "fstype")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="requireUniqueZone")
    def require_unique_zone(self) -> Optional[bool]:
        return pulumi.get(self, "require_unique_zone")

    @property
    @pulumi.getter(name="sizeGb")
    def size_gb(self) -> Optional[int]:
        return pulumi.get(self, "size_gb")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="snapshotRetention")
    def snapshot_retention(self) -> Optional[int]:
        return pulumi.get(self, "snapshot_retention")

    @property
    @pulumi.getter(name="sourceVolumeId")
    def source_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "source_volume_id")

    @property
    @pulumi.getter(name="uniqueZoneAppWide")
    def unique_zone_app_wide(self) -> Optional[bool]:
        return pulumi.get(self, "unique_zone_app_wide")


