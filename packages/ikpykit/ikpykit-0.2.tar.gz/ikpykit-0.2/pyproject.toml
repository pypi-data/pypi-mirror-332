[project]
name = "ikpykit"
dynamic = ["version"]

description = "Isolation Kernel Toolkit in Python."
readme = "README.md"
authors = [
    { name = "Xin Han", email = "xhan197@outlook.com" },
    { name = "Yixiao Ma", email = "mayx@lamda.nju.edu.cn" },
    { name = "Ye Zhu", email = "ye.zhu@ieee.org" },
    { name = "Kaiming Ting", email = "tingkm@nju.edu.cn" },
]

classifiers = [
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: BSD License",
]

keywords = [
    "data-science",
    "machine-learning",
    "data-mining",
    "anomaly detection",
    "scikit-learn",
    "cluster",
    "graph embedding",
    "isolation kernel",
]

dependencies = [
    "scikit-learn >= 1.2",
    "pandas >= 1.5",
    "numpy <= 1.22",
    "numba >= 0.54",
    "tqdm >= 4.62.3",
]

requires-python = ">=3.9"

[project.urls]
Homepage = "https://isolationkernel.github.io/ikpykit/"
Repository = "https://github.com/IsolationKernel/ikpykit"
Documentation = "https://isolationkernel.github.io/ikpykit/"
"Release Notes" = "https://isolationkernel.github.io/ikpykit/latest/releases/releases"


[project.license]
file = "LICENSE"

[build-system]
requires = ["setuptools>=61", "toml", "build", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"


[tool.setuptools_scm]
version_file = "ikpykit/_version.py"
local_scheme = "no-local-version"

[tool.setuptools.packages.find]
where = ["."] # list of folders that contain the packages (["."] by default)
include = ["ikpykit", "ikpykit*"]
exclude = [
    "ikpykit/**/tests/*",
] # exclude packages matching these glob patterns (empty by default)
namespaces = false # to disable scanning PEP 420 namespaces (true by default)

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.dependencies]
python = ">=3.9"
scikit-learn = ">=1.4.2"
numba = ">=0.54"
numpy = "<=1.22"

[tool.pixi.pypi-dependencies]
ikpykit = { path = ".", editable = true }

[tool.pixi.feature.lint.dependencies]
# The version below should be aligned with the one of `.pre-commit-config.yaml`
black = "24.8.0"
pre-commit = "3.7.1"
ruff = "0.9.9"

[tool.pixi.feature.lint.tasks]
black = { cmd = "black --check --diff ikpykit && black --check --diff examples" }
ruff = { cmd = "ruff check --output-format=full ikpykit && ruff check --output-format=full examples" }
lint = { depends-on = ["black", "ruff"] }

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"

[tool.pixi.feature.test.tasks]
test = { cmd = "pytest -vsl --cov=ikpykit --cov-report=xml ikpykit" }

[tool.pixi.feature.doc.dependencies]
mike = "2.1.3"
mkdocs = "1.6.1"
mkdocs-jupyter = "0.25.0"
mkdocs-material = "9.5.39"
mkdocstrings = "0.26.1"
mkdocstrings-python = "1.11.1"
notebook = "6.4.12"
jupyter_contrib_nbextensions = "0.7.0"
black = "24.8.0"

[tool.pixi.feature.doc.tasks]
clean-doc = { cmd = "rm -rf site" }
build-doc = { cmd = "mkdocs build" }

[tool.pixi.environments]
doc = ["doc"]
lint = ["lint"]
test = ["test"]
dev = ["doc", "lint", "test"]

[tool.black]
line-length = 88
target_version = ['py38', 'py39', 'py310']
preview = true
exclude = '''
/(
    \.eggs         # exclude a few common directories in the
  | \.git          # root of the project
  | \.vscode
)/
'''
force-exclude = "ikpykit/_version.py"

[tool.ruff]
# max line length for black
line-length = 88
target-version = "py38"
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "doc/_build",
    "doc/auto_examples",
    "build",
    "ikpykit/_version.py",
]

[tool.ruff.lint]
# all rules can be found here: https://beta.ruff.rs/docs/rules/
select = ["E", "F", "W", "I"]
ignore = [
    # space before : (needed for how black formats slicing)
    "E203",
    # do not assign a lambda expression, use a def
    "E731",
    # do not use variables named 'l', 'O', or 'I'
    "E741",
]

[tool.ruff.lint.per-file-ignores]
# It's fine not to put the import at the top of the file in the examples
# folder.
"examples/*" = ["E402"]
"doc/conf.py" = ["E402"]
"doc/_templates/numpydoc_docstring.py" = ["F821", "W292"]

[tool.pytest.ini_options]
addopts = "--doctest-modules --color=yes"
doctest_optionflags = "NORMALIZE_WHITESPACE"
