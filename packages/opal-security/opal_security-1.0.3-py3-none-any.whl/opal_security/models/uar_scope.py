# coding: utf-8

"""
    Opal API

    The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

    The version of the OpenAPI document: 1.0
    Contact: hello@opal.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from opal_security.models.group_type_enum import GroupTypeEnum
from opal_security.models.resource_type_enum import ResourceTypeEnum
from opal_security.models.tag_filter import TagFilter
from typing import Optional, Set
from typing_extensions import Self

class UARScope(BaseModel):
    """
    If set, the access review will only contain resources and groups that match at least one of the filters in scope.
    """ # noqa: E501
    group_visibility: Optional[StrictStr] = Field(default=None, description="Specifies what users can see during an Access Review")
    users: Optional[List[StrictStr]] = Field(default=None, description="The access review will only include the following users. If any users are selected, any entity filters will be applied to only the entities that the selected users have access to.")
    filter_operator: Optional[StrictStr] = Field(default=None, description="Specifies whether entities must match all (AND) or any (OR) of the filters.")
    entities: Optional[List[StrictStr]] = Field(default=None, description="This access review will include resources and groups with ids in the given strings.")
    apps: Optional[List[StrictStr]] = Field(default=None, description="This access review will include items in the specified applications")
    admins: Optional[List[StrictStr]] = Field(default=None, description="This access review will include resources and groups who are owned by one of the owners corresponding to the given IDs.")
    group_types: Optional[List[GroupTypeEnum]] = Field(default=None, description="This access review will include items of the specified group types")
    resource_types: Optional[List[ResourceTypeEnum]] = Field(default=None, description="This access review will include items of the specified resource types")
    include_group_bindings: Optional[StrictBool] = None
    tags: Optional[List[TagFilter]] = Field(default=None, description="This access review will include resources and groups who are tagged with one of the given tags.")
    names: Optional[List[StrictStr]] = Field(default=None, description="This access review will include resources and groups whose name contains one of the given strings.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["group_visibility", "users", "filter_operator", "entities", "apps", "admins", "group_types", "resource_types", "include_group_bindings", "tags", "names"]

    @field_validator('group_visibility')
    def group_visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STRICT', 'VIEW_VISIBLE_AND_ASSIGNED', 'VIEW_ALL']):
            raise ValueError("must be one of enum values ('STRICT', 'VIEW_VISIBLE_AND_ASSIGNED', 'VIEW_ALL')")
        return value

    @field_validator('filter_operator')
    def filter_operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANY', 'ALL']):
            raise ValueError("must be one of enum values ('ANY', 'ALL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UARScope from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UARScope from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "group_visibility": obj.get("group_visibility"),
            "users": obj.get("users"),
            "filter_operator": obj.get("filter_operator"),
            "entities": obj.get("entities"),
            "apps": obj.get("apps"),
            "admins": obj.get("admins"),
            "group_types": obj.get("group_types"),
            "resource_types": obj.get("resource_types"),
            "include_group_bindings": obj.get("include_group_bindings"),
            "tags": [TagFilter.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "names": obj.get("names")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


