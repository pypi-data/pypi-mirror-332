# coding: utf-8

"""
    Opal API

    The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

    The version of the OpenAPI document: 1.0
    Contact: hello@opal.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from opal_security.models.propagation_status import PropagationStatus
from opal_security.models.resource_access_level import ResourceAccessLevel
from typing import Optional, Set
from typing_extensions import Self

class ResourceAccessUser(BaseModel):
    """
    # Resource Access User Object ### Description The `ResourceAccessUser` object is used to represent a user with access to a resource, either directly or indirectly through group(s).  ### Usage Example Fetch from the `LIST ResourceUsers` endpoint.
    """ # noqa: E501
    resource_id: StrictStr = Field(description="The ID of the resource.")
    user_id: StrictStr = Field(description="The ID of the user.")
    access_level: ResourceAccessLevel
    full_name: StrictStr = Field(description="The user's full name.")
    email: StrictStr = Field(description="The user's email.")
    expiration_date: Optional[datetime] = Field(default=None, description="The day and time the user's access will expire.")
    has_direct_access: StrictBool = Field(description="The user has direct access to this resources (vs. indirectly, like through a group).")
    num_access_paths: StrictInt = Field(description="The number of ways in which the user has access through this resource (directly and indirectly).")
    propagation_status: Optional[PropagationStatus] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["resource_id", "user_id", "access_level", "full_name", "email", "expiration_date", "has_direct_access", "num_access_paths", "propagation_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceAccessUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_level
        if self.access_level:
            _dict['access_level'] = self.access_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of propagation_status
        if self.propagation_status:
            _dict['propagation_status'] = self.propagation_status.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceAccessUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resource_id": obj.get("resource_id"),
            "user_id": obj.get("user_id"),
            "access_level": ResourceAccessLevel.from_dict(obj["access_level"]) if obj.get("access_level") is not None else None,
            "full_name": obj.get("full_name"),
            "email": obj.get("email"),
            "expiration_date": obj.get("expiration_date"),
            "has_direct_access": obj.get("has_direct_access"),
            "num_access_paths": obj.get("num_access_paths"),
            "propagation_status": PropagationStatus.from_dict(obj["propagation_status"]) if obj.get("propagation_status") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


