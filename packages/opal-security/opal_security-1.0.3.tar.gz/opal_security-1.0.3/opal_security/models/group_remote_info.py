# coding: utf-8

"""
    Opal API

    The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

    The version of the OpenAPI document: 1.0
    Contact: hello@opal.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from opal_security.models.group_remote_info_active_directory_group import GroupRemoteInfoActiveDirectoryGroup
from opal_security.models.group_remote_info_azure_ad_microsoft365_group import GroupRemoteInfoAzureAdMicrosoft365Group
from opal_security.models.group_remote_info_azure_ad_security_group import GroupRemoteInfoAzureAdSecurityGroup
from opal_security.models.group_remote_info_duo_group import GroupRemoteInfoDuoGroup
from opal_security.models.group_remote_info_github_team import GroupRemoteInfoGithubTeam
from opal_security.models.group_remote_info_gitlab_group import GroupRemoteInfoGitlabGroup
from opal_security.models.group_remote_info_google_group import GroupRemoteInfoGoogleGroup
from opal_security.models.group_remote_info_ldap_group import GroupRemoteInfoLdapGroup
from opal_security.models.group_remote_info_okta_group import GroupRemoteInfoOktaGroup
from typing import Optional, Set
from typing_extensions import Self

class GroupRemoteInfo(BaseModel):
    """
    Information that defines the remote group. This replaces the deprecated remote_id and metadata fields.
    """ # noqa: E501
    active_directory_group: Optional[GroupRemoteInfoActiveDirectoryGroup] = None
    github_team: Optional[GroupRemoteInfoGithubTeam] = None
    gitlab_group: Optional[GroupRemoteInfoGitlabGroup] = None
    google_group: Optional[GroupRemoteInfoGoogleGroup] = None
    ldap_group: Optional[GroupRemoteInfoLdapGroup] = None
    okta_group: Optional[GroupRemoteInfoOktaGroup] = None
    duo_group: Optional[GroupRemoteInfoDuoGroup] = None
    azure_ad_security_group: Optional[GroupRemoteInfoAzureAdSecurityGroup] = None
    azure_ad_microsoft_365_group: Optional[GroupRemoteInfoAzureAdMicrosoft365Group] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["active_directory_group", "github_team", "gitlab_group", "google_group", "ldap_group", "okta_group", "duo_group", "azure_ad_security_group", "azure_ad_microsoft_365_group"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupRemoteInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active_directory_group
        if self.active_directory_group:
            _dict['active_directory_group'] = self.active_directory_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of github_team
        if self.github_team:
            _dict['github_team'] = self.github_team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gitlab_group
        if self.gitlab_group:
            _dict['gitlab_group'] = self.gitlab_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_group
        if self.google_group:
            _dict['google_group'] = self.google_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ldap_group
        if self.ldap_group:
            _dict['ldap_group'] = self.ldap_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of okta_group
        if self.okta_group:
            _dict['okta_group'] = self.okta_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duo_group
        if self.duo_group:
            _dict['duo_group'] = self.duo_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_ad_security_group
        if self.azure_ad_security_group:
            _dict['azure_ad_security_group'] = self.azure_ad_security_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_ad_microsoft_365_group
        if self.azure_ad_microsoft_365_group:
            _dict['azure_ad_microsoft_365_group'] = self.azure_ad_microsoft_365_group.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupRemoteInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active_directory_group": GroupRemoteInfoActiveDirectoryGroup.from_dict(obj["active_directory_group"]) if obj.get("active_directory_group") is not None else None,
            "github_team": GroupRemoteInfoGithubTeam.from_dict(obj["github_team"]) if obj.get("github_team") is not None else None,
            "gitlab_group": GroupRemoteInfoGitlabGroup.from_dict(obj["gitlab_group"]) if obj.get("gitlab_group") is not None else None,
            "google_group": GroupRemoteInfoGoogleGroup.from_dict(obj["google_group"]) if obj.get("google_group") is not None else None,
            "ldap_group": GroupRemoteInfoLdapGroup.from_dict(obj["ldap_group"]) if obj.get("ldap_group") is not None else None,
            "okta_group": GroupRemoteInfoOktaGroup.from_dict(obj["okta_group"]) if obj.get("okta_group") is not None else None,
            "duo_group": GroupRemoteInfoDuoGroup.from_dict(obj["duo_group"]) if obj.get("duo_group") is not None else None,
            "azure_ad_security_group": GroupRemoteInfoAzureAdSecurityGroup.from_dict(obj["azure_ad_security_group"]) if obj.get("azure_ad_security_group") is not None else None,
            "azure_ad_microsoft_365_group": GroupRemoteInfoAzureAdMicrosoft365Group.from_dict(obj["azure_ad_microsoft_365_group"]) if obj.get("azure_ad_microsoft_365_group") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


