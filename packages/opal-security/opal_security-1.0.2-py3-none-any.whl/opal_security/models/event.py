# coding: utf-8

"""
    Opal API

    The Opal API is a RESTful API that allows you to interact with the Opal Security platform programmatically.

    The version of the OpenAPI document: 1.0
    Contact: hello@opal.dev
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from opal_security.models.sub_event import SubEvent
from typing import Optional, Set
from typing_extensions import Self

class Event(BaseModel):
    """
    # Event Object ### Description The `Event` object is used to represent an event.  ### Usage Example Fetch from the `LIST Events` endpoint.
    """ # noqa: E501
    event_id: StrictStr = Field(description="The ID of the event.")
    actor_user_id: StrictStr = Field(description="The ID of the actor user.")
    actor_name: Optional[Any]
    actor_email: Optional[StrictStr] = Field(default=None, description="The email of the actor user.")
    event_type: StrictStr = Field(description="The event type.")
    created_at: datetime = Field(description="The day and time the event was created.")
    actor_ip_address: Optional[StrictStr] = Field(default=None, description="The IP address of the event actor.")
    api_token_name: Optional[StrictStr] = Field(default=None, description="The name of the API token used to create the event.")
    api_token_preview: Optional[StrictStr] = Field(default=None, description="The preview of the API token used to create the event.")
    sub_events: Optional[List[SubEvent]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["event_id", "actor_user_id", "actor_name", "actor_email", "event_type", "created_at", "actor_ip_address", "api_token_name", "api_token_preview", "sub_events"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sub_events (list)
        _items = []
        if self.sub_events:
            for _item_sub_events in self.sub_events:
                if _item_sub_events:
                    _items.append(_item_sub_events.to_dict())
            _dict['sub_events'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if actor_name (nullable) is None
        # and model_fields_set contains the field
        if self.actor_name is None and "actor_name" in self.model_fields_set:
            _dict['actor_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event_id": obj.get("event_id"),
            "actor_user_id": obj.get("actor_user_id"),
            "actor_name": obj.get("actor_name"),
            "actor_email": obj.get("actor_email"),
            "event_type": obj.get("event_type"),
            "created_at": obj.get("created_at"),
            "actor_ip_address": obj.get("actor_ip_address"),
            "api_token_name": obj.get("api_token_name"),
            "api_token_preview": obj.get("api_token_preview"),
            "sub_events": [SubEvent.from_dict(_item) for _item in obj["sub_events"]] if obj.get("sub_events") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


