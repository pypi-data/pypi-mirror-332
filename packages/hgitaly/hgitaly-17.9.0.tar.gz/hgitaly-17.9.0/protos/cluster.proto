syntax = "proto3";

package gitaly;
import "log.proto";

option go_package = "gitlab.com/gitlab-org/gitaly/v16/proto/go/gitalypb";

// RaftMessageType defines the types of messages that can be used within the Raft protocol.
// These types help in identifying the nature of the message being processed.
enum RaftMessageType {
  // UNSPECIFIED is used to indicate unspecified message type enum.
  UNSPECIFIED = 0; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  // NORMAL represents a standard Raft log entry proposed by the application.
  NORMAL = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  // VERIFICATION refers to a special type of no-op entries during leader
  // confirmation. Raft inserts such entries for verification.
  VERIFICATION = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  // CONFIG_CHANGE signifies a change in the configuration of the Raft cluster,
  // typically involving node additions or removals.
  CONFIG_CHANGE = 3; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
}

// RaftMessageV1 serves as a wrapper for messages exchanged in the Raft protocol,
// encapsulating essential information such as the log entry and related metadata.
message RaftMessageV1 {
  // ReferencedLogData holds a reference path to the log data stored externally,
  // which can be used to access large log entries without including them directly.
  message ReferencedLogData {
    // path represents the external storage location of the log data.
    bytes path = 1;
  }
  // PackedLogData contains serialized log data including log entry itself and
  // all attached files in the log entry directory. Those data are exchanged at
  // the Transport layer before sending after after receiving messages. Hence,
  // they are transparent to the core Raft engine.
  message PackedLogData {
    // data is serialized form of the log entry data. Transport implementations
    // can choose to populate this data or read the data directly on disk. The
    // latter approach is recommended.
    bytes data = 1;
  }

  // id is unique identifier for the Raft message. This ID is generated by an
  // in-memory revent registry. Raft uses this ID to notify the committment
  // status of a log entry.
  uint64 id = 1;

  // cluster_id is the identifier of the Raft cluster to which this message belongs.
  string cluster_id = 2;

  // authority_name is the storage name of storage that creates a partition.
  string authority_name = 3;

  // partition_id is the local incremental ID of the specific partition within a
  // storage. (authority_name, partition_id) can be used as a unique identifier
  // of a partition across the cluster.
  uint64 partition_id = 4;

  // log_entry is the actual log entry being processed or transmitted.
  LogEntry log_entry = 5;

  // log_data holds files inside log entry dir in one of two possible forms:
  // referenced or packed.
  oneof log_data {
    // referenced represents reference to on-disk log data.
    ReferencedLogData referenced = 6;

    // packed represents packed and serialized log data.
    PackedLogData packed = 7;
  }
}

// RaftHardStateV1 is a wrapper for raftpb.HardState. The upstream uses proto2
// syntax while Gitaly uses proto3. In addition, the protobuf package in
// upstream is outdated. The generated structs are not compatible with Gitaly's
// protobuf utilities.
// Source:
// https://github.com/etcd-io/raft/blob/12f0e5dc1b5bfff9bc6886ef1be4cba19495d6f2/raftpb/raft.proto#L110-114
message RaftHardStateV1 {
  // term represents the current term of the raft group.
  uint64 term   = 1;
  // vote represents the vote of the raft group.
  uint64 vote   = 2;
  // commit represents the latest commit index of the raft group.
  uint64 commit = 3;
}

// RaftConfStateV1 is a wrapper for raftpb.ConfState. For more information,
// please refer to RaftHardStateV1. Source:
// https://github.com/etcd-io/raft/blob/12f0e5dc1b5bfff9bc6886ef1be4cba19495d6f2/raftpb/raft.proto#L136
message RaftConfStateV1 {
  // voters in the incoming config. (If the configuration is not joint,
  // then the outgoing config is empty).
  repeated uint64 voters = 1;
  // learners in the incoming config.
  repeated uint64 learners = 2;
  // voters_outgoing in the outgoing config.
  repeated uint64 voters_outgoing = 3; // protolint:disable:this REPEATED_FIELD_NAMES_PLURALIZED
  // learners_next is the nodes that will become learners when the outgoing
  // config is removed. These nodes are necessarily currently in nodes_joint (or
  // they would have been added to the incoming config right away).
  repeated uint64 learners_next = 4; // protolint:disable:this REPEATED_FIELD_NAMES_PLURALIZED
  // auto_leave is set when the config is joint and Raft will automatically
  // transition into the final config (i.e. remove the outgoing config) when
  // this is safe.
  bool auto_leave = 5;
}
