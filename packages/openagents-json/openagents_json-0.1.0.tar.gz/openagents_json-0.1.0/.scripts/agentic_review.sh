#!/bin/bash
# agentic_review.sh - Automated end-of-cycle review for AI agent-assisted development

# Exit on error
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
AUTO_MODE=false
ISSUE_NUMBER=""

# Process command line arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --issue)
        ISSUE_NUMBER="$2"
        shift 2
        ;;
        --auto)
        AUTO_MODE=true
        shift
        ;;
        --help)
        echo "Usage: ./agentic_review.sh [OPTIONS]"
        echo "Options:"
        echo "  --issue NUMBER     GitHub issue number to update"
        echo "  --auto             Run in non-interactive mode (for agentic runs)"
        echo "  --help             Show this help message"
        exit 0
        ;;
        *)
        echo "Unknown option: $key"
        echo "Use --help for usage information"
        exit 1
        ;;
    esac
done

# Load environment variables
if [ -f "$SCRIPT_DIR/.env.scripts" ]; then
    echo "Loading environment variables..."
    set -a
    source "$SCRIPT_DIR/.env.scripts"
    set +a
else
    echo "Warning: .env.scripts file not found."
    echo "Please create it from .env.scripts.example and set your GitHub token."
    exit 1
fi

# Function to generate repository structure documentation
generate_repo_structure() {
    echo "Generating repository structure documentation..."
    
    OUTPUT_DIR="$PROJECT_ROOT/project_docs/repo_structure"
    mkdir -p "$OUTPUT_DIR"
    
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    OUTPUT_FILE="$OUTPUT_DIR/repo_structure_$TIMESTAMP.md"
    
    echo "# Repository Structure ($TIMESTAMP)" > "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    echo "Generated on: $(date)" >> "$OUTPUT_FILE"
    echo "Generated by: Agentic Review Process" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    echo "## Directory Tree" >> "$OUTPUT_FILE"
    echo "```" >> "$OUTPUT_FILE"
    
    # Generate and append repository tree
    find "$PROJECT_ROOT" -type f \
        -not -path "*/\.*" \
        -not -path "*/node_modules/*" \
        -not -path "*/__pycache__/*" \
        -not -path "*/.venv/*" \
        | sort | sed -e "s|$PROJECT_ROOT/||" >> "$OUTPUT_FILE"
    
    echo "```" >> "$OUTPUT_FILE"
    echo "Repository structure at: $OUTPUT_FILE"
    echo "$OUTPUT_FILE"  # Return the file path
}

# Function to update GitHub issue
update_github_issue() {
    local issue_number=$1
    
    if [ -z "$issue_number" ]; then
        if [ "$AUTO_MODE" = true ]; then
            echo "Error: Issue number required in auto mode"
            exit 1
        else
            read -p "Enter GitHub issue number: " issue_number
        fi
    fi
    
    echo "Updating GitHub issue #$issue_number..."
    "$SCRIPT_DIR/gh_issue_management/update_issue.sh" --issue "$issue_number" --update-tasks
    echo "GitHub issue #$issue_number updated successfully."
}

# Main script execution
echo "=== Starting Agentic Review Process ==="

# 1. Generate repository structure documentation
REPO_STRUCTURE_FILE=$(generate_repo_structure)

# 2. Update GitHub issue if specified
if [ -n "$ISSUE_NUMBER" ] || [ "$AUTO_MODE" = false ]; then
    update_github_issue "$ISSUE_NUMBER"
fi

# 3. Summary
echo "=== Agentic Review Complete ==="
echo "Repository structure: $REPO_STRUCTURE_FILE"
if [ -n "$ISSUE_NUMBER" ]; then
    echo "GitHub issue #$ISSUE_NUMBER updated"
fi

exit 0

# Main script execution
echo "=== Starting Agentic Review Process ==="

# Generate repository structure documentation
REPO_STRUCTURE_FILE=$(generate_repo_structure)

# Update GitHub issue if specified
if [ -n "$ISSUE_NUMBER" ] || [ "$AUTO_MODE" = false ]; then
    update_github_issue "$ISSUE_NUMBER"
fi

echo "=== Agentic Review Complete ==="
exit 0
