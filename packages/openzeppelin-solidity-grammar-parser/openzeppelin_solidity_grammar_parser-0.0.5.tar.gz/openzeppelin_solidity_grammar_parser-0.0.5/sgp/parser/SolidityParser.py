# Generated from Solidity.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,133,1174,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,5,0,214,8,0,10,0,12,0,217,9,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,2,1,2,1,3,1,3,1,3,3,3,231,8,3,1,4,1,4,3,4,235,8,4,1,4,5,4,
        238,8,4,10,4,12,4,241,9,4,1,5,1,5,1,6,3,6,246,8,6,1,6,1,6,3,6,250,
        8,6,1,6,3,6,253,8,6,1,7,1,7,1,7,3,7,258,8,7,1,8,1,8,1,8,1,8,3,8,
        264,8,8,1,8,1,8,1,8,1,8,1,8,3,8,271,8,8,1,8,1,8,3,8,275,8,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,286,8,8,10,8,12,8,289,9,8,1,
        8,1,8,1,8,1,8,1,8,3,8,296,8,8,1,9,1,9,1,10,3,10,301,8,10,1,10,1,
        10,1,10,1,10,1,10,1,10,5,10,309,8,10,10,10,12,10,312,9,10,3,10,314,
        8,10,1,10,1,10,5,10,318,8,10,10,10,12,10,321,9,10,1,10,1,10,1,11,
        1,11,1,11,3,11,328,8,11,1,11,3,11,331,8,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,3,12,342,8,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,5,13,351,8,13,10,13,12,13,354,9,13,1,13,1,13,1,13,3,13,359,
        8,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        3,17,386,8,17,1,17,3,17,389,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,5,18,398,8,18,10,18,12,18,401,9,18,1,18,1,18,3,18,405,8,18,1,
        19,1,19,1,19,3,19,410,8,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,5,21,422,8,21,10,21,12,21,425,9,21,3,21,427,8,21,1,
        21,1,21,1,22,1,22,1,22,3,22,434,8,22,1,22,1,22,5,22,438,8,22,10,
        22,12,22,441,9,22,1,22,1,22,3,22,445,8,22,1,23,1,23,1,23,3,23,450,
        8,23,1,23,3,23,453,8,23,1,24,1,24,1,24,1,24,3,24,459,8,24,1,24,1,
        24,3,24,463,8,24,1,25,1,25,3,25,467,8,25,1,25,1,25,1,25,3,25,472,
        8,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,
        485,8,27,10,27,12,27,488,9,27,1,28,1,28,1,28,1,28,3,28,494,8,28,
        1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,3,30,504,8,30,1,30,1,30,
        5,30,508,8,30,10,30,12,30,511,9,30,1,30,1,30,1,31,1,31,1,31,1,31,
        5,31,519,8,31,10,31,12,31,522,9,31,3,31,524,8,31,1,31,1,31,1,32,
        1,32,3,32,530,8,32,1,32,3,32,533,8,32,1,32,3,32,536,8,32,1,33,1,
        33,1,33,1,33,5,33,542,8,33,10,33,12,33,545,9,33,3,33,547,8,33,1,
        33,1,33,1,34,1,34,3,34,553,8,34,1,34,3,34,556,8,34,1,35,1,35,1,35,
        1,35,5,35,562,8,35,10,35,12,35,565,9,35,3,35,567,8,35,1,35,1,35,
        1,36,1,36,3,36,573,8,36,1,37,1,37,3,37,577,8,37,1,37,1,37,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,589,8,38,1,38,1,38,1,38,3,
        38,594,8,38,1,38,5,38,597,8,38,10,38,12,38,600,9,38,1,39,1,39,1,
        39,5,39,605,8,39,10,39,12,39,608,9,39,1,40,1,40,3,40,612,8,40,1,
        41,1,41,1,41,1,41,3,41,618,8,41,1,41,1,41,1,41,3,41,623,8,41,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,44,5,44,636,8,44,
        10,44,12,44,639,9,44,1,44,1,44,3,44,643,8,44,1,45,1,45,1,46,1,46,
        1,47,1,47,5,47,651,8,47,10,47,12,47,654,9,47,1,47,1,47,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        3,48,673,8,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        3,50,685,8,50,1,51,1,51,1,51,3,51,690,8,51,1,51,1,51,4,51,694,8,
        51,11,51,12,51,695,1,52,1,52,3,52,700,8,52,1,52,3,52,703,8,52,1,
        52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,3,54,715,8,54,1,
        55,1,55,1,55,1,56,1,56,1,56,1,56,3,56,724,8,56,1,56,1,56,3,56,728,
        8,56,1,56,3,56,731,8,56,1,56,1,56,1,56,1,57,1,57,3,57,738,8,57,1,
        57,1,57,1,57,1,57,3,57,744,8,57,1,57,1,57,1,58,1,58,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,
        62,3,62,766,8,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,
        65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,788,8,
        66,1,66,1,66,3,66,792,8,66,1,66,1,66,1,67,3,67,797,8,67,1,67,1,67,
        3,67,801,8,67,5,67,803,8,67,10,67,12,67,806,9,67,1,68,1,68,3,68,
        810,8,68,1,68,5,68,813,8,68,10,68,12,68,816,9,68,1,68,3,68,819,8,
        68,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,843,8,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,
        70,897,8,70,1,70,1,70,3,70,901,8,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,5,70,917,8,70,10,70,12,70,
        920,9,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,931,8,
        71,1,72,1,72,1,72,5,72,936,8,72,10,72,12,72,939,9,72,1,73,1,73,1,
        73,5,73,944,8,73,10,73,12,73,947,9,73,1,73,3,73,950,8,73,1,74,1,
        74,1,74,1,74,1,75,1,75,3,75,958,8,75,1,75,1,75,3,75,962,8,75,3,75,
        964,8,75,1,76,1,76,1,76,1,76,1,76,1,77,1,77,5,77,973,8,77,10,77,
        12,77,976,9,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,997,8,78,1,79,
        1,79,1,79,3,79,1002,8,79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,
        3,81,1012,8,81,1,81,1,81,3,81,1016,8,81,1,81,1,81,5,81,1020,8,81,
        10,81,12,81,1023,9,81,1,81,3,81,1026,8,81,1,82,1,82,1,82,1,82,3,
        82,1032,8,82,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,
        84,3,84,1045,8,84,1,85,1,85,1,85,5,85,1050,8,85,10,85,12,85,1053,
        9,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,88,1,88,1,88,5,88,1065,
        8,88,10,88,12,88,1068,9,88,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1076,
        8,89,1,90,1,90,1,90,1,90,3,90,1082,8,90,1,90,1,90,3,90,1086,8,90,
        1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,92,3,92,1096,8,92,1,92,1,92,
        1,92,3,92,1101,8,92,1,92,1,92,1,93,1,93,1,93,1,93,1,94,1,94,1,94,
        1,94,1,94,3,94,1114,8,94,1,95,1,95,3,95,1118,8,95,1,95,1,95,3,95,
        1122,8,95,5,95,1124,8,95,10,95,12,95,1127,9,95,1,95,1,95,1,95,1,
        95,1,95,5,95,1134,8,95,10,95,12,95,1137,9,95,3,95,1139,8,95,1,95,
        3,95,1142,8,95,1,96,1,96,3,96,1146,8,96,1,97,1,97,1,98,4,98,1151,
        8,98,11,98,12,98,1152,1,99,1,99,1,99,1,99,1,99,5,99,1160,8,99,10,
        99,12,99,1163,9,99,1,99,1,99,3,99,1167,8,99,1,100,4,100,1170,8,100,
        11,100,12,100,1171,1,100,0,2,76,140,101,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
        170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
        0,15,1,0,5,11,1,0,19,21,3,0,3,3,5,10,28,35,1,0,48,50,4,0,110,110,
        117,117,121,121,123,123,3,0,44,44,63,66,97,101,1,0,67,68,1,0,30,
        31,2,0,3,3,32,33,1,0,74,75,1,0,7,10,1,0,34,35,2,0,11,11,78,87,1,
        0,103,104,10,0,14,14,25,25,44,44,50,50,62,62,95,95,113,113,117,117,
        124,125,127,128,1305,0,215,1,0,0,0,2,220,1,0,0,0,4,225,1,0,0,0,6,
        230,1,0,0,0,8,232,1,0,0,0,10,242,1,0,0,0,12,252,1,0,0,0,14,254,1,
        0,0,0,16,295,1,0,0,0,18,297,1,0,0,0,20,300,1,0,0,0,22,324,1,0,0,
        0,24,341,1,0,0,0,26,343,1,0,0,0,28,362,1,0,0,0,30,369,1,0,0,0,32,
        374,1,0,0,0,34,380,1,0,0,0,36,404,1,0,0,0,38,406,1,0,0,0,40,411,
        1,0,0,0,42,413,1,0,0,0,44,430,1,0,0,0,46,446,1,0,0,0,48,454,1,0,
        0,0,50,471,1,0,0,0,52,473,1,0,0,0,54,486,1,0,0,0,56,489,1,0,0,0,
        58,497,1,0,0,0,60,499,1,0,0,0,62,514,1,0,0,0,64,527,1,0,0,0,66,537,
        1,0,0,0,68,550,1,0,0,0,70,557,1,0,0,0,72,570,1,0,0,0,74,574,1,0,
        0,0,76,588,1,0,0,0,78,601,1,0,0,0,80,611,1,0,0,0,82,613,1,0,0,0,
        84,626,1,0,0,0,86,628,1,0,0,0,88,630,1,0,0,0,90,644,1,0,0,0,92,646,
        1,0,0,0,94,648,1,0,0,0,96,672,1,0,0,0,98,674,1,0,0,0,100,677,1,0,
        0,0,102,686,1,0,0,0,104,697,1,0,0,0,106,706,1,0,0,0,108,714,1,0,
        0,0,110,716,1,0,0,0,112,719,1,0,0,0,114,735,1,0,0,0,116,747,1,0,
        0,0,118,749,1,0,0,0,120,757,1,0,0,0,122,760,1,0,0,0,124,763,1,0,
        0,0,126,769,1,0,0,0,128,772,1,0,0,0,130,776,1,0,0,0,132,787,1,0,
        0,0,134,796,1,0,0,0,136,807,1,0,0,0,138,822,1,0,0,0,140,842,1,0,
        0,0,142,930,1,0,0,0,144,932,1,0,0,0,146,940,1,0,0,0,148,951,1,0,
        0,0,150,963,1,0,0,0,152,965,1,0,0,0,154,970,1,0,0,0,156,996,1,0,
        0,0,158,1001,1,0,0,0,160,1003,1,0,0,0,162,1011,1,0,0,0,164,1027,
        1,0,0,0,166,1033,1,0,0,0,168,1044,1,0,0,0,170,1046,1,0,0,0,172,1054,
        1,0,0,0,174,1058,1,0,0,0,176,1061,1,0,0,0,178,1075,1,0,0,0,180,1077,
        1,0,0,0,182,1089,1,0,0,0,184,1092,1,0,0,0,186,1104,1,0,0,0,188,1113,
        1,0,0,0,190,1141,1,0,0,0,192,1143,1,0,0,0,194,1147,1,0,0,0,196,1150,
        1,0,0,0,198,1154,1,0,0,0,200,1169,1,0,0,0,202,214,3,2,1,0,203,214,
        3,16,8,0,204,214,3,20,10,0,205,214,3,60,30,0,206,214,3,56,28,0,207,
        214,3,42,21,0,208,214,3,48,24,0,209,214,3,28,14,0,210,214,3,30,15,
        0,211,214,3,32,16,0,212,214,3,34,17,0,213,202,1,0,0,0,213,203,1,
        0,0,0,213,204,1,0,0,0,213,205,1,0,0,0,213,206,1,0,0,0,213,207,1,
        0,0,0,213,208,1,0,0,0,213,209,1,0,0,0,213,210,1,0,0,0,213,211,1,
        0,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,
        0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,219,5,0,0,1,219,1,1,0,
        0,0,220,221,5,1,0,0,221,222,3,4,2,0,222,223,3,6,3,0,223,224,5,2,
        0,0,224,3,1,0,0,0,225,226,3,194,97,0,226,5,1,0,0,0,227,231,5,3,0,
        0,228,231,3,8,4,0,229,231,3,140,70,0,230,227,1,0,0,0,230,228,1,0,
        0,0,230,229,1,0,0,0,231,7,1,0,0,0,232,239,3,12,6,0,233,235,5,4,0,
        0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,238,3,12,6,
        0,237,234,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,
        0,240,9,1,0,0,0,241,239,1,0,0,0,242,243,7,0,0,0,243,11,1,0,0,0,244,
        246,3,10,5,0,245,244,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,
        253,5,130,0,0,248,250,3,10,5,0,249,248,1,0,0,0,249,250,1,0,0,0,250,
        251,1,0,0,0,251,253,5,103,0,0,252,245,1,0,0,0,252,249,1,0,0,0,253,
        13,1,0,0,0,254,257,3,194,97,0,255,256,5,12,0,0,256,258,3,194,97,
        0,257,255,1,0,0,0,257,258,1,0,0,0,258,15,1,0,0,0,259,260,5,13,0,
        0,260,263,3,18,9,0,261,262,5,12,0,0,262,264,3,194,97,0,263,261,1,
        0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,266,5,2,0,0,266,296,1,
        0,0,0,267,270,5,13,0,0,268,271,5,3,0,0,269,271,3,194,97,0,270,268,
        1,0,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,273,5,12,0,0,273,275,
        3,194,97,0,274,272,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,277,
        5,14,0,0,277,278,3,18,9,0,278,279,5,2,0,0,279,296,1,0,0,0,280,281,
        5,13,0,0,281,282,5,15,0,0,282,287,3,14,7,0,283,284,5,16,0,0,284,
        286,3,14,7,0,285,283,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,
        288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,5,17,0,0,291,
        292,5,14,0,0,292,293,3,18,9,0,293,294,5,2,0,0,294,296,1,0,0,0,295,
        259,1,0,0,0,295,267,1,0,0,0,295,280,1,0,0,0,296,17,1,0,0,0,297,298,
        5,129,0,0,298,19,1,0,0,0,299,301,5,18,0,0,300,299,1,0,0,0,300,301,
        1,0,0,0,301,302,1,0,0,0,302,303,7,1,0,0,303,313,3,194,97,0,304,305,
        5,22,0,0,305,310,3,22,11,0,306,307,5,16,0,0,307,309,3,22,11,0,308,
        306,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,
        314,1,0,0,0,312,310,1,0,0,0,313,304,1,0,0,0,313,314,1,0,0,0,314,
        315,1,0,0,0,315,319,5,15,0,0,316,318,3,24,12,0,317,316,1,0,0,0,318,
        321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,
        319,1,0,0,0,322,323,5,17,0,0,323,21,1,0,0,0,324,330,3,78,39,0,325,
        327,5,23,0,0,326,328,3,144,72,0,327,326,1,0,0,0,327,328,1,0,0,0,
        328,329,1,0,0,0,329,331,5,24,0,0,330,325,1,0,0,0,330,331,1,0,0,0,
        331,23,1,0,0,0,332,342,3,26,13,0,333,342,3,34,17,0,334,342,3,42,
        21,0,335,342,3,44,22,0,336,342,3,48,24,0,337,342,3,56,28,0,338,342,
        3,60,30,0,339,342,3,30,15,0,340,342,3,32,16,0,341,332,1,0,0,0,341,
        333,1,0,0,0,341,334,1,0,0,0,341,335,1,0,0,0,341,336,1,0,0,0,341,
        337,1,0,0,0,341,338,1,0,0,0,341,339,1,0,0,0,341,340,1,0,0,0,342,
        25,1,0,0,0,343,352,3,76,38,0,344,351,5,119,0,0,345,351,5,116,0,0,
        346,351,5,118,0,0,347,351,5,110,0,0,348,351,5,111,0,0,349,351,3,
        198,99,0,350,344,1,0,0,0,350,345,1,0,0,0,350,346,1,0,0,0,350,347,
        1,0,0,0,350,348,1,0,0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,
        1,0,0,0,352,353,1,0,0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,358,
        3,194,97,0,356,357,5,11,0,0,357,359,3,140,70,0,358,356,1,0,0,0,358,
        359,1,0,0,0,359,360,1,0,0,0,360,361,5,2,0,0,361,27,1,0,0,0,362,363,
        3,76,38,0,363,364,5,110,0,0,364,365,3,194,97,0,365,366,5,11,0,0,
        366,367,3,140,70,0,367,368,5,2,0,0,368,29,1,0,0,0,369,370,5,25,0,
        0,370,371,3,194,97,0,371,372,3,62,31,0,372,373,5,2,0,0,373,31,1,
        0,0,0,374,375,5,122,0,0,375,376,3,194,97,0,376,377,5,22,0,0,377,
        378,3,138,69,0,378,379,5,2,0,0,379,33,1,0,0,0,380,381,5,26,0,0,381,
        382,3,36,18,0,382,385,5,27,0,0,383,386,5,3,0,0,384,386,3,76,38,0,
        385,383,1,0,0,0,385,384,1,0,0,0,386,388,1,0,0,0,387,389,5,124,0,
        0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,5,2,0,
        0,391,35,1,0,0,0,392,405,3,78,39,0,393,394,5,15,0,0,394,399,3,38,
        19,0,395,396,5,16,0,0,396,398,3,38,19,0,397,395,1,0,0,0,398,401,
        1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,399,
        1,0,0,0,402,403,5,17,0,0,403,405,1,0,0,0,404,392,1,0,0,0,404,393,
        1,0,0,0,405,37,1,0,0,0,406,409,3,78,39,0,407,408,5,12,0,0,408,410,
        3,40,20,0,409,407,1,0,0,0,409,410,1,0,0,0,410,39,1,0,0,0,411,412,
        7,2,0,0,412,41,1,0,0,0,413,414,5,36,0,0,414,415,3,194,97,0,415,426,
        5,15,0,0,416,417,3,74,37,0,417,423,5,2,0,0,418,419,3,74,37,0,419,
        420,5,2,0,0,420,422,1,0,0,0,421,418,1,0,0,0,422,425,1,0,0,0,423,
        421,1,0,0,0,423,424,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,426,
        416,1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,429,5,17,0,0,429,
        43,1,0,0,0,430,431,5,37,0,0,431,433,3,194,97,0,432,434,3,62,31,0,
        433,432,1,0,0,0,433,434,1,0,0,0,434,439,1,0,0,0,435,438,5,120,0,
        0,436,438,3,198,99,0,437,435,1,0,0,0,437,436,1,0,0,0,438,441,1,0,
        0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,444,1,0,0,0,441,439,1,0,
        0,0,442,445,5,2,0,0,443,445,3,94,47,0,444,442,1,0,0,0,444,443,1,
        0,0,0,445,45,1,0,0,0,446,452,3,194,97,0,447,449,5,23,0,0,448,450,
        3,144,72,0,449,448,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,453,
        5,24,0,0,452,447,1,0,0,0,452,453,1,0,0,0,453,47,1,0,0,0,454,455,
        3,50,25,0,455,456,3,62,31,0,456,458,3,54,27,0,457,459,3,52,26,0,
        458,457,1,0,0,0,458,459,1,0,0,0,459,462,1,0,0,0,460,463,5,2,0,0,
        461,463,3,94,47,0,462,460,1,0,0,0,462,461,1,0,0,0,463,49,1,0,0,0,
        464,466,5,38,0,0,465,467,3,194,97,0,466,465,1,0,0,0,466,467,1,0,
        0,0,467,472,1,0,0,0,468,472,5,125,0,0,469,472,5,126,0,0,470,472,
        5,127,0,0,471,464,1,0,0,0,471,468,1,0,0,0,471,469,1,0,0,0,471,470,
        1,0,0,0,472,51,1,0,0,0,473,474,5,39,0,0,474,475,3,62,31,0,475,53,
        1,0,0,0,476,485,5,114,0,0,477,485,5,119,0,0,478,485,5,116,0,0,479,
        485,5,118,0,0,480,485,5,120,0,0,481,485,3,92,46,0,482,485,3,46,23,
        0,483,485,3,198,99,0,484,476,1,0,0,0,484,477,1,0,0,0,484,478,1,0,
        0,0,484,479,1,0,0,0,484,480,1,0,0,0,484,481,1,0,0,0,484,482,1,0,
        0,0,484,483,1,0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,
        0,0,487,55,1,0,0,0,488,486,1,0,0,0,489,490,5,40,0,0,490,491,3,194,
        97,0,491,493,3,66,33,0,492,494,5,108,0,0,493,492,1,0,0,0,493,494,
        1,0,0,0,494,495,1,0,0,0,495,496,5,2,0,0,496,57,1,0,0,0,497,498,3,
        194,97,0,498,59,1,0,0,0,499,500,5,41,0,0,500,501,3,194,97,0,501,
        503,5,15,0,0,502,504,3,58,29,0,503,502,1,0,0,0,503,504,1,0,0,0,504,
        509,1,0,0,0,505,506,5,16,0,0,506,508,3,58,29,0,507,505,1,0,0,0,508,
        511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,512,1,0,0,0,511,
        509,1,0,0,0,512,513,5,17,0,0,513,61,1,0,0,0,514,523,5,23,0,0,515,
        520,3,64,32,0,516,517,5,16,0,0,517,519,3,64,32,0,518,516,1,0,0,0,
        519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,524,1,0,0,0,
        522,520,1,0,0,0,523,515,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,
        525,526,5,24,0,0,526,63,1,0,0,0,527,529,3,76,38,0,528,530,3,92,46,
        0,529,528,1,0,0,0,529,530,1,0,0,0,530,532,1,0,0,0,531,533,3,90,45,
        0,532,531,1,0,0,0,532,533,1,0,0,0,533,535,1,0,0,0,534,536,3,194,
        97,0,535,534,1,0,0,0,535,536,1,0,0,0,536,65,1,0,0,0,537,546,5,23,
        0,0,538,543,3,68,34,0,539,540,5,16,0,0,540,542,3,68,34,0,541,539,
        1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,547,
        1,0,0,0,545,543,1,0,0,0,546,538,1,0,0,0,546,547,1,0,0,0,547,548,
        1,0,0,0,548,549,5,24,0,0,549,67,1,0,0,0,550,552,3,76,38,0,551,553,
        5,115,0,0,552,551,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,556,
        3,194,97,0,555,554,1,0,0,0,555,556,1,0,0,0,556,69,1,0,0,0,557,566,
        5,23,0,0,558,563,3,72,36,0,559,560,5,16,0,0,560,562,3,72,36,0,561,
        559,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,
        567,1,0,0,0,565,563,1,0,0,0,566,558,1,0,0,0,566,567,1,0,0,0,567,
        568,1,0,0,0,568,569,5,24,0,0,569,71,1,0,0,0,570,572,3,76,38,0,571,
        573,3,90,45,0,572,571,1,0,0,0,572,573,1,0,0,0,573,73,1,0,0,0,574,
        576,3,76,38,0,575,577,3,90,45,0,576,575,1,0,0,0,576,577,1,0,0,0,
        577,578,1,0,0,0,578,579,3,194,97,0,579,75,1,0,0,0,580,581,6,38,-1,
        0,581,589,3,138,69,0,582,589,3,138,69,0,583,589,3,78,39,0,584,589,
        3,82,41,0,585,589,3,88,44,0,586,587,5,44,0,0,587,589,5,117,0,0,588,
        580,1,0,0,0,588,582,1,0,0,0,588,583,1,0,0,0,588,584,1,0,0,0,588,
        585,1,0,0,0,588,586,1,0,0,0,589,598,1,0,0,0,590,591,10,3,0,0,591,
        593,5,42,0,0,592,594,3,140,70,0,593,592,1,0,0,0,593,594,1,0,0,0,
        594,595,1,0,0,0,595,597,5,43,0,0,596,590,1,0,0,0,597,600,1,0,0,0,
        598,596,1,0,0,0,598,599,1,0,0,0,599,77,1,0,0,0,600,598,1,0,0,0,601,
        606,3,194,97,0,602,603,5,45,0,0,603,605,3,194,97,0,604,602,1,0,0,
        0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,79,1,0,0,0,
        608,606,1,0,0,0,609,612,3,138,69,0,610,612,3,78,39,0,611,609,1,0,
        0,0,611,610,1,0,0,0,612,81,1,0,0,0,613,614,5,46,0,0,614,615,5,23,
        0,0,615,617,3,80,40,0,616,618,3,84,42,0,617,616,1,0,0,0,617,618,
        1,0,0,0,618,619,1,0,0,0,619,620,5,47,0,0,620,622,3,76,38,0,621,623,
        3,86,43,0,622,621,1,0,0,0,622,623,1,0,0,0,623,624,1,0,0,0,624,625,
        5,24,0,0,625,83,1,0,0,0,626,627,3,194,97,0,627,85,1,0,0,0,628,629,
        3,194,97,0,629,87,1,0,0,0,630,631,5,38,0,0,631,637,3,70,35,0,632,
        636,5,116,0,0,633,636,5,114,0,0,634,636,3,92,46,0,635,632,1,0,0,
        0,635,633,1,0,0,0,635,634,1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,
        0,637,638,1,0,0,0,638,642,1,0,0,0,639,637,1,0,0,0,640,641,5,39,0,
        0,641,643,3,70,35,0,642,640,1,0,0,0,642,643,1,0,0,0,643,89,1,0,0,
        0,644,645,7,3,0,0,645,91,1,0,0,0,646,647,7,4,0,0,647,93,1,0,0,0,
        648,652,5,15,0,0,649,651,3,96,48,0,650,649,1,0,0,0,651,654,1,0,0,
        0,652,650,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,652,1,0,0,
        0,655,656,5,17,0,0,656,95,1,0,0,0,657,673,3,100,50,0,658,673,3,102,
        51,0,659,673,3,106,53,0,660,673,3,112,56,0,661,673,3,94,47,0,662,
        673,3,114,57,0,663,673,3,118,59,0,664,673,3,120,60,0,665,673,3,122,
        61,0,666,673,3,124,62,0,667,673,3,126,63,0,668,673,3,128,64,0,669,
        673,3,108,54,0,670,673,3,110,55,0,671,673,3,130,65,0,672,657,1,0,
        0,0,672,658,1,0,0,0,672,659,1,0,0,0,672,660,1,0,0,0,672,661,1,0,
        0,0,672,662,1,0,0,0,672,663,1,0,0,0,672,664,1,0,0,0,672,665,1,0,
        0,0,672,666,1,0,0,0,672,667,1,0,0,0,672,668,1,0,0,0,672,669,1,0,
        0,0,672,670,1,0,0,0,672,671,1,0,0,0,673,97,1,0,0,0,674,675,3,140,
        70,0,675,676,5,2,0,0,676,99,1,0,0,0,677,678,5,51,0,0,678,679,5,23,
        0,0,679,680,3,140,70,0,680,681,5,24,0,0,681,684,3,96,48,0,682,683,
        5,52,0,0,683,685,3,96,48,0,684,682,1,0,0,0,684,685,1,0,0,0,685,101,
        1,0,0,0,686,687,5,53,0,0,687,689,3,140,70,0,688,690,3,52,26,0,689,
        688,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,693,3,94,47,0,692,
        694,3,104,52,0,693,692,1,0,0,0,694,695,1,0,0,0,695,693,1,0,0,0,695,
        696,1,0,0,0,696,103,1,0,0,0,697,702,5,54,0,0,698,700,3,194,97,0,
        699,698,1,0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,703,3,62,31,
        0,702,699,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,705,3,94,47,
        0,705,105,1,0,0,0,706,707,5,55,0,0,707,708,5,23,0,0,708,709,3,140,
        70,0,709,710,5,24,0,0,710,711,3,96,48,0,711,107,1,0,0,0,712,715,
        3,132,66,0,713,715,3,98,49,0,714,712,1,0,0,0,714,713,1,0,0,0,715,
        109,1,0,0,0,716,717,5,56,0,0,717,718,3,94,47,0,718,111,1,0,0,0,719,
        720,5,27,0,0,720,723,5,23,0,0,721,724,3,108,54,0,722,724,5,2,0,0,
        723,721,1,0,0,0,723,722,1,0,0,0,724,727,1,0,0,0,725,728,3,98,49,
        0,726,728,5,2,0,0,727,725,1,0,0,0,727,726,1,0,0,0,728,730,1,0,0,
        0,729,731,3,140,70,0,730,729,1,0,0,0,730,731,1,0,0,0,731,732,1,0,
        0,0,732,733,5,24,0,0,733,734,3,96,48,0,734,113,1,0,0,0,735,737,5,
        57,0,0,736,738,5,129,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,743,
        1,0,0,0,739,740,5,23,0,0,740,741,3,116,58,0,741,742,5,24,0,0,742,
        744,1,0,0,0,743,739,1,0,0,0,743,744,1,0,0,0,744,745,1,0,0,0,745,
        746,3,154,77,0,746,115,1,0,0,0,747,748,3,200,100,0,748,117,1,0,0,
        0,749,750,5,58,0,0,750,751,3,96,48,0,751,752,5,55,0,0,752,753,5,
        23,0,0,753,754,3,140,70,0,754,755,5,24,0,0,755,756,5,2,0,0,756,119,
        1,0,0,0,757,758,5,112,0,0,758,759,5,2,0,0,759,121,1,0,0,0,760,761,
        5,109,0,0,761,762,5,2,0,0,762,123,1,0,0,0,763,765,5,59,0,0,764,766,
        3,140,70,0,765,764,1,0,0,0,765,766,1,0,0,0,766,767,1,0,0,0,767,768,
        5,2,0,0,768,125,1,0,0,0,769,770,5,60,0,0,770,771,5,2,0,0,771,127,
        1,0,0,0,772,773,5,61,0,0,773,774,3,152,76,0,774,775,5,2,0,0,775,
        129,1,0,0,0,776,777,5,62,0,0,777,778,3,152,76,0,778,779,5,2,0,0,
        779,131,1,0,0,0,780,781,5,63,0,0,781,788,3,136,68,0,782,788,3,74,
        37,0,783,784,5,23,0,0,784,785,3,134,67,0,785,786,5,24,0,0,786,788,
        1,0,0,0,787,780,1,0,0,0,787,782,1,0,0,0,787,783,1,0,0,0,788,791,
        1,0,0,0,789,790,5,11,0,0,790,792,3,140,70,0,791,789,1,0,0,0,791,
        792,1,0,0,0,792,793,1,0,0,0,793,794,5,2,0,0,794,133,1,0,0,0,795,
        797,3,74,37,0,796,795,1,0,0,0,796,797,1,0,0,0,797,804,1,0,0,0,798,
        800,5,16,0,0,799,801,3,74,37,0,800,799,1,0,0,0,800,801,1,0,0,0,801,
        803,1,0,0,0,802,798,1,0,0,0,803,806,1,0,0,0,804,802,1,0,0,0,804,
        805,1,0,0,0,805,135,1,0,0,0,806,804,1,0,0,0,807,814,5,23,0,0,808,
        810,3,194,97,0,809,808,1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,
        813,5,16,0,0,812,809,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,
        815,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,817,819,3,194,97,0,818,
        817,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,0,820,821,5,24,0,0,821,
        137,1,0,0,0,822,823,7,5,0,0,823,139,1,0,0,0,824,825,6,70,-1,0,825,
        826,5,69,0,0,826,843,3,76,38,0,827,828,5,23,0,0,828,829,3,140,70,
        0,829,830,5,24,0,0,830,843,1,0,0,0,831,832,7,6,0,0,832,843,3,140,
        70,19,833,834,7,7,0,0,834,843,3,140,70,18,835,836,5,71,0,0,836,843,
        3,140,70,17,837,838,5,72,0,0,838,843,3,140,70,16,839,840,5,6,0,0,
        840,843,3,140,70,15,841,843,3,142,71,0,842,824,1,0,0,0,842,827,1,
        0,0,0,842,831,1,0,0,0,842,833,1,0,0,0,842,835,1,0,0,0,842,837,1,
        0,0,0,842,839,1,0,0,0,842,841,1,0,0,0,843,918,1,0,0,0,844,845,10,
        14,0,0,845,846,5,73,0,0,846,917,3,140,70,14,847,848,10,13,0,0,848,
        849,7,8,0,0,849,917,3,140,70,14,850,851,10,12,0,0,851,852,7,7,0,
        0,852,917,3,140,70,13,853,854,10,11,0,0,854,855,7,9,0,0,855,917,
        3,140,70,12,856,857,10,10,0,0,857,858,5,29,0,0,858,917,3,140,70,
        11,859,860,10,9,0,0,860,861,5,5,0,0,861,917,3,140,70,10,862,863,
        10,8,0,0,863,864,5,28,0,0,864,917,3,140,70,9,865,866,10,7,0,0,866,
        867,7,10,0,0,867,917,3,140,70,8,868,869,10,6,0,0,869,870,7,11,0,
        0,870,917,3,140,70,7,871,872,10,5,0,0,872,873,5,76,0,0,873,917,3,
        140,70,6,874,875,10,4,0,0,875,876,5,4,0,0,876,917,3,140,70,5,877,
        878,10,3,0,0,878,879,5,77,0,0,879,880,3,140,70,0,880,881,5,70,0,
        0,881,882,3,140,70,3,882,917,1,0,0,0,883,884,10,2,0,0,884,885,7,
        12,0,0,885,917,3,140,70,3,886,887,10,27,0,0,887,917,7,6,0,0,888,
        889,10,25,0,0,889,890,5,42,0,0,890,891,3,140,70,0,891,892,5,43,0,
        0,892,917,1,0,0,0,893,894,10,24,0,0,894,896,5,42,0,0,895,897,3,140,
        70,0,896,895,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,900,5,70,
        0,0,899,901,3,140,70,0,900,899,1,0,0,0,900,901,1,0,0,0,901,902,1,
        0,0,0,902,917,5,43,0,0,903,904,10,23,0,0,904,905,5,45,0,0,905,917,
        3,194,97,0,906,907,10,22,0,0,907,908,5,15,0,0,908,909,3,146,73,0,
        909,910,5,17,0,0,910,917,1,0,0,0,911,912,10,21,0,0,912,913,5,23,
        0,0,913,914,3,150,75,0,914,915,5,24,0,0,915,917,1,0,0,0,916,844,
        1,0,0,0,916,847,1,0,0,0,916,850,1,0,0,0,916,853,1,0,0,0,916,856,
        1,0,0,0,916,859,1,0,0,0,916,862,1,0,0,0,916,865,1,0,0,0,916,868,
        1,0,0,0,916,871,1,0,0,0,916,874,1,0,0,0,916,877,1,0,0,0,916,883,
        1,0,0,0,916,886,1,0,0,0,916,888,1,0,0,0,916,893,1,0,0,0,916,903,
        1,0,0,0,916,906,1,0,0,0,916,911,1,0,0,0,917,920,1,0,0,0,918,916,
        1,0,0,0,918,919,1,0,0,0,919,141,1,0,0,0,920,918,1,0,0,0,921,931,
        5,102,0,0,922,931,3,192,96,0,923,931,3,196,98,0,924,931,3,200,100,
        0,925,931,3,194,97,0,926,931,5,122,0,0,927,931,5,117,0,0,928,931,
        3,190,95,0,929,931,3,76,38,0,930,921,1,0,0,0,930,922,1,0,0,0,930,
        923,1,0,0,0,930,924,1,0,0,0,930,925,1,0,0,0,930,926,1,0,0,0,930,
        927,1,0,0,0,930,928,1,0,0,0,930,929,1,0,0,0,931,143,1,0,0,0,932,
        937,3,140,70,0,933,934,5,16,0,0,934,936,3,140,70,0,935,933,1,0,0,
        0,936,939,1,0,0,0,937,935,1,0,0,0,937,938,1,0,0,0,938,145,1,0,0,
        0,939,937,1,0,0,0,940,945,3,148,74,0,941,942,5,16,0,0,942,944,3,
        148,74,0,943,941,1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,945,946,
        1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,948,950,5,16,0,0,949,948,
        1,0,0,0,949,950,1,0,0,0,950,147,1,0,0,0,951,952,3,194,97,0,952,953,
        5,70,0,0,953,954,3,140,70,0,954,149,1,0,0,0,955,957,5,15,0,0,956,
        958,3,146,73,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,1,0,0,0,959,
        964,5,17,0,0,960,962,3,144,72,0,961,960,1,0,0,0,961,962,1,0,0,0,
        962,964,1,0,0,0,963,955,1,0,0,0,963,961,1,0,0,0,964,151,1,0,0,0,
        965,966,3,140,70,0,966,967,5,23,0,0,967,968,3,150,75,0,968,969,5,
        24,0,0,969,153,1,0,0,0,970,974,5,15,0,0,971,973,3,156,78,0,972,971,
        1,0,0,0,973,976,1,0,0,0,974,972,1,0,0,0,974,975,1,0,0,0,975,977,
        1,0,0,0,976,974,1,0,0,0,977,978,5,17,0,0,978,155,1,0,0,0,979,997,
        3,194,97,0,980,997,3,154,77,0,981,997,3,158,79,0,982,997,3,164,82,
        0,983,997,3,166,83,0,984,997,3,172,86,0,985,997,3,174,87,0,986,997,
        3,176,88,0,987,997,3,180,90,0,988,997,3,184,92,0,989,997,3,186,93,
        0,990,997,5,109,0,0,991,997,5,112,0,0,992,997,5,113,0,0,993,997,
        3,192,96,0,994,997,3,200,100,0,995,997,3,196,98,0,996,979,1,0,0,
        0,996,980,1,0,0,0,996,981,1,0,0,0,996,982,1,0,0,0,996,983,1,0,0,
        0,996,984,1,0,0,0,996,985,1,0,0,0,996,986,1,0,0,0,996,987,1,0,0,
        0,996,988,1,0,0,0,996,989,1,0,0,0,996,990,1,0,0,0,996,991,1,0,0,
        0,996,992,1,0,0,0,996,993,1,0,0,0,996,994,1,0,0,0,996,995,1,0,0,
        0,997,157,1,0,0,0,998,1002,3,162,81,0,999,1002,3,188,94,0,1000,1002,
        3,160,80,0,1001,998,1,0,0,0,1001,999,1,0,0,0,1001,1000,1,0,0,0,1002,
        159,1,0,0,0,1003,1004,3,194,97,0,1004,1005,5,45,0,0,1005,1006,3,
        194,97,0,1006,161,1,0,0,0,1007,1012,5,59,0,0,1008,1012,5,44,0,0,
        1009,1012,5,66,0,0,1010,1012,3,194,97,0,1011,1007,1,0,0,0,1011,1008,
        1,0,0,0,1011,1009,1,0,0,0,1011,1010,1,0,0,0,1012,1025,1,0,0,0,1013,
        1015,5,23,0,0,1014,1016,3,158,79,0,1015,1014,1,0,0,0,1015,1016,1,
        0,0,0,1016,1021,1,0,0,0,1017,1018,5,16,0,0,1018,1020,3,158,79,0,
        1019,1017,1,0,0,0,1020,1023,1,0,0,0,1021,1019,1,0,0,0,1021,1022,
        1,0,0,0,1022,1024,1,0,0,0,1023,1021,1,0,0,0,1024,1026,5,24,0,0,1025,
        1013,1,0,0,0,1025,1026,1,0,0,0,1026,163,1,0,0,0,1027,1028,5,88,0,
        0,1028,1031,3,168,84,0,1029,1030,5,89,0,0,1030,1032,3,158,79,0,1031,
        1029,1,0,0,0,1031,1032,1,0,0,0,1032,165,1,0,0,0,1033,1034,3,168,
        84,0,1034,1035,5,89,0,0,1035,1036,3,158,79,0,1036,167,1,0,0,0,1037,
        1045,3,194,97,0,1038,1045,3,160,80,0,1039,1045,3,170,85,0,1040,1041,
        5,23,0,0,1041,1042,3,170,85,0,1042,1043,5,24,0,0,1043,1045,1,0,0,
        0,1044,1037,1,0,0,0,1044,1038,1,0,0,0,1044,1039,1,0,0,0,1044,1040,
        1,0,0,0,1045,169,1,0,0,0,1046,1051,3,194,97,0,1047,1048,5,16,0,0,
        1048,1050,3,194,97,0,1049,1047,1,0,0,0,1050,1053,1,0,0,0,1051,1049,
        1,0,0,0,1051,1052,1,0,0,0,1052,171,1,0,0,0,1053,1051,1,0,0,0,1054,
        1055,3,158,79,0,1055,1056,5,90,0,0,1056,1057,3,194,97,0,1057,173,
        1,0,0,0,1058,1059,3,194,97,0,1059,1060,5,70,0,0,1060,175,1,0,0,0,
        1061,1062,5,91,0,0,1062,1066,3,158,79,0,1063,1065,3,178,89,0,1064,
        1063,1,0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,
        0,1067,177,1,0,0,0,1068,1066,1,0,0,0,1069,1070,5,92,0,0,1070,1071,
        3,188,94,0,1071,1072,3,154,77,0,1072,1076,1,0,0,0,1073,1074,5,93,
        0,0,1074,1076,3,154,77,0,1075,1069,1,0,0,0,1075,1073,1,0,0,0,1076,
        179,1,0,0,0,1077,1078,5,38,0,0,1078,1079,3,194,97,0,1079,1081,5,
        23,0,0,1080,1082,3,170,85,0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,
        1082,1083,1,0,0,0,1083,1085,5,24,0,0,1084,1086,3,182,91,0,1085,1084,
        1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1088,3,154,77,0,
        1088,181,1,0,0,0,1089,1090,5,94,0,0,1090,1091,3,170,85,0,1091,183,
        1,0,0,0,1092,1095,5,27,0,0,1093,1096,3,154,77,0,1094,1096,3,158,
        79,0,1095,1093,1,0,0,0,1095,1094,1,0,0,0,1096,1097,1,0,0,0,1097,
        1100,3,158,79,0,1098,1101,3,154,77,0,1099,1101,3,158,79,0,1100,1098,
        1,0,0,0,1100,1099,1,0,0,0,1101,1102,1,0,0,0,1102,1103,3,154,77,0,
        1103,185,1,0,0,0,1104,1105,5,51,0,0,1105,1106,3,158,79,0,1106,1107,
        3,154,77,0,1107,187,1,0,0,0,1108,1114,3,200,100,0,1109,1114,5,103,
        0,0,1110,1114,5,104,0,0,1111,1114,3,196,98,0,1112,1114,5,102,0,0,
        1113,1108,1,0,0,0,1113,1109,1,0,0,0,1113,1110,1,0,0,0,1113,1111,
        1,0,0,0,1113,1112,1,0,0,0,1114,189,1,0,0,0,1115,1117,5,23,0,0,1116,
        1118,3,140,70,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1125,1,
        0,0,0,1119,1121,5,16,0,0,1120,1122,3,140,70,0,1121,1120,1,0,0,0,
        1121,1122,1,0,0,0,1122,1124,1,0,0,0,1123,1119,1,0,0,0,1124,1127,
        1,0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1128,1,0,0,0,1127,
        1125,1,0,0,0,1128,1142,5,24,0,0,1129,1138,5,42,0,0,1130,1135,3,140,
        70,0,1131,1132,5,16,0,0,1132,1134,3,140,70,0,1133,1131,1,0,0,0,1134,
        1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,1139,1,0,0,
        0,1137,1135,1,0,0,0,1138,1130,1,0,0,0,1138,1139,1,0,0,0,1139,1140,
        1,0,0,0,1140,1142,5,43,0,0,1141,1115,1,0,0,0,1141,1129,1,0,0,0,1142,
        191,1,0,0,0,1143,1145,7,13,0,0,1144,1146,5,105,0,0,1145,1144,1,0,
        0,0,1145,1146,1,0,0,0,1146,193,1,0,0,0,1147,1148,7,14,0,0,1148,195,
        1,0,0,0,1149,1151,5,106,0,0,1150,1149,1,0,0,0,1151,1152,1,0,0,0,
        1152,1150,1,0,0,0,1152,1153,1,0,0,0,1153,197,1,0,0,0,1154,1166,5,
        96,0,0,1155,1156,5,23,0,0,1156,1161,3,78,39,0,1157,1158,5,16,0,0,
        1158,1160,3,78,39,0,1159,1157,1,0,0,0,1160,1163,1,0,0,0,1161,1159,
        1,0,0,0,1161,1162,1,0,0,0,1162,1164,1,0,0,0,1163,1161,1,0,0,0,1164,
        1165,5,24,0,0,1165,1167,1,0,0,0,1166,1155,1,0,0,0,1166,1167,1,0,
        0,0,1167,199,1,0,0,0,1168,1170,5,129,0,0,1169,1168,1,0,0,0,1170,
        1171,1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,201,1,0,0,
        0,131,213,215,230,234,239,245,249,252,257,263,270,274,287,295,300,
        310,313,319,327,330,341,350,352,358,385,388,399,404,409,423,426,
        433,437,439,444,449,452,458,462,466,471,484,486,493,503,509,520,
        523,529,532,535,543,546,552,555,563,566,572,576,588,593,598,606,
        611,617,622,635,637,642,652,672,684,689,695,699,702,714,723,727,
        730,737,743,765,787,791,796,800,804,809,814,818,842,896,900,916,
        918,930,937,945,949,957,961,963,974,996,1001,1011,1015,1021,1025,
        1031,1044,1051,1066,1075,1081,1085,1095,1100,1113,1117,1121,1125,
        1135,1138,1141,1145,1152,1161,1166,1171
    ]

class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'*'", "'||'", "'^'", 
                     "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", 
                     "'import'", "'from'", "'{'", "','", "'}'", "'abstract'", 
                     "'contract'", "'interface'", "'library'", "'is'", "'('", 
                     "')'", "'error'", "'using'", "'for'", "'|'", "'&'", 
                     "'+'", "'-'", "'/'", "'%'", "'=='", "'!='", "'struct'", 
                     "'modifier'", "'function'", "'returns'", "'event'", 
                     "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", 
                     "'=>'", "'memory'", "'storage'", "'calldata'", "'if'", 
                     "'else'", "'try'", "'catch'", "'while'", "'unchecked'", 
                     "'assembly'", "'do'", "'return'", "'throw'", "'emit'", 
                     "'revert'", "'var'", "'bool'", "'string'", "'byte'", 
                     "'++'", "'--'", "'new'", "':'", "'delete'", "'!'", 
                     "'**'", "'<<'", "'>>'", "'&&'", "'?'", "'|='", "'^='", 
                     "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", 
                     "'default'", "'->'", "'callback'", "'override'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'anonymous'", "'break'", 
                     "'constant'", "'immutable'", "'continue'", "'leave'", 
                     "'external'", "'indexed'", "'internal'", "'payable'", 
                     "'private'", "'public'", "'virtual'", "'pure'", "'type'", 
                     "'view'", "'global'", "'constructor'", "'fallback'", 
                     "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "Int", "Uint", "Byte", "Fixed", "Ufixed", 
                      "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", 
                      "HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", 
                      "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", 
                      "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", 
                      "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                      "PrivateKeyword", "PublicKeyword", "VirtualKeyword", 
                      "PureKeyword", "TypeKeyword", "ViewKeyword", "GlobalKeyword", 
                      "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
                      "Identifier", "StringLiteralFragment", "VersionLiteral", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_importPath = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_fileLevelConstant = 14
    RULE_customErrorDefinition = 15
    RULE_typeDefinition = 16
    RULE_usingForDeclaration = 17
    RULE_usingForObject = 18
    RULE_usingForObjectDirective = 19
    RULE_userDefinableOperators = 20
    RULE_structDefinition = 21
    RULE_modifierDefinition = 22
    RULE_modifierInvocation = 23
    RULE_functionDefinition = 24
    RULE_functionDescriptor = 25
    RULE_returnParameters = 26
    RULE_modifierList = 27
    RULE_eventDefinition = 28
    RULE_enumValue = 29
    RULE_enumDefinition = 30
    RULE_parameterList = 31
    RULE_parameter = 32
    RULE_eventParameterList = 33
    RULE_eventParameter = 34
    RULE_functionTypeParameterList = 35
    RULE_functionTypeParameter = 36
    RULE_variableDeclaration = 37
    RULE_typeName = 38
    RULE_userDefinedTypeName = 39
    RULE_mappingKey = 40
    RULE_mapping = 41
    RULE_mappingKeyName = 42
    RULE_mappingValueName = 43
    RULE_functionTypeName = 44
    RULE_storageLocation = 45
    RULE_stateMutability = 46
    RULE_block = 47
    RULE_statement = 48
    RULE_expressionStatement = 49
    RULE_ifStatement = 50
    RULE_tryStatement = 51
    RULE_catchClause = 52
    RULE_whileStatement = 53
    RULE_simpleStatement = 54
    RULE_uncheckedStatement = 55
    RULE_forStatement = 56
    RULE_inlineAssemblyStatement = 57
    RULE_inlineAssemblyStatementFlag = 58
    RULE_doWhileStatement = 59
    RULE_continueStatement = 60
    RULE_breakStatement = 61
    RULE_returnStatement = 62
    RULE_throwStatement = 63
    RULE_emitStatement = 64
    RULE_revertStatement = 65
    RULE_variableDeclarationStatement = 66
    RULE_variableDeclarationList = 67
    RULE_identifierList = 68
    RULE_elementaryTypeName = 69
    RULE_expression = 70
    RULE_primaryExpression = 71
    RULE_expressionList = 72
    RULE_nameValueList = 73
    RULE_nameValue = 74
    RULE_functionCallArguments = 75
    RULE_functionCall = 76
    RULE_assemblyBlock = 77
    RULE_assemblyItem = 78
    RULE_assemblyExpression = 79
    RULE_assemblyMember = 80
    RULE_assemblyCall = 81
    RULE_assemblyLocalDefinition = 82
    RULE_assemblyAssignment = 83
    RULE_assemblyIdentifierOrList = 84
    RULE_assemblyIdentifierList = 85
    RULE_assemblyStackAssignment = 86
    RULE_labelDefinition = 87
    RULE_assemblySwitch = 88
    RULE_assemblyCase = 89
    RULE_assemblyFunctionDefinition = 90
    RULE_assemblyFunctionReturns = 91
    RULE_assemblyFor = 92
    RULE_assemblyIf = 93
    RULE_assemblyLiteral = 94
    RULE_tupleExpression = 95
    RULE_numberLiteral = 96
    RULE_identifier = 97
    RULE_hexLiteral = 98
    RULE_overrideSpecifier = 99
    RULE_stringLiteral = 100

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "importPath", "contractDefinition", 
                   "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", 
                   "fileLevelConstant", "customErrorDefinition", "typeDefinition", 
                   "usingForDeclaration", "usingForObject", "usingForObjectDirective", 
                   "userDefinableOperators", "structDefinition", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "functionDescriptor", 
                   "returnParameters", "modifierList", "eventDefinition", 
                   "enumValue", "enumDefinition", "parameterList", "parameter", 
                   "eventParameterList", "eventParameter", "functionTypeParameterList", 
                   "functionTypeParameter", "variableDeclaration", "typeName", 
                   "userDefinedTypeName", "mappingKey", "mapping", "mappingKeyName", 
                   "mappingValueName", "functionTypeName", "storageLocation", 
                   "stateMutability", "block", "statement", "expressionStatement", 
                   "ifStatement", "tryStatement", "catchClause", "whileStatement", 
                   "simpleStatement", "uncheckedStatement", "forStatement", 
                   "inlineAssemblyStatement", "inlineAssemblyStatementFlag", 
                   "doWhileStatement", "continueStatement", "breakStatement", 
                   "returnStatement", "throwStatement", "emitStatement", 
                   "revertStatement", "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyMember", "assemblyCall", "assemblyLocalDefinition", 
                   "assemblyAssignment", "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "tupleExpression", 
                   "numberLiteral", "identifier", "hexLiteral", "overrideSpecifier", 
                   "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    Int=97
    Uint=98
    Byte=99
    Fixed=100
    Ufixed=101
    BooleanLiteral=102
    DecimalNumber=103
    HexNumber=104
    NumberUnit=105
    HexLiteralFragment=106
    ReservedKeyword=107
    AnonymousKeyword=108
    BreakKeyword=109
    ConstantKeyword=110
    ImmutableKeyword=111
    ContinueKeyword=112
    LeaveKeyword=113
    ExternalKeyword=114
    IndexedKeyword=115
    InternalKeyword=116
    PayableKeyword=117
    PrivateKeyword=118
    PublicKeyword=119
    VirtualKeyword=120
    PureKeyword=121
    TypeKeyword=122
    ViewKeyword=123
    GlobalKeyword=124
    ConstructorKeyword=125
    FallbackKeyword=126
    ReceiveKeyword=127
    Identifier=128
    StringLiteralFragment=129
    VersionLiteral=130
    WS=131
    COMMENT=132
    LINE_COMMENT=133

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def eventDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,i)


        def fileLevelConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FileLevelConstantContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FileLevelConstantContext,i)


        def customErrorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CustomErrorDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,i)


        def typeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.TypeDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.TypeDefinitionContext,i)


        def usingForDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UsingForDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceUnit" ):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -2305234257676718079) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -427560355405758461) != 0):
                self.state = 213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 202
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 203
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 204
                    self.contractDefinition()
                    pass

                elif la_ == 4:
                    self.state = 205
                    self.enumDefinition()
                    pass

                elif la_ == 5:
                    self.state = 206
                    self.eventDefinition()
                    pass

                elif la_ == 6:
                    self.state = 207
                    self.structDefinition()
                    pass

                elif la_ == 7:
                    self.state = 208
                    self.functionDefinition()
                    pass

                elif la_ == 8:
                    self.state = 209
                    self.fileLevelConstant()
                    pass

                elif la_ == 9:
                    self.state = 210
                    self.customErrorDefinition()
                    pass

                elif la_ == 10:
                    self.state = 211
                    self.typeDefinition()
                    pass

                elif la_ == 11:
                    self.state = 212
                    self.usingForDeclaration()
                    pass


                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 218
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaDirective" ):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(SolidityParser.T__0)
            self.state = 221
            self.pragmaName()
            self.state = 222
            self.pragmaValue()
            self.state = 223
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaName" ):
                return visitor.visitPragmaName(self)
            else:
                return visitor.visitChildren(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaValue" ):
                return visitor.visitPragmaValue(self)
            else:
                return visitor.visitChildren(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 227
                self.match(SolidityParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 228
                self.version()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 229
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.versionConstraint()
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4080) != 0) or _la==103 or _la==130:
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 233
                    self.match(SolidityParser.T__3)


                self.state = 236
                self.versionConstraint()
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionOperator" ):
                return visitor.visitVersionOperator(self)
            else:
                return visitor.visitChildren(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4064) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionConstraint" ):
                return visitor.visitVersionConstraint(self)
            else:
                return visitor.visitChildren(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.state = 252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4064) != 0):
                    self.state = 244
                    self.versionOperator()


                self.state = 247
                self.match(SolidityParser.VersionLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4064) != 0):
                    self.state = 248
                    self.versionOperator()


                self.state = 251
                self.match(SolidityParser.DecimalNumber)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.identifier()
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 255
                self.match(SolidityParser.T__11)
                self.state = 256
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(SolidityParser.ImportPathContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDirective" ):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.match(SolidityParser.T__12)
                self.state = 260
                self.importPath()
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 261
                    self.match(SolidityParser.T__11)
                    self.state = 262
                    self.identifier()


                self.state = 265
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.match(SolidityParser.T__12)
                self.state = 270
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3]:
                    self.state = 268
                    self.match(SolidityParser.T__2)
                    pass
                elif token in [14, 25, 44, 50, 62, 95, 113, 117, 124, 125, 127, 128]:
                    self.state = 269
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 272
                    self.match(SolidityParser.T__11)
                    self.state = 273
                    self.identifier()


                self.state = 276
                self.match(SolidityParser.T__13)
                self.state = 277
                self.importPath()
                self.state = 278
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 280
                self.match(SolidityParser.T__12)
                self.state = 281
                self.match(SolidityParser.T__14)
                self.state = 282
                self.importDeclaration()
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 283
                    self.match(SolidityParser.T__15)
                    self.state = 284
                    self.importDeclaration()
                    self.state = 289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 290
                self.match(SolidityParser.T__16)
                self.state = 291
                self.match(SolidityParser.T__13)
                self.state = 292
                self.importPath()
                self.state = 293
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportPath" ):
                return visitor.visitImportPath(self)
            else:
                return visitor.visitChildren(self)




    def importPath(self):

        localctx = SolidityParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(SolidityParser.StringLiteralFragment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractDefinition" ):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 299
                self.match(SolidityParser.T__17)


            self.state = 302
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3670016) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 303
            self.identifier()
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 304
                self.match(SolidityParser.T__21)
                self.state = 305
                self.inheritanceSpecifier()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 306
                    self.match(SolidityParser.T__15)
                    self.state = 307
                    self.inheritanceSpecifier()
                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 315
            self.match(SolidityParser.T__14)
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8725798596909057) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 16781672573) != 0):
                self.state = 316
                self.contractPart()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 322
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceSpecifier" ):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.userDefinedTypeName()
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 325
                self.match(SolidityParser.T__22)
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                    self.state = 326
                    self.expressionList()


                self.state = 329
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def customErrorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,0)


        def typeDefinition(self):
            return self.getTypedRuleContext(SolidityParser.TypeDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractPart" ):
                return visitor.visitContractPart(self)
            else:
                return visitor.visitChildren(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 333
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 334
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 335
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 336
                self.functionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 337
                self.eventDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 338
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 339
                self.customErrorDefinition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 340
                self.typeDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateVariableDeclaration" ):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.typeName(0)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 13680641) != 0):
                self.state = 350
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [119]:
                    self.state = 344
                    self.match(SolidityParser.PublicKeyword)
                    pass
                elif token in [116]:
                    self.state = 345
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [118]:
                    self.state = 346
                    self.match(SolidityParser.PrivateKeyword)
                    pass
                elif token in [110]:
                    self.state = 347
                    self.match(SolidityParser.ConstantKeyword)
                    pass
                elif token in [111]:
                    self.state = 348
                    self.match(SolidityParser.ImmutableKeyword)
                    pass
                elif token in [96]:
                    self.state = 349
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 355
            self.identifier()
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 356
                self.match(SolidityParser.T__10)
                self.state = 357
                self.expression(0)


            self.state = 360
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileLevelConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_fileLevelConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileLevelConstant" ):
                listener.enterFileLevelConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileLevelConstant" ):
                listener.exitFileLevelConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileLevelConstant" ):
                return visitor.visitFileLevelConstant(self)
            else:
                return visitor.visitChildren(self)




    def fileLevelConstant(self):

        localctx = SolidityParser.FileLevelConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fileLevelConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.typeName(0)
            self.state = 363
            self.match(SolidityParser.ConstantKeyword)
            self.state = 364
            self.identifier()
            self.state = 365
            self.match(SolidityParser.T__10)
            self.state = 366
            self.expression(0)
            self.state = 367
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomErrorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_customErrorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomErrorDefinition" ):
                listener.enterCustomErrorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomErrorDefinition" ):
                listener.exitCustomErrorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustomErrorDefinition" ):
                return visitor.visitCustomErrorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def customErrorDefinition(self):

        localctx = SolidityParser.CustomErrorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_customErrorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(SolidityParser.T__24)
            self.state = 370
            self.identifier()
            self.state = 371
            self.parameterList()
            self.state = 372
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefinition" ):
                listener.enterTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefinition" ):
                listener.exitTypeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDefinition" ):
                return visitor.visitTypeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def typeDefinition(self):

        localctx = SolidityParser.TypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(SolidityParser.TypeKeyword)
            self.state = 375
            self.identifier()
            self.state = 376
            self.match(SolidityParser.T__21)
            self.state = 377
            self.elementaryTypeName()
            self.state = 378
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def usingForObject(self):
            return self.getTypedRuleContext(SolidityParser.UsingForObjectContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def GlobalKeyword(self):
            return self.getToken(SolidityParser.GlobalKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForDeclaration" ):
                return visitor.visitUsingForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_usingForDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(SolidityParser.T__25)
            self.state = 381
            self.usingForObject()
            self.state = 382
            self.match(SolidityParser.T__26)
            self.state = 385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 383
                self.match(SolidityParser.T__2)
                pass
            elif token in [14, 25, 38, 44, 46, 50, 62, 63, 64, 65, 66, 95, 97, 98, 99, 100, 101, 113, 117, 124, 125, 127, 128]:
                self.state = 384
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 387
                self.match(SolidityParser.GlobalKeyword)


            self.state = 390
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def usingForObjectDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UsingForObjectDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UsingForObjectDirectiveContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForObject" ):
                listener.enterUsingForObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForObject" ):
                listener.exitUsingForObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForObject" ):
                return visitor.visitUsingForObject(self)
            else:
                return visitor.visitChildren(self)




    def usingForObject(self):

        localctx = SolidityParser.UsingForObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_usingForObject)
        self._la = 0 # Token type
        try:
            self.state = 404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 25, 44, 50, 62, 95, 113, 117, 124, 125, 127, 128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 392
                self.userDefinedTypeName()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 393
                self.match(SolidityParser.T__14)
                self.state = 394
                self.usingForObjectDirective()
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 395
                    self.match(SolidityParser.T__15)
                    self.state = 396
                    self.usingForObjectDirective()
                    self.state = 401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 402
                self.match(SolidityParser.T__16)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForObjectDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def userDefinableOperators(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinableOperatorsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForObjectDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForObjectDirective" ):
                listener.enterUsingForObjectDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForObjectDirective" ):
                listener.exitUsingForObjectDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForObjectDirective" ):
                return visitor.visitUsingForObjectDirective(self)
            else:
                return visitor.visitChildren(self)




    def usingForObjectDirective(self):

        localctx = SolidityParser.UsingForObjectDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_usingForObjectDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.userDefinedTypeName()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 407
                self.match(SolidityParser.T__11)
                self.state = 408
                self.userDefinableOperators()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinableOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinableOperators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinableOperators" ):
                listener.enterUserDefinableOperators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinableOperators" ):
                listener.exitUserDefinableOperators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinableOperators" ):
                return visitor.visitUserDefinableOperators(self)
            else:
                return visitor.visitChildren(self)




    def userDefinableOperators(self):

        localctx = SolidityParser.UserDefinableOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_userDefinableOperators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 68451043304) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefinition" ):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(SolidityParser.T__35)
            self.state = 414
            self.identifier()
            self.state = 415
            self.match(SolidityParser.T__14)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8725798382995457) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971197) != 0):
                self.state = 416
                self.variableDeclaration()
                self.state = 417
                self.match(SolidityParser.T__1)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8725798382995457) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971197) != 0):
                    self.state = 418
                    self.variableDeclaration()
                    self.state = 419
                    self.match(SolidityParser.T__1)
                    self.state = 425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 428
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierDefinition" ):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(SolidityParser.T__36)
            self.state = 431
            self.identifier()
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 432
                self.parameterList()


            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==96 or _la==120:
                self.state = 437
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [120]:
                    self.state = 435
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [96]:
                    self.state = 436
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 442
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 443
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierInvocation" ):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.identifier()
            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 447
                self.match(SolidityParser.T__22)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                    self.state = 448
                    self.expressionList()


                self.state = 451
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDescriptor(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDescriptorContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.functionDescriptor()
            self.state = 455
            self.parameterList()
            self.state = 456
            self.modifierList()
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 457
                self.returnParameters()


            self.state = 462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 460
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 461
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDescriptorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionDescriptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDescriptor" ):
                listener.enterFunctionDescriptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDescriptor" ):
                listener.exitFunctionDescriptor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDescriptor" ):
                return visitor.visitFunctionDescriptor(self)
            else:
                return visitor.visitChildren(self)




    def functionDescriptor(self):

        localctx = SolidityParser.FunctionDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_functionDescriptor)
        self._la = 0 # Token type
        try:
            self.state = 471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 464
                self.match(SolidityParser.T__37)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                    self.state = 465
                    self.identifier()


                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 468
                self.match(SolidityParser.ConstructorKeyword)
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 3)
                self.state = 469
                self.match(SolidityParser.FallbackKeyword)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 4)
                self.state = 470
                self.match(SolidityParser.ReceiveKeyword)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnParameters" ):
                return visitor.visitReturnParameters(self)
            else:
                return visitor.visitChildren(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(SolidityParser.T__38)
            self.state = 474
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierList" ):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14896889859) != 0):
                self.state = 484
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 476
                    self.match(SolidityParser.ExternalKeyword)
                    pass

                elif la_ == 2:
                    self.state = 477
                    self.match(SolidityParser.PublicKeyword)
                    pass

                elif la_ == 3:
                    self.state = 478
                    self.match(SolidityParser.InternalKeyword)
                    pass

                elif la_ == 4:
                    self.state = 479
                    self.match(SolidityParser.PrivateKeyword)
                    pass

                elif la_ == 5:
                    self.state = 480
                    self.match(SolidityParser.VirtualKeyword)
                    pass

                elif la_ == 6:
                    self.state = 481
                    self.stateMutability()
                    pass

                elif la_ == 7:
                    self.state = 482
                    self.modifierInvocation()
                    pass

                elif la_ == 8:
                    self.state = 483
                    self.overrideSpecifier()
                    pass


                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDefinition" ):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(SolidityParser.T__39)
            self.state = 490
            self.identifier()
            self.state = 491
            self.eventParameterList()
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 492
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 495
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDefinition" ):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(SolidityParser.T__40)
            self.state = 500
            self.identifier()
            self.state = 501
            self.match(SolidityParser.T__14)
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                self.state = 502
                self.enumValue()


            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 505
                self.match(SolidityParser.T__15)
                self.state = 506
                self.enumValue()
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 512
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(SolidityParser.T__22)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8725798382995457) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971197) != 0):
                self.state = 515
                self.parameter()
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 516
                    self.match(SolidityParser.T__15)
                    self.state = 517
                    self.parameter()
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 525
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def stateMutability(self):
            return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.typeName(0)
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 528
                self.stateMutability()


            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 531
                self.storageLocation()


            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                self.state = 534
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(SolidityParser.T__22)
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8725798382995457) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971197) != 0):
                self.state = 538
                self.eventParameter()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 539
                    self.match(SolidityParser.T__15)
                    self.state = 540
                    self.eventParameter()
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 548
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameter" ):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.typeName(0)
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 551
                self.match(SolidityParser.IndexedKeyword)


            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                self.state = 554
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameterList" ):
                return visitor.visitFunctionTypeParameterList(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameterList(self):

        localctx = SolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(SolidityParser.T__22)
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8725798382995457) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971197) != 0):
                self.state = 558
                self.functionTypeParameter()
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 559
                    self.match(SolidityParser.T__15)
                    self.state = 560
                    self.functionTypeParameter()
                    self.state = 565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 568
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameter" ):
                return visitor.visitFunctionTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameter(self):

        localctx = SolidityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.typeName(0)
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1970324836974592) != 0):
                self.state = 571
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.typeName(0)
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 575
                self.storageLocation()


            self.state = 578
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 581
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 582
                self.elementaryTypeName()
                pass

            elif la_ == 3:
                self.state = 583
                self.userDefinedTypeName()
                pass

            elif la_ == 4:
                self.state = 584
                self.mapping()
                pass

            elif la_ == 5:
                self.state = 585
                self.functionTypeName()
                pass

            elif la_ == 6:
                self.state = 586
                self.match(SolidityParser.T__43)
                self.state = 587
                self.match(SolidityParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 598
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 590
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 591
                    self.match(SolidityParser.T__41)
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                        self.state = 592
                        self.expression(0)


                    self.state = 595
                    self.match(SolidityParser.T__42) 
                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedTypeName" ):
                return visitor.visitUserDefinedTypeName(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.identifier()
            self.state = 606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 602
                    self.match(SolidityParser.T__44)
                    self.state = 603
                    self.identifier() 
                self.state = 608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKey" ):
                listener.enterMappingKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKey" ):
                listener.exitMappingKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappingKey" ):
                return visitor.visitMappingKey(self)
            else:
                return visitor.visitChildren(self)




    def mappingKey(self):

        localctx = SolidityParser.MappingKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_mappingKey)
        try:
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.userDefinedTypeName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingKey(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def mappingKeyName(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyNameContext,0)


        def mappingValueName(self):
            return self.getTypedRuleContext(SolidityParser.MappingValueNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(SolidityParser.T__45)
            self.state = 614
            self.match(SolidityParser.T__22)
            self.state = 615
            self.mappingKey()
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                self.state = 616
                self.mappingKeyName()


            self.state = 619
            self.match(SolidityParser.T__46)
            self.state = 620
            self.typeName(0)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                self.state = 621
                self.mappingValueName()


            self.state = 624
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKeyName" ):
                listener.enterMappingKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKeyName" ):
                listener.exitMappingKeyName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappingKeyName" ):
                return visitor.visitMappingKeyName(self)
            else:
                return visitor.visitChildren(self)




    def mappingKeyName(self):

        localctx = SolidityParser.MappingKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_mappingKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingValueNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingValueName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingValueName" ):
                listener.enterMappingValueName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingValueName" ):
                listener.exitMappingValueName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappingValueName" ):
                return visitor.visitMappingValueName(self)
            else:
                return visitor.visitChildren(self)




    def mappingValueName(self):

        localctx = SolidityParser.MappingValueNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_mappingValueName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeName" ):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(SolidityParser.T__37)
            self.state = 631
            self.functionTypeParameterList()
            self.state = 637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 635
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [116]:
                        self.state = 632
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [114]:
                        self.state = 633
                        self.match(SolidityParser.ExternalKeyword)
                        pass
                    elif token in [110, 117, 121, 123]:
                        self.state = 634
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 640
                self.match(SolidityParser.T__38)
                self.state = 641
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageLocation" ):
                return visitor.visitStorageLocation(self)
            else:
                return visitor.visitChildren(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1970324836974592) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateMutability" ):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            _la = self._input.LA(1)
            if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 10369) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(SolidityParser.T__14)
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -367988449869055) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533753848024530947) != 0):
                self.state = 649
                self.statement()
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 655
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def uncheckedStatement(self):
            return self.getTypedRuleContext(SolidityParser.UncheckedStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_statement)
        try:
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.tryStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self.whileStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 660
                self.forStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 661
                self.block()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 662
                self.inlineAssemblyStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 663
                self.doWhileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 664
                self.continueStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 665
                self.breakStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 666
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 667
                self.throwStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 668
                self.emitStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 669
                self.simpleStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 670
                self.uncheckedStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 671
                self.revertStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.expression(0)
            self.state = 675
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(SolidityParser.T__50)
            self.state = 678
            self.match(SolidityParser.T__22)
            self.state = 679
            self.expression(0)
            self.state = 680
            self.match(SolidityParser.T__23)
            self.state = 681
            self.statement()
            self.state = 684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 682
                self.match(SolidityParser.T__51)
                self.state = 683
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(SolidityParser.T__52)
            self.state = 687
            self.expression(0)
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 688
                self.returnParameters()


            self.state = 691
            self.block()
            self.state = 693 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 692
                self.catchClause()
                self.state = 695 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==54):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(SolidityParser.T__53)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510562234368) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                    self.state = 698
                    self.identifier()


                self.state = 701
                self.parameterList()


            self.state = 704
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(SolidityParser.T__54)
            self.state = 707
            self.match(SolidityParser.T__22)
            self.state = 708
            self.expression(0)
            self.state = 709
            self.match(SolidityParser.T__23)
            self.state = 710
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStatement" ):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 712
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 713
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedStatement" ):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedStatement" ):
                listener.exitUncheckedStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncheckedStatement" ):
                return visitor.visitUncheckedStatement(self)
            else:
                return visitor.visitChildren(self)




    def uncheckedStatement(self):

        localctx = SolidityParser.UncheckedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_uncheckedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.match(SolidityParser.T__55)
            self.state = 717
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(SolidityParser.T__26)
            self.state = 720
            self.match(SolidityParser.T__22)
            self.state = 723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 14, 23, 25, 30, 31, 38, 42, 44, 46, 50, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 113, 117, 122, 124, 125, 127, 128, 129]:
                self.state = 721
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 722
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 727
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 14, 23, 25, 30, 31, 38, 42, 44, 46, 50, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 113, 117, 122, 124, 125, 127, 128, 129]:
                self.state = 725
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 726
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                self.state = 729
                self.expression(0)


            self.state = 732
            self.match(SolidityParser.T__23)
            self.state = 733
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def inlineAssemblyStatementFlag(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementFlagContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineAssemblyStatement" ):
                return visitor.visitInlineAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(SolidityParser.T__56)
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 736
                self.match(SolidityParser.StringLiteralFragment)


            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 739
                self.match(SolidityParser.T__22)
                self.state = 740
                self.inlineAssemblyStatementFlag()
                self.state = 741
                self.match(SolidityParser.T__23)


            self.state = 745
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementFlagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatementFlag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatementFlag" ):
                listener.enterInlineAssemblyStatementFlag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatementFlag" ):
                listener.exitInlineAssemblyStatementFlag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineAssemblyStatementFlag" ):
                return visitor.visitInlineAssemblyStatementFlag(self)
            else:
                return visitor.visitChildren(self)




    def inlineAssemblyStatementFlag(self):

        localctx = SolidityParser.InlineAssemblyStatementFlagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_inlineAssemblyStatementFlag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(SolidityParser.T__57)
            self.state = 750
            self.statement()
            self.state = 751
            self.match(SolidityParser.T__54)
            self.state = 752
            self.match(SolidityParser.T__22)
            self.state = 753
            self.expression(0)
            self.state = 754
            self.match(SolidityParser.T__23)
            self.state = 755
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(SolidityParser.ContinueKeyword)
            self.state = 758
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(SolidityParser.BreakKeyword)
            self.state = 761
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(SolidityParser.T__58)
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                self.state = 764
                self.expression(0)


            self.state = 767
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStatement" ):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(SolidityParser.T__59)
            self.state = 770
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmitStatement" ):
                return visitor.visitEmitStatement(self)
            else:
                return visitor.visitChildren(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(SolidityParser.T__60)
            self.state = 773
            self.functionCall()
            self.state = 774
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_revertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevertStatement" ):
                listener.enterRevertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevertStatement" ):
                listener.exitRevertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevertStatement" ):
                return visitor.visitRevertStatement(self)
            else:
                return visitor.visitChildren(self)




    def revertStatement(self):

        localctx = SolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_revertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(SolidityParser.T__61)
            self.state = 777
            self.functionCall()
            self.state = 778
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationStatement" ):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 780
                self.match(SolidityParser.T__62)
                self.state = 781
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 782
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 783
                self.match(SolidityParser.T__22)
                self.state = 784
                self.variableDeclarationList()
                self.state = 785
                self.match(SolidityParser.T__23)
                pass


            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 789
                self.match(SolidityParser.T__10)
                self.state = 790
                self.expression(0)


            self.state = 793
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8725798382995457) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971197) != 0):
                self.state = 795
                self.variableDeclaration()


            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 798
                self.match(SolidityParser.T__15)
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 8725798382995457) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971197) != 0):
                    self.state = 799
                    self.variableDeclaration()


                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(SolidityParser.T__22)
            self.state = 814
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                        self.state = 808
                        self.identifier()


                    self.state = 811
                    self.match(SolidityParser.T__15) 
                self.state = 816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                self.state = 817
                self.identifier()


            self.state = 820
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryTypeName" ):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            _la = self._input.LA(1)
            if not(((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & 279223176904835073) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 825
                self.match(SolidityParser.T__68)
                self.state = 826
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 827
                self.match(SolidityParser.T__22)
                self.state = 828
                self.expression(0)
                self.state = 829
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 3:
                self.state = 831
                _la = self._input.LA(1)
                if not(_la==67 or _la==68):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 832
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 833
                _la = self._input.LA(1)
                if not(_la==30 or _la==31):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 834
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 835
                self.match(SolidityParser.T__70)
                self.state = 836
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 837
                self.match(SolidityParser.T__71)
                self.state = 838
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 839
                self.match(SolidityParser.T__5)
                self.state = 840
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 841
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 916
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 844
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 845
                        self.match(SolidityParser.T__72)
                        self.state = 846
                        self.expression(14)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 847
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 848
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 12884901896) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 849
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 850
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 851
                        _la = self._input.LA(1)
                        if not(_la==30 or _la==31):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 852
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 853
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 854
                        _la = self._input.LA(1)
                        if not(_la==74 or _la==75):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 855
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 856
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 857
                        self.match(SolidityParser.T__28)
                        self.state = 858
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 859
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 860
                        self.match(SolidityParser.T__4)
                        self.state = 861
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 862
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 863
                        self.match(SolidityParser.T__27)
                        self.state = 864
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 865
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 866
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1920) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 867
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 868
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 869
                        _la = self._input.LA(1)
                        if not(_la==34 or _la==35):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 870
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 871
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 872
                        self.match(SolidityParser.T__75)
                        self.state = 873
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 874
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 875
                        self.match(SolidityParser.T__3)
                        self.state = 876
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 877
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 878
                        self.match(SolidityParser.T__76)
                        self.state = 879
                        self.expression(0)
                        self.state = 880
                        self.match(SolidityParser.T__69)
                        self.state = 881
                        self.expression(3)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 883
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 884
                        _la = self._input.LA(1)
                        if not(_la==11 or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 1023) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 885
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 886
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 887
                        _la = self._input.LA(1)
                        if not(_la==67 or _la==68):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 888
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 889
                        self.match(SolidityParser.T__41)
                        self.state = 890
                        self.expression(0)
                        self.state = 891
                        self.match(SolidityParser.T__42)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 893
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 894
                        self.match(SolidityParser.T__41)
                        self.state = 896
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                            self.state = 895
                            self.expression(0)


                        self.state = 898
                        self.match(SolidityParser.T__69)
                        self.state = 900
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                            self.state = 899
                            self.expression(0)


                        self.state = 902
                        self.match(SolidityParser.T__42)
                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 903
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 904
                        self.match(SolidityParser.T__44)
                        self.state = 905
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 906
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 907
                        self.match(SolidityParser.T__14)
                        self.state = 908
                        self.nameValueList()
                        self.state = 909
                        self.match(SolidityParser.T__16)
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 911
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 912
                        self.match(SolidityParser.T__22)
                        self.state = 913
                        self.functionCallArguments()
                        self.state = 914
                        self.match(SolidityParser.T__23)
                        pass

             
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_primaryExpression)
        try:
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.match(SolidityParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 922
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 923
                self.hexLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 924
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 925
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 926
                self.match(SolidityParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 927
                self.match(SolidityParser.PayableKeyword)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 928
                self.tupleExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 929
                self.typeName(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.expression(0)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 933
                self.match(SolidityParser.T__15)
                self.state = 934
                self.expression(0)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValueList" ):
                return visitor.visitNameValueList(self)
            else:
                return visitor.visitChildren(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.nameValue()
            self.state = 945
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 941
                    self.match(SolidityParser.T__15)
                    self.state = 942
                    self.nameValue() 
                self.state = 947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 948
                self.match(SolidityParser.T__15)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValue" ):
                return visitor.visitNameValue(self)
            else:
                return visitor.visitChildren(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.identifier()
            self.state = 952
            self.match(SolidityParser.T__69)
            self.state = 953
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArguments" ):
                return visitor.visitFunctionCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 963
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                self.match(SolidityParser.T__14)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                    self.state = 956
                    self.nameValueList()


                self.state = 959
                self.match(SolidityParser.T__16)
                pass
            elif token in [6, 14, 23, 24, 25, 30, 31, 38, 42, 44, 46, 50, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 113, 117, 122, 124, 125, 127, 128, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                    self.state = 960
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.expression(0)
            self.state = 966
            self.match(SolidityParser.T__22)
            self.state = 967
            self.functionCallArguments()
            self.state = 968
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyBlock" ):
                return visitor.visitAssemblyBlock(self)
            else:
                return visitor.visitChildren(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(SolidityParser.T__14)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5191542337691500544) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1438678597496733695) != 0):
                self.state = 971
                self.assemblyItem()
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 977
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyItem" ):
                return visitor.visitAssemblyItem(self)
            else:
                return visitor.visitChildren(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyItem)
        try:
            self.state = 996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 979
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 981
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 982
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 983
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 984
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 985
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 986
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 987
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 988
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 989
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 990
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 991
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 992
                self.match(SolidityParser.LeaveKeyword)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 993
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 994
                self.stringLiteral()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 995
                self.hexLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyExpression" ):
                return visitor.visitAssemblyExpression(self)
            else:
                return visitor.visitChildren(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyExpression)
        try:
            self.state = 1001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 998
                self.assemblyCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.assemblyLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1000
                self.assemblyMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyMember" ):
                listener.enterAssemblyMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyMember" ):
                listener.exitAssemblyMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyMember" ):
                return visitor.visitAssemblyMember(self)
            else:
                return visitor.visitChildren(self)




    def assemblyMember(self):

        localctx = SolidityParser.AssemblyMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.identifier()
            self.state = 1004
            self.match(SolidityParser.T__44)
            self.state = 1005
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCall" ):
                return visitor.visitAssemblyCall(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 1007
                self.match(SolidityParser.T__58)
                pass

            elif la_ == 2:
                self.state = 1008
                self.match(SolidityParser.T__43)
                pass

            elif la_ == 3:
                self.state = 1009
                self.match(SolidityParser.T__65)
                pass

            elif la_ == 4:
                self.state = 1010
                self.identifier()
                pass


            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1013
                self.match(SolidityParser.T__22)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5189290262857269248) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1438757762371682303) != 0):
                    self.state = 1014
                    self.assemblyExpression()


                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1017
                    self.match(SolidityParser.T__15)
                    self.state = 1018
                    self.assemblyExpression()
                    self.state = 1023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1024
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLocalDefinition" ):
                return visitor.visitAssemblyLocalDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(SolidityParser.T__87)
            self.state = 1028
            self.assemblyIdentifierOrList()
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 1029
                self.match(SolidityParser.T__88)
                self.state = 1030
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyAssignment" ):
                return visitor.visitAssemblyAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.assemblyIdentifierOrList()
            self.state = 1034
            self.match(SolidityParser.T__88)
            self.state = 1035
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierOrList" ):
                return visitor.visitAssemblyIdentifierOrList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierOrList(self):

        localctx = SolidityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 1044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1038
                self.assemblyMember()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1039
                self.assemblyIdentifierList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1040
                self.match(SolidityParser.T__22)
                self.state = 1041
                self.assemblyIdentifierList()
                self.state = 1042
                self.match(SolidityParser.T__23)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierList" ):
                return visitor.visitAssemblyIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.identifier()
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 1047
                self.match(SolidityParser.T__15)
                self.state = 1048
                self.identifier()
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyStackAssignment" ):
                return visitor.visitAssemblyStackAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.assemblyExpression()
            self.state = 1055
            self.match(SolidityParser.T__89)
            self.state = 1056
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelDefinition" ):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.identifier()
            self.state = 1059
            self.match(SolidityParser.T__69)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblySwitch" ):
                return visitor.visitAssemblySwitch(self)
            else:
                return visitor.visitChildren(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(SolidityParser.T__90)
            self.state = 1062
            self.assemblyExpression()
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==92 or _la==93:
                self.state = 1063
                self.assemblyCase()
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCase" ):
                return visitor.visitAssemblyCase(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_assemblyCase)
        try:
            self.state = 1075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1069
                self.match(SolidityParser.T__91)
                self.state = 1070
                self.assemblyLiteral()
                self.state = 1071
                self.assemblyBlock()
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.match(SolidityParser.T__92)
                self.state = 1074
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionDefinition" ):
                return visitor.visitAssemblyFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(SolidityParser.T__37)
            self.state = 1078
            self.identifier()
            self.state = 1079
            self.match(SolidityParser.T__22)
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0):
                self.state = 1080
                self.assemblyIdentifierList()


            self.state = 1083
            self.match(SolidityParser.T__23)
            self.state = 1085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 1084
                self.assemblyFunctionReturns()


            self.state = 1087
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionReturns" ):
                return visitor.visitAssemblyFunctionReturns(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(SolidityParser.T__93)
            self.state = 1090
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFor" ):
                return visitor.visitAssemblyFor(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(SolidityParser.T__26)
            self.state = 1095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 1093
                self.assemblyBlock()
                pass
            elif token in [14, 25, 44, 50, 59, 62, 66, 95, 102, 103, 104, 106, 113, 117, 124, 125, 127, 128, 129]:
                self.state = 1094
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1097
            self.assemblyExpression()
            self.state = 1100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 1098
                self.assemblyBlock()
                pass
            elif token in [14, 25, 44, 50, 59, 62, 66, 95, 102, 103, 104, 106, 113, 117, 124, 125, 127, 128, 129]:
                self.state = 1099
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1102
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIf" ):
                return visitor.visitAssemblyIf(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(SolidityParser.T__50)
            self.state = 1105
            self.assemblyExpression()
            self.state = 1106
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLiteral" ):
                return visitor.visitAssemblyLiteral(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_assemblyLiteral)
        try:
            self.state = 1113
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.stringLiteral()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self.match(SolidityParser.DecimalNumber)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1110
                self.match(SolidityParser.HexNumber)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1111
                self.hexLiteral()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1112
                self.match(SolidityParser.BooleanLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExpression" ):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1141
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1115
                self.match(SolidityParser.T__22)

                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                    self.state = 1116
                    self.expression(0)


                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1119
                    self.match(SolidityParser.T__15)
                    self.state = 1121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                        self.state = 1120
                        self.expression(0)


                    self.state = 1127
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1128
                self.match(SolidityParser.T__23)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1129
                self.match(SolidityParser.T__41)
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & -72038554396917503) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 533751374123368451) != 0):
                    self.state = 1130
                    self.expression(0)
                    self.state = 1135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==16:
                        self.state = 1131
                        self.match(SolidityParser.T__15)
                        self.state = 1132
                        self.expression(0)
                        self.state = 1137
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1140
                self.match(SolidityParser.T__42)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1144
                self.match(SolidityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def GlobalKeyword(self):
            return self.getToken(SolidityParser.GlobalKeyword, 0)

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4612829510553845760) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 14499971073) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexLiteralFragment)
            else:
                return self.getToken(SolidityParser.HexLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexLiteral" ):
                listener.enterHexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexLiteral" ):
                listener.exitHexLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexLiteral" ):
                return visitor.visitHexLiteral(self)
            else:
                return visitor.visitChildren(self)




    def hexLiteral(self):

        localctx = SolidityParser.HexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_hexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1149
                    self.match(SolidityParser.HexLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1152 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedTypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverrideSpecifier" ):
                return visitor.visitOverrideSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(SolidityParser.T__95)
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1155
                self.match(SolidityParser.T__22)
                self.state = 1156
                self.userDefinedTypeName()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1157
                    self.match(SolidityParser.T__15)
                    self.state = 1158
                    self.userDefinedTypeName()
                    self.state = 1163
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1164
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.StringLiteralFragment)
            else:
                return self.getToken(SolidityParser.StringLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1168
                    self.match(SolidityParser.StringLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1171 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[38] = self.typeName_sempred
        self._predicates[70] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 21)
         




