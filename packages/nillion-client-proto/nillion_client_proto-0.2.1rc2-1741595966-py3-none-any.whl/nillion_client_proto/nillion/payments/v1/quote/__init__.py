# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nillion/payments/v1/quote.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf

from ....preprocessing.v1 import (
    element as ___preprocessing_v1_element__,
    material as ___preprocessing_v1_material__,
)


@dataclass(eq=False, repr=False)
class PriceQuoteRequest(betterproto.Message):
    """A price quote request."""

    pool_status: "betterproto_lib_google_protobuf.Empty" = betterproto.message_field(
        1, group="operation"
    )
    """A pool status operation."""

    store_program: "StoreProgram" = betterproto.message_field(2, group="operation")
    """A store program operation."""

    retrieve_values: "RetrieveValues" = betterproto.message_field(3, group="operation")
    """A retrieve values operation."""

    retrieve_permissions: "RetrievePermissions" = betterproto.message_field(
        4, group="operation"
    )
    """A retrieve permissions operation."""

    store_values: "StoreValues" = betterproto.message_field(5, group="operation")
    """A store values operation."""

    invoke_compute: "InvokeCompute" = betterproto.message_field(6, group="operation")
    """A invoke compute operation."""

    overwrite_permissions: "OverwritePermissions" = betterproto.message_field(
        7, group="operation"
    )
    """An overwrite permissions operation."""

    update_permissions: "UpdatePermissions" = betterproto.message_field(
        8, group="operation"
    )
    """An update permissions operation."""


@dataclass(eq=False, repr=False)
class SignedQuote(betterproto.Message):
    """A quote signed by the node that generated it."""

    quote: bytes = betterproto.bytes_field(1)
    """The serialized `PriceQuote`."""

    signature: bytes = betterproto.bytes_field(2)
    """The signature for this quote."""


@dataclass(eq=False, repr=False)
class PriceQuote(betterproto.Message):
    """A price quote."""

    nonce: bytes = betterproto.bytes_field(1)
    """A nonce that uniquely identifies this quote."""

    fees: "QuoteFees" = betterproto.message_field(2)
    """The fees for this quote."""

    request: "PriceQuoteRequest" = betterproto.message_field(3)
    """The request that this quote is for."""

    expires_at: datetime = betterproto.message_field(4)
    """The point in time at which this quote is no longer valid."""

    preprocessing_requirements: List["PreprocessingRequirement"] = (
        betterproto.message_field(5)
    )
    """The preprocessing requirements for this operation."""

    auxiliary_material_requirements: List["AuxiliaryMaterialRequirement"] = (
        betterproto.message_field(6)
    )
    """The auxiliary material requirements for this operation."""


@dataclass(eq=False, repr=False)
class QuoteFees(betterproto.Message):
    """
    The fees associated with a quote.

     All fees are in "unil" units.
    """

    tokens: int = betterproto.uint64_field(1)
    """The fee in tokens"""

    credits: int = betterproto.uint64_field(7)
    """The fee in credits"""


@dataclass(eq=False, repr=False)
class StoreProgram(betterproto.Message):
    """A store program operation."""

    metadata: "ProgramMetadata" = betterproto.message_field(1)
    """The program's metadata."""

    contents_sha256: bytes = betterproto.bytes_field(2)
    """A sha256 hash of the compiled program."""

    name: str = betterproto.string_field(3)
    """The program's name."""


@dataclass(eq=False, repr=False)
class ProgramMetadata(betterproto.Message):
    """The metadata about a program being stored."""

    program_size: int = betterproto.uint64_field(1)
    """The size of the program in bytes."""

    memory_size: int = betterproto.uint64_field(2)
    """The amount of memory needed by the program."""

    instruction_count: int = betterproto.uint64_field(3)
    """The total number of instructions in the program."""

    instructions: Dict[str, int] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_UINT64
    )
    """The number of instructions per type."""

    preprocessing_requirements: List["PreprocessingRequirement"] = (
        betterproto.message_field(5)
    )
    """The preprocessing requirements."""

    auxiliary_material_requirements: List["AuxiliaryMaterialRequirement"] = (
        betterproto.message_field(6)
    )
    """The auxiliary material requirements."""


@dataclass(eq=False, repr=False)
class PreprocessingRequirement(betterproto.Message):
    """The number of preprocessing elements required for a program."""

    element: "___preprocessing_v1_element__.PreprocessingElement" = (
        betterproto.enum_field(1)
    )
    """The preprocessing element."""

    count: int = betterproto.uint64_field(2)
    """The total number of elements of this type needed."""


@dataclass(eq=False, repr=False)
class AuxiliaryMaterialRequirement(betterproto.Message):
    """The auxiliary material required for a program."""

    material: "___preprocessing_v1_material__.AuxiliaryMaterial" = (
        betterproto.enum_field(1)
    )
    """The preprocessing element."""

    version: int = betterproto.uint32_field(2)
    """
    The version needed.
    
     This field is used internally and should be ignored by the client.
    """


@dataclass(eq=False, repr=False)
class RetrieveValues(betterproto.Message):
    """A retrieve values operation."""

    values_id: bytes = betterproto.bytes_field(1)
    """The identifier to be retrieved."""


@dataclass(eq=False, repr=False)
class RetrievePermissions(betterproto.Message):
    """A retrieve permissions operation."""

    values_id: bytes = betterproto.bytes_field(1)
    """The identifier of the values entity to be retrieved."""


@dataclass(eq=False, repr=False)
class OverwritePermissions(betterproto.Message):
    """An overwrite permissions operation."""

    values_id: bytes = betterproto.bytes_field(1)
    """
    The identifier of the values entity whose permissions are to be overwritten.
    """


@dataclass(eq=False, repr=False)
class UpdatePermissions(betterproto.Message):
    """An update permissions operation."""

    values_id: bytes = betterproto.bytes_field(1)
    """
    The identifier of the values entity whose permissions are to be updated.
    """


@dataclass(eq=False, repr=False)
class StoreValues(betterproto.Message):
    """A store values operation."""

    secret_shared_count: int = betterproto.uint64_field(2)
    """
    The number of secret shared secrets being stored.
    
     This is the number of secrets in secret shared form being stored, not the total number of shares. e.g.
     for a 5 node network a single secret shared secret requires value `1` here rather than `5`.
    """

    public_values_count: int = betterproto.uint64_field(3)
    """The number of public values being stored."""

    ttl_days: Optional[int] = betterproto.uint32_field(4, optional=True)
    """The number of days to persist these secrets for."""

    payload_size: int = betterproto.uint64_field(5)
    """The size of the payload to be stored."""

    ecdsa_private_key_shares_count: int = betterproto.uint64_field(6)
    """The size of the payload to be stored."""

    ecdsa_signature_shares_count: int = betterproto.uint64_field(7)
    """The size of the payload to be stored."""


@dataclass(eq=False, repr=False)
class InvokeCompute(betterproto.Message):
    """An invoke compute operation."""

    program_id: str = betterproto.string_field(1)
    """The program to be invoked."""

    values_payload_size: int = betterproto.uint64_field(2)
    """
    The size of the compute time values being sent as part of this operation.
    """
