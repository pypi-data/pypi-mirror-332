# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nillion/membership/v1/service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from . import (
    cluster,
    version,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class MembershipStub(betterproto.ServiceStub):
    async def cluster(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "cluster.Cluster":
        return await self._unary_unary(
            "/nillion.membership.v1.Membership/Cluster",
            betterproto_lib_google_protobuf_empty,
            cluster.Cluster,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def node_version(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "version.NodeVersion":
        return await self._unary_unary(
            "/nillion.membership.v1.Membership/NodeVersion",
            betterproto_lib_google_protobuf_empty,
            version.NodeVersion,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MembershipBase(ServiceBase):
    async def cluster(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "cluster.Cluster":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def node_version(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "version.NodeVersion":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_cluster(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, cluster.Cluster]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cluster(request)
        await stream.send_message(response)

    async def __rpc_node_version(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, version.NodeVersion]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.node_version(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nillion.membership.v1.Membership/Cluster": grpclib.const.Handler(
                self.__rpc_cluster,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                cluster.Cluster,
            ),
            "/nillion.membership.v1.Membership/NodeVersion": grpclib.const.Handler(
                self.__rpc_node_version,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                version.NodeVersion,
            ),
        }
