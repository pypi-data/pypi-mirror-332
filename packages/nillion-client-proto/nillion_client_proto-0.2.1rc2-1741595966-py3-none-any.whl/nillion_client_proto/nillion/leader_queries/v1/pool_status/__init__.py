# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nillion/leader_queries/v1/pool_status.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import List

import betterproto

from ....payments.v1 import receipt as ___payments_v1_receipt__
from ....preprocessing.v1 import element as ___preprocessing_v1_element__


@dataclass(eq=False, repr=False)
class PoolStatusRequest(betterproto.Message):
    """A request to get the preprocessing pool status."""

    signed_receipt: "___payments_v1_receipt__.SignedReceipt" = (
        betterproto.message_field(1)
    )
    """
    The receipt that proves this operation was paid for.
    
     The receipt must be for a `PoolStatus` operation.
    """


@dataclass(eq=False, repr=False)
class PoolStatusResponse(betterproto.Message):
    """
    A response for the request to get the status of the preprocessing pool.
    """

    offsets: List["PreprocessingOffsets"] = betterproto.message_field(1)
    """The offset ranges for each preprocessing element."""

    preprocessing_active: bool = betterproto.bool_field(2)
    """
    Whether preprocessing is active (at least one element type is being generated).
    """

    auxiliary_material_available: bool = betterproto.bool_field(3)
    """Whether auxiliary material has been generated."""


@dataclass(eq=False, repr=False)
class PreprocessingOffsets(betterproto.Message):
    """
    The offsets for a preprocessing element.

     This is closed-open set, e.g. [start, end)
    """

    element: "___preprocessing_v1_element__.PreprocessingElement" = (
        betterproto.enum_field(1)
    )
    """The preprocessing element."""

    start: int = betterproto.uint64_field(2)
    """The first offset in the range."""

    end: int = betterproto.uint64_field(3)
    """The one-past-the-end offset in this range."""
