# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nillion/programs/v1/service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from . import store


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ProgramsStub(betterproto.ServiceStub):
    async def store_program(
        self,
        store_store_program_request: "store.StoreProgramRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "store.StoreProgramResponse":
        return await self._unary_unary(
            "/nillion.programs.v1.Programs/StoreProgram",
            store_store_program_request,
            store.StoreProgramResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ProgramsBase(ServiceBase):
    async def store_program(
        self, store_store_program_request: "store.StoreProgramRequest"
    ) -> "store.StoreProgramResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_store_program(
        self,
        stream: "grpclib.server.Stream[store.StoreProgramRequest, store.StoreProgramResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.store_program(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nillion.programs.v1.Programs/StoreProgram": grpclib.const.Handler(
                self.__rpc_store_program,
                grpclib.const.Cardinality.UNARY_UNARY,
                store.StoreProgramRequest,
                store.StoreProgramResponse,
            ),
        }
