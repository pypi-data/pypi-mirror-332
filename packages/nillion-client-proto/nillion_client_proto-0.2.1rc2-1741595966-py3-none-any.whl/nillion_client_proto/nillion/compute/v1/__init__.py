# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nillion/compute/v1/service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    Optional,
    Union,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from . import (
    invoke,
    retrieve,
    stream,
)


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ComputeStub(betterproto.ServiceStub):
    async def invoke_compute(
        self,
        invoke_invoke_compute_request: "invoke.InvokeComputeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "invoke.InvokeComputeResponse":
        return await self._unary_unary(
            "/nillion.compute.v1.Compute/InvokeCompute",
            invoke_invoke_compute_request,
            invoke.InvokeComputeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stream_compute(
        self,
        stream_compute_stream_message_iterator: Union[
            AsyncIterable[stream.ComputeStreamMessage],
            Iterable[stream.ComputeStreamMessage],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._stream_unary(
            "/nillion.compute.v1.Compute/StreamCompute",
            stream_compute_stream_message_iterator,
            stream.ComputeStreamMessage,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def retrieve_results(
        self,
        retrieve_retrieve_results_request: "retrieve.RetrieveResultsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> AsyncIterator[retrieve.RetrieveResultsResponse]:
        async for response in self._unary_stream(
            "/nillion.compute.v1.Compute/RetrieveResults",
            retrieve_retrieve_results_request,
            retrieve.RetrieveResultsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class ComputeBase(ServiceBase):
    async def invoke_compute(
        self, invoke_invoke_compute_request: "invoke.InvokeComputeRequest"
    ) -> "invoke.InvokeComputeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stream_compute(
        self,
        stream_compute_stream_message_iterator: AsyncIterator[
            stream.ComputeStreamMessage
        ],
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def retrieve_results(
        self, retrieve_retrieve_results_request: "retrieve.RetrieveResultsRequest"
    ) -> AsyncIterator[retrieve.RetrieveResultsResponse]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield retrieve.RetrieveResultsResponse()

    async def __rpc_invoke_compute(
        self,
        stream: "grpclib.server.Stream[invoke.InvokeComputeRequest, invoke.InvokeComputeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.invoke_compute(request)
        await stream.send_message(response)

    async def __rpc_stream_compute(
        self,
        stream: "grpclib.server.Stream[stream.ComputeStreamMessage, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = stream.__aiter__()
        response = await self.stream_compute(request)
        await stream.send_message(response)

    async def __rpc_retrieve_results(
        self,
        stream: "grpclib.server.Stream[retrieve.RetrieveResultsRequest, retrieve.RetrieveResultsResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.retrieve_results,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nillion.compute.v1.Compute/InvokeCompute": grpclib.const.Handler(
                self.__rpc_invoke_compute,
                grpclib.const.Cardinality.UNARY_UNARY,
                invoke.InvokeComputeRequest,
                invoke.InvokeComputeResponse,
            ),
            "/nillion.compute.v1.Compute/StreamCompute": grpclib.const.Handler(
                self.__rpc_stream_compute,
                grpclib.const.Cardinality.STREAM_UNARY,
                stream.ComputeStreamMessage,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/nillion.compute.v1.Compute/RetrieveResults": grpclib.const.Handler(
                self.__rpc_retrieve_results,
                grpclib.const.Cardinality.UNARY_STREAM,
                retrieve.RetrieveResultsRequest,
                retrieve.RetrieveResultsResponse,
            ),
        }
