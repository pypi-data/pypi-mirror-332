Metadata-Version: 2.3
Name: nanodoc
Version: 0.1.0
Summary: 
Author: adebert
Author-email: debert@gmail.com
Requires-Python: >=3.9
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Description-Content-Type: text/markdown

# Nanodoc

Nanodoc is a minimalist document bundler designed for small-scale documentation
needs like hints, prompts, or reminders. It combines multiple text files into a
single document with neat formatting.

## Features

- Combines multiple text files into a single document
- Adds clear title separators between pages
- Supports optional line numbering (per file or global)
- Can generate a table of contents
- Flexible file selection methods
- Customizable header styles and sequence numbering

## Usage

Basic usage:

```bash
nanodoc file1.txt file2.txt
```

With line numbering and TOC:

```bash
nanodoc -n file1.txt file2.txt              # Per-file line numbering
nanodoc -nn file1.txt file2.txt             # Global line numbering
nanodoc -nn --toc file1.txt file2.txt       # Global numbering with TOC
```

## File Selection Options

Nanodoc is flexible in how you specify the files to bundle:

1. **Individual files**: Provide file paths as arguments

   ```bash
   nanodoc welcome.txt guide.txt reference.txt
   ```

2. **Directories**: Include all .txt and .md files in a directory

   ```bash
   nanodoc docs/
   ```

3. **Bundle files**: Create a text file containing a list of file paths

   ```bash
   nanodoc my-bundle.txt
   ```

   Where my-bundle.txt contains:

   ```text
   intro.txt
   chapter1.md
   appendix.txt
   ```

## Command Line Options

- `-v, --verbose`: Enable verbose output with detailed logging
- `-n`: Add per-file line numbering (01, 02, etc.)
- `-nn`: Add global line numbering (001, 002, etc.)
- `--toc`: Generate a table of contents at the beginning
- `--no-header`: Hide file headers completely
- `--header-seq=TYPE`: Add sequence numbers to headers (numerical, letter, or
  roman)
- `--header-style=STYLE`: Change header style (nice [default], filename, or path)
- `-h, --help`: Display help information

## Example Output

```text
########################## welcome.txt #######################################
This is the content of welcome.txt
With multiple lines
Of helpful information

########################## guide.txt ########################################
The guide contains more detailed information
About how to use the application
With step-by-step instructions
```

With line numbering (-n):

```text
########################## welcome.txt #######################################
   1: This is the content of welcome.txt
   2: With multiple lines
   3: Of helpful information

########################## guide.txt ########################################
   1: The guide contains more detailed information
   2: About how to use the application
   3: With step-by-step instructions
```

### Header Styles

Nanodoc offers several header style options (with "nice" being the default):

**Filename style:**

```text
welcome.txt

This is the content of welcome.txt
```

**Path style:**

```text
/path/to/welcome.txt

This is the content of welcome.txt
```

**Nice style (default):**

```text
Welcome (welcome.txt)

This is the content of welcome.txt
```

These styles can be combined with sequence numbering
(--header-seq=numerical|letter|roman) to create headers like
`i. Welcome (welcome.txt)`.

The table of contents entries will use the same style as the headers, providing a
consistent look throughout the document.

## Installation

```bash
pip install nanodoc
# or
git clone https://github.com/yourusername/nanodoc.git
cd nanodoc
pip install -e .
```

## Contributing

Contributions are welcome! Feel free to open issues or submit pull requests.

## License

MIT License

