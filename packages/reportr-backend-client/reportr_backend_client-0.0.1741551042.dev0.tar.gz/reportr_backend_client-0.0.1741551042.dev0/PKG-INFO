Metadata-Version: 2.1
Name: reportr_backend_client
Version: 0.0.1741551042.dev0
Summary: backend
Home-page: https://github.com/GIT_USER_ID/GIT_REPO_ID
License: NoLicense
Keywords: OpenAPI,OpenAPI-Generator,backend
Author: OpenAPI Generator Community
Author-email: team@openapitools.org
Requires-Python: >=3.8,<4.0
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: pydantic (>=2)
Requires-Dist: python-dateutil (>=2.8.2)
Requires-Dist: typing-extensions (>=4.7.1)
Requires-Dist: urllib3 (>=1.25.3,<3.0.0)
Project-URL: Repository, https://github.com/GIT_USER_ID/GIT_REPO_ID
Description-Content-Type: text/markdown

# reportr-backend-client
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: 0.1.0
- Package version: 1.0.0
- Generator version: 7.13.0-SNAPSHOT
- Build package: org.openapitools.codegen.languages.PythonClientCodegen

## Requirements.

Python 3.8+

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)

Then import the package:
```python
import reportr_backend_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import reportr_backend_client
```

### Tests

Execute `pytest` to run the tests.

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python

import reportr_backend_client
from reportr_backend_client.rest import ApiException
from pprint import pprint

# Defining the host is optional and defaults to http://localhost
# See configuration.py for a list of all supported configuration parameters.
configuration = reportr_backend_client.Configuration(
    host = "http://localhost"
)

# The client must configure the authentication and authorization parameters
# in accordance with the API server security policy.
# Examples for each auth method are provided below, use the example that
# satisfies your auth use case.

# Configure Bearer authorization: HTTPBearer
configuration = reportr_backend_client.Configuration(
    access_token = os.environ["BEARER_TOKEN"]
)


# Enter a context with an instance of the API client
with reportr_backend_client.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = reportr_backend_client.EventsApi(api_client)
    user_id = 'user_id_example' # str |  (optional)
    news_id = 56 # int |  (optional)
    event_type = 'event_type_example' # str |  (optional)
    page = 1 # int |  (optional) (default to 1)
    page_size = 20 # int |  (optional) (default to 20)

    try:
        # Get Events
        api_response = api_instance.get_events(user_id=user_id, news_id=news_id, event_type=event_type, page=page, page_size=page_size)
        print("The response of EventsApi->get_events:\n")
        pprint(api_response)
    except ApiException as e:
        print("Exception when calling EventsApi->get_events: %s\n" % e)

```

## Documentation for API Endpoints

All URIs are relative to *http://localhost*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*EventsApi* | [**get_events**](docs/EventsApi.md#get_events) | **GET** /events/ | Get Events
*EventsApi* | [**insert_event**](docs/EventsApi.md#insert_event) | **POST** /events/ | Insert Event
*NewsApi* | [**create_news**](docs/NewsApi.md#create_news) | **POST** /news/ | Create News
*NewsApi* | [**get_news**](docs/NewsApi.md#get_news) | **GET** /news/ | Get News
*NewsApi* | [**get_news_by_id**](docs/NewsApi.md#get_news_by_id) | **GET** /news/{news_id} | Get News By Id
*StatusApi* | [**get_health**](docs/StatusApi.md#get_health) | **GET** /health | Health
*StatusApi* | [**get_readiness**](docs/StatusApi.md#get_readiness) | **GET** /ready | Ready


## Documentation For Models

 - [EventCreate](docs/EventCreate.md)
 - [EventCreated](docs/EventCreated.md)
 - [EventRead](docs/EventRead.md)
 - [HTTPValidationError](docs/HTTPValidationError.md)
 - [Health](docs/Health.md)
 - [NewsItem](docs/NewsItem.md)
 - [NewsItemCreated](docs/NewsItemCreated.md)
 - [PaginatedResponseEventRead](docs/PaginatedResponseEventRead.md)
 - [PaginatedResponseNewsItem](docs/PaginatedResponseNewsItem.md)
 - [Readiness](docs/Readiness.md)
 - [TimeFilter](docs/TimeFilter.md)
 - [ValidationError](docs/ValidationError.md)
 - [ValidationErrorLocInner](docs/ValidationErrorLocInner.md)


<a id="documentation-for-authorization"></a>
## Documentation For Authorization


Authentication schemes defined for the API:
<a id="HTTPBearer"></a>
### HTTPBearer

- **Type**: Bearer authentication


## Author





