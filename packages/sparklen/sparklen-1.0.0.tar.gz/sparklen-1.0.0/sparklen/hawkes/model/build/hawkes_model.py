# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _hawkes_model
else:
    import _hawkes_model

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hawkes_model.delete_SwigPyIterator

    def value(self):
        return _hawkes_model.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hawkes_model.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hawkes_model.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hawkes_model.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hawkes_model.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hawkes_model.SwigPyIterator_copy(self)

    def next(self):
        return _hawkes_model.SwigPyIterator_next(self)

    def __next__(self):
        return _hawkes_model.SwigPyIterator___next__(self)

    def previous(self):
        return _hawkes_model.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hawkes_model.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hawkes_model.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hawkes_model.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hawkes_model.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hawkes_model.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hawkes_model.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hawkes_model.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _hawkes_model:
_hawkes_model.SwigPyIterator_swigregister(SwigPyIterator)
class ModelHawkesExpLeastSquaresSingle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hawkes_model.ModelHawkesExpLeastSquaresSingle_swiginit(self, _hawkes_model.new_ModelHawkesExpLeastSquaresSingle(*args))

    def get_n_components(self):
        return _hawkes_model.ModelHawkesExpLeastSquaresSingle_get_n_components(self)

    def compute_loss(self, jump_times, end_time, decay, theta):
        return _hawkes_model.ModelHawkesExpLeastSquaresSingle_compute_loss(self, jump_times, end_time, decay, theta)

    def compute_grad(self, jump_times, end_time, decay, theta):
        return _hawkes_model.ModelHawkesExpLeastSquaresSingle_compute_grad(self, jump_times, end_time, decay, theta)

    def compute_hessian(self, jump_times, end_time, decay):
        return _hawkes_model.ModelHawkesExpLeastSquaresSingle_compute_hessian(self, jump_times, end_time, decay)
    __swig_destroy__ = _hawkes_model.delete_ModelHawkesExpLeastSquaresSingle

# Register ModelHawkesExpLeastSquaresSingle in _hawkes_model:
_hawkes_model.ModelHawkesExpLeastSquaresSingle_swigregister(ModelHawkesExpLeastSquaresSingle)
class ModelHawkesExpLeastSquares(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hawkes_model.ModelHawkesExpLeastSquares_swiginit(self, _hawkes_model.new_ModelHawkesExpLeastSquares(*args))

    def compute_averaged_loss(self, list_jump_times, end_time, decay, theta):
        return _hawkes_model.ModelHawkesExpLeastSquares_compute_averaged_loss(self, list_jump_times, end_time, decay, theta)

    def compute_averaged_grad(self, list_jump_times, end_time, decay, theta):
        return _hawkes_model.ModelHawkesExpLeastSquares_compute_averaged_grad(self, list_jump_times, end_time, decay, theta)

    def compute_averaged_hessian(self, list_jump_times, end_time, decay):
        return _hawkes_model.ModelHawkesExpLeastSquares_compute_averaged_hessian(self, list_jump_times, end_time, decay)
    __swig_destroy__ = _hawkes_model.delete_ModelHawkesExpLeastSquares

# Register ModelHawkesExpLeastSquares in _hawkes_model:
_hawkes_model.ModelHawkesExpLeastSquares_swigregister(ModelHawkesExpLeastSquares)
class ModelHawkesExpLogLikelihoodSingle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hawkes_model.ModelHawkesExpLogLikelihoodSingle_swiginit(self, _hawkes_model.new_ModelHawkesExpLogLikelihoodSingle(*args))

    def get_n_components(self):
        return _hawkes_model.ModelHawkesExpLogLikelihoodSingle_get_n_components(self)

    def compute_loss(self, jump_times, end_time, decay, theta, neg):
        return _hawkes_model.ModelHawkesExpLogLikelihoodSingle_compute_loss(self, jump_times, end_time, decay, theta, neg)

    def compute_grad(self, jump_times, end_time, decay, theta, neg):
        return _hawkes_model.ModelHawkesExpLogLikelihoodSingle_compute_grad(self, jump_times, end_time, decay, theta, neg)
    __swig_destroy__ = _hawkes_model.delete_ModelHawkesExpLogLikelihoodSingle

# Register ModelHawkesExpLogLikelihoodSingle in _hawkes_model:
_hawkes_model.ModelHawkesExpLogLikelihoodSingle_swigregister(ModelHawkesExpLogLikelihoodSingle)
class ModelHawkesExpLogLikelihood(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _hawkes_model.ModelHawkesExpLogLikelihood_swiginit(self, _hawkes_model.new_ModelHawkesExpLogLikelihood(*args))

    def compute_averaged_loss(self, list_jump_times, end_time, decay, theta, neg):
        return _hawkes_model.ModelHawkesExpLogLikelihood_compute_averaged_loss(self, list_jump_times, end_time, decay, theta, neg)

    def compute_averaged_grad(self, list_jump_times, end_time, decay, theta, neg):
        return _hawkes_model.ModelHawkesExpLogLikelihood_compute_averaged_grad(self, list_jump_times, end_time, decay, theta, neg)
    __swig_destroy__ = _hawkes_model.delete_ModelHawkesExpLogLikelihood

# Register ModelHawkesExpLogLikelihood in _hawkes_model:
_hawkes_model.ModelHawkesExpLogLikelihood_swigregister(ModelHawkesExpLogLikelihood)

