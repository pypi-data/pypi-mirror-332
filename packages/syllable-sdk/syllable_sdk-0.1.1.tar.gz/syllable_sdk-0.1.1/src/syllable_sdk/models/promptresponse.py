"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .promptllmconfig import PromptLlmConfig, PromptLlmConfigTypedDict
from pydantic import model_serializer
from syllable_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class PromptResponseTypedDict(TypedDict):
    r"""A prompt defines the behavior of an agent by delivering instructions to the LLM about how the
    agent should behave. A prompt can be linked to one or more agents. A prompt can also be linked to
    tools to allow an agent using it to use those tools.
    """

    name: str
    r"""The prompt name"""
    type: str
    r"""The type of the prompt"""
    llm_config: PromptLlmConfigTypedDict
    id: int
    r"""The prompt ID"""
    last_updated: Nullable[str]
    r"""The last updated date of the prompt"""
    description: NotRequired[Nullable[str]]
    r"""The description of the prompt"""
    context: NotRequired[Nullable[str]]
    r"""The prompt text"""
    tools: NotRequired[List[str]]
    r"""Names of the tools to which the prompt has access"""
    edit_comments: NotRequired[Nullable[str]]
    r"""The comments for the most recent edit to the prompt"""
    last_updated_by: NotRequired[Nullable[str]]
    r"""Email address of the user who most recently updated the prompt"""
    agent_count: NotRequired[Nullable[int]]
    r"""The number of agents using the prompt"""


class PromptResponse(BaseModel):
    r"""A prompt defines the behavior of an agent by delivering instructions to the LLM about how the
    agent should behave. A prompt can be linked to one or more agents. A prompt can also be linked to
    tools to allow an agent using it to use those tools.
    """

    name: str
    r"""The prompt name"""

    type: str
    r"""The type of the prompt"""

    llm_config: PromptLlmConfig

    id: int
    r"""The prompt ID"""

    last_updated: Nullable[str]
    r"""The last updated date of the prompt"""

    description: OptionalNullable[str] = UNSET
    r"""The description of the prompt"""

    context: OptionalNullable[str] = UNSET
    r"""The prompt text"""

    tools: Optional[List[str]] = None
    r"""Names of the tools to which the prompt has access"""

    edit_comments: OptionalNullable[str] = UNSET
    r"""The comments for the most recent edit to the prompt"""

    last_updated_by: OptionalNullable[str] = UNSET
    r"""Email address of the user who most recently updated the prompt"""

    agent_count: OptionalNullable[int] = UNSET
    r"""The number of agents using the prompt"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "context",
            "tools",
            "edit_comments",
            "last_updated_by",
            "agent_count",
        ]
        nullable_fields = [
            "last_updated",
            "description",
            "context",
            "edit_comments",
            "last_updated_by",
            "agent_count",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
