[project]
name = "git-draft"
description = "Version-controlled code assistant"
authors = [{name="Matthieu Monsch", email="mtth@apache.org"}]
license = "MIT"
readme = "README.md"
dynamic = ["version"]
requires-python = ">=3.12"
dependencies = [
  "gitpython (>=3.1.44,<4)",
  "jinja2 (>=3.1.5,<4.0.0)",
  "xdg-base-dirs (>=6.0.2,<7.0.0)",
]

[project.optional-dependencies]
openai = ["openai (>=1.64.0,<2)"]

[project.scripts]
git-draft = "git_draft.__main__:main"

[project.urls]
repository = "https://github.com/mtth/git-draft"
documentation = "https://mtth.github.io/git-draft"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Poetry

[tool.poetry]
version = "0.20.1" # Set programmatically
packages = [{include="git_draft", from="src"}]

[tool.poetry.dependencies]
python = ">=3.12,<4"

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
coverage = "^7.4.4"
flake8 = "^7.0.0"
flake8-pyproject = "^1.2.3"
isort = "^6.0.1"
mypy = "^1.2.0"
poethepoet = "^0.25.0"
pytest = "^7.1.2"

# Poe

[tool.poe.tasks.fix]
help = "format source code"
sequence = [
  {cmd="isort ${args}"},
  {cmd="black ${args}"},
]
args = [
  {name="args", help="target folders", positional=true, multiple=true, default="src tests"},
]

[tool.poe.tasks.lint]
help = "lint source code"
sequence = [
  {cmd="isort --check ${args}"},
  {cmd="black --check --quiet ${args}"},
  {cmd="flake8 ${args}"},
  {cmd="mypy ${args}"},
]
args = [
  {name="args", help="target folders", positional=true, multiple=true, default="src tests"},
]

[tool.poe.tasks.test]
help = "run tests with coverage"
sequence = [
  {cmd="coverage run"},
  {cmd="coverage report"},
]

# Other tools

[tool.black]
line-length = 79
include = '\.py$'

[tool.coverage.run]
branch = true
command_line = "-m pytest"
relative_files = true

[tool.coverage.report]
include = ["src/**/*.py"]
show_missing = true

[tool.flake8]
ignore = ["E203", "E501", "E704", "W503"]

[tool.isort]
profile = "black"
force_sort_within_sections = true

[tool.mypy]
disable_error_code = "import-untyped"

[tool.pytest.ini_options]
log_level = "DEBUG"
