Metadata-Version: 2.1
Name: juice-scheduler
Version: 0.0.1
Summary: JUICE Scheduler is a Python package that provides a library and command line tools to support the JUICE mission science planning.
Home-page: https://juicesoc.esac.esa.int/data/juice-scheduler
License: MIT
Author: JUICE SOC Team
Author-email: juice_soc@cosmos.esa.int
Requires-Python: >=3.8.1,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.8
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Typing :: Typed
Requires-Dist: portion (>=2.6.0,<3.0.0)
Requires-Dist: pytz (>=2025.1,<2026.0)
Project-URL: Documentation, https://juicesoc.esac.esa.int/data/juice-scheduler
Project-URL: Repository, https://juigitlab.esac.esa.int/core-system/uplink/juice-scheduler
Description-Content-Type: text/markdown

# juice-scheduler

[![PyPI](https://img.shields.io/pypi/v/juice-scheduler?style=flat-square)](https://pypi.python.org/pypi/juice-scheduler/)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/juice-scheduler?style=flat-square)](https://pypi.python.org/pypi/juice-scheduler/)
[![PyPI - License](https://img.shields.io/pypi/l/juice-scheduler?style=flat-square)](https://pypi.python.org/pypi/juice-scheduler/)
[![Coookiecutter - Wolt](https://img.shields.io/badge/cookiecutter-Wolt-00c2e8?style=flat-square&logo=cookiecutter&logoColor=D4AA00&link=https://github.com/woltapp/wolt-python-package-cookiecutter)](https://github.com/woltapp/wolt-python-package-cookiecutter)


---

**Documentation**: [https://juicesoc.esac.esa.int/data/juice-scheduler](https://juicesoc.esac.esa.int/data/juice-scheduler)

**Source Code**: [https://juigitlab.esac.esa.int/core-system/uplink/juice-scheduler](https://juigitlab.esac.esa.int/core-system/uplink/juice-scheduler)

**PyPI**: [https://pypi.org/project/juice-scheduler/](https://pypi.org/project/juice-scheduler/)

---

JUICE Scheduler is a Python package that provides a library and command line tools to support the JUICE mission science planning.

## Installation

```sh
pip install juice-scheduler
```

## Development

* Clone this repository
* Requirements:
  * [Poetry](https://python-poetry.org/)
  * Python 3.8+
* Create a virtual environment and install the dependencies

```sh
poetry install
```

* Activate the virtual environment

```sh
poetry shell
```

### Testing

```sh
pytest
```

### Documentation

The documentation is automatically generated from the content of the [docs directory](https://github.com//juice-scheduler/tree/master/docs) and from the docstrings
 of the public signatures of the source code. The documentation is updated and published as a [Github Pages page](https://pages.github.com/) automatically as part each release.

### Releasing

Trigger the [Draft release workflow](https://github.com//juice-scheduler/actions/workflows/draft_release.yml)
(press _Run workflow_). This will update the changelog & version and create a GitHub release which is in _Draft_ state.

Find the draft release from the
[GitHub releases](https://github.com//juice-scheduler/releases) and publish it. When
 a release is published, it'll trigger [release](https://github.com//juice-scheduler/blob/master/.github/workflows/release.yml) workflow which creates PyPI
 release and deploys updated documentation.

### Pre-commit

Pre-commit hooks run all the auto-formatting (`ruff format`), linters (e.g. `ruff` and `mypy`), and other quality
 checks to make sure the changeset is in good shape before a commit/push happens.

You can install the hooks with (runs for each commit):

```sh
pre-commit install
```

Or if you want them to run only for each push:

```sh
pre-commit install -t pre-push
```

Or if you want e.g. want to run all checks manually for all files:

```sh
pre-commit run --all-files
```

---

This project was generated using the [wolt-python-package-cookiecutter](https://github.com/woltapp/wolt-python-package-cookiecutter) template.

