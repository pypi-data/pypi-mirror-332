from typing import Any, Optional

from .base import Tabu


class TabuSearchParameters(Tabu):
    """
    Tabu Search is a heuristic optimization method that works with the help of a tabu list.
    Initially, random states are chosen in the solution landscape.
    Afterwards, an iterative search for energetically better states in the neighborhood is started from these states.
    According to a tabu strategy, states are added to the tabu list that are not allowed to be selected as successor states for a tabu duration.
    The tabu search ends as soon as there are no better successor states in the neighborhood.
    The resulting state is therefore the solution to the problem.

    Parameters
    ----------
    num_reads: Optional[int]
        Number of reads. Each read is generated by one run of the tabu algorithm. If
        `num_reads` is not explicitly given, it is selected to match the number of
        initial states given. If initial states are not provided, only one read is
        performed.
    tenure: Optional[int]
        Tabu tenure, which is the length of the tabu list, or number of recently
        explored solutions kept in memory. Default is a quarter of the number of problem
        variables up to a maximum value of 20.
    timeout: float
        Maximum running time per read in milliseconds.
    initial_states_generator: Literal['none', 'tile', 'random']
        Defines the expansion of `initial_states` if fewer than `num_reads` are
        specified:
        'none': if the number of initial states specified is smaller than `num_reads`,
        raises ``ValueError``.
        'tile': reuses the specified initial states if fewer than `num_reads` or
        truncates if greater.
        'random': expands the specified initial states with randomly generated states if
        fewer than `num_reads` or truncates if greater.
    initial_states: Optional[Any]
        One or more samples, each defining an initial state for all the problem
        variables. Initial states are given one per read, but if fewer than `num_reads`
        initial states are defined, additional values are generated as specified by
        `initial_states_generator`.
    seed: Optional[int]
        32-bit unsigned integer seed to use for the PRNG. If the `timeout` parameter is
        not None, results from the same seed may not be identical between runs due to
        finite clock resolution.
    num_restarts: int
        Maximum number of tabu search restarts per read. Setting this value to zero
        results in a simple tabu search.
    energy_threshold: Optional[float]
        Terminate when an energy lower than or equal to `energy_threshold` is found.
    coefficient_z_first: Optional[int]
        `max(bqm.num_variables*coefficient_z_first, lower_bound_z)` bounds the number of
        variable updates considered in the first simple tabu search (STS). Variable
        updates arising from the STS greedy-descent subroutine, invoked upon discovery
        of new global optima, are excluded from the count. The coefficient defaults to
        10_000 for small problems (up to 500 variables) and 25_000 for larger problems.
    coefficient_z_restart: Optional[int]
        Controls the number of variable updates on restarted simple tabu search stages,
        matching the description for `coefficient_z_first`. The coefficient defaults to
        `coefficient_z_first/4`
    lower_bound_z: Optional[int]
        Sets a minimum number of variable updates on all simple tabu searches, see
        `coefficient_z_first`. The bound defaults to 500_000.
    """

    initial_states: Optional[Any] = None
    seed: Optional[int] = None
    num_restarts: int = 1_000_000
    energy_threshold: Optional[float] = None
    coefficient_z_first: Optional[int] = None
    coefficient_z_restart: Optional[int] = None
    lower_bound_z: Optional[int] = None
