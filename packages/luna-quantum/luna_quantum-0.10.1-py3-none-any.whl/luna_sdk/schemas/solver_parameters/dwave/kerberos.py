from typing import Optional

from luna_sdk.schemas.solver_parameters.base_parameter import BaseParameter
from luna_sdk.schemas.solver_parameters.dwave import (
    Decomposer,
    Loop,
    Qpu,
    SimulatedAnnealing,
    Tabu,
)


class TabuKerberos(Tabu):
    """
    num_reads: Optional[int]
        Number of reads. Each read is generated by one run of the tabu algorithm. If
        `num_reads` is not explicitly given, it is selected to match the number of
        initial states given. If initial states are not provided, only one read is
        performed.
    tenure: Optional[int]
        Tabu tenure, which is the length of the tabu list, or number of recently
        explored solutions kept in memory. Default is a quarter of the number of problem
        variables up to a maximum value of 20.
    timeout: float
        Timeout for non-interruptable operation of tabu search.
    initial_states_generator: Literal['none', 'tile', 'random']
        Defines the expansion of `initial_states` if fewer than `num_reads` are
        specified:
        'none': if the number of initial states specified is smaller than `num_reads`,
        raises `ValueError`.
        'tile': reuses the specified initial states if fewer than `num_reads` or
        truncates if greater.
        'random': expands the specified initial states with randomly generated states if
        fewer than `num_reads` or truncates if greater.
    max_time: Optional[float]
        Timeout for tabu search.
    """

    timeout: float = 20
    max_time: Optional[float] = None


class KerberosParameters(BaseParameter):
    """
    Kerberos divides the problem into subproblems and solves them using Tabu Search, Simulated Annealing and QPU Subproblem Sampling.
    These algorithms are executed in parallel and afterwards the best solutions are combined.
    This procedure is applied iteratively until the best solution is found or a termination criterion is met.

    Parameters
    ----------
    tabu: TabuKerberos
        Tabu parameters for Kerberos algorithm.
    simulated_annealing: SimulatedAnnealing
        Simulated annealing parameters for Kerberos algorithm.
    decomposer: Decomposer
        Decomposer parameters for Kerberos algorithm.
    qpu: Qpu
        QPU parameters for Kerberos algorithm.
    loop: Loop
        Parameters for the main loop of the algorithm.
    cpu_count_multiplier: int
        Multiplier for the CPU count.
    """

    tabu: TabuKerberos = TabuKerberos()
    simulated_annealing: SimulatedAnnealing = SimulatedAnnealing()
    decomposer: Decomposer = Decomposer()
    qpu: Qpu = Qpu()
    loop: Loop = Loop()
    cpu_count_multiplier: int = 1
