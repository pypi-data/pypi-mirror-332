"""
Python module generated from Java source file com.google.common.collect.TreeTraverser

Java source file obtained from artifact guava version 21.0

Because this Python module is automatically generated, it may contain errors
and/or code that cannot be parsed. Please report these issues at
https://github.com/magicmq/docs-translator/issues
"""
from com.google.common.annotations import Beta
from com.google.common.annotations import GwtCompatible
from com.google.common.base import Function
from com.google.common.collect import *
from java.util import ArrayDeque
from java.util import Deque
from java.util import Iterator
from java.util import Queue
from java.util.function import Consumer
from typing import Any, Callable, Iterable, Tuple


class TreeTraverser:
    """
    Views elements of a type `T` as nodes in a tree, and provides methods to traverse the trees
    induced by this traverser.
    
    For example, the tree
    
    ````h
         / | \
        /  e  \
       d       g
      /|\      |
     / | \     f
    a  b  c````
    
    can be iterated over in preorder (hdabcegf), postorder (abcdefgh), or breadth-first order
    (hdegabcf).
    
    Null nodes are strictly forbidden.
    
    **For Java 8 users:** Because this is an abstract class, not an interface, you can't use a
    lambda expression to extend it:
    
    ````// won't work
    TreeTraverser<NodeType> traverser = node -> node.getChildNodes();````
    
    Instead, you can pass a lambda expression to the `using` factory method:
    
    ````TreeTraverser<NodeType> traverser = TreeTraverser.using(node -> node.getChildNodes());````

    Author(s)
    - Louis Wasserman

    Since
    - 15.0
    """

    @staticmethod
    def using(nodeToChildrenFunction: "Function"["T", Iterable["T"]]) -> "TreeTraverser"["T"]:
        """
        Returns a tree traverser that uses the given function to navigate from a node to its children.
        This is useful if the function instance already exists, or so that you can supply a lambda
        expressions. If those circumstances don't apply, you probably don't need to use this; subclass
        `TreeTraverser` and implement its .children method directly.

        Since
        - 20.0
        """
        ...


    def children(self, root: "T") -> Iterable["T"]:
        """
        Returns the children of the specified node.  Must not contain null.
        """
        ...


    def preOrderTraversal(self, root: "T") -> "FluentIterable"["T"]:
        """
        Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order
        traversal. That is, each node's subtrees are traversed after the node itself is returned.
        
        No guarantees are made about the behavior of the traversal when nodes change while
        iteration is in progress or when the iterators generated by .children are advanced.
        """
        ...


    def postOrderTraversal(self, root: "T") -> "FluentIterable"["T"]:
        """
        Returns an unmodifiable iterable over the nodes in a tree structure, using post-order
        traversal. That is, each node's subtrees are traversed before the node itself is returned.
        
        No guarantees are made about the behavior of the traversal when nodes change while
        iteration is in progress or when the iterators generated by .children are advanced.
        """
        ...


    def breadthFirstTraversal(self, root: "T") -> "FluentIterable"["T"]:
        """
        Returns an unmodifiable iterable over the nodes in a tree structure, using breadth-first
        traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on.
        
        No guarantees are made about the behavior of the traversal when nodes change while
        iteration is in progress or when the iterators generated by .children are advanced.
        """
        ...
