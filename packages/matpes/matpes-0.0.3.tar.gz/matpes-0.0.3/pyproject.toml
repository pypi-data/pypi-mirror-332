[build-system]
requires = [
  # pin NumPy version used in the build
  "oldest-supported-numpy",
  "setuptools>=65.0.0",
]
build-backend = "setuptools.build_meta"


[project]
name = "matpes"
authors = [{ name = "MatPES Development Team", email = "ongsp@ucsd.edu" }]
maintainers = [
    { name = "Shyue Ping Ong", email = "ongsp@ucsd.edu" },
]
description = """Tools for working with MatPES."""
readme = "README.md"
requires-python = ">=3.10,<3.13"
keywords = [
    "potential energy surface",
    "PES",
    "VASP",
    "analysis",
    "crystal",
    "materials",
    "science",
    "ai",
    "ml"
]
license = { text = "BSD-3-Clause" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
    "pandas>=2",
    "pymongo>=4.11",
    "pymatgen",
    "tqdm"
]
version = "0.0.3"

[tool.setuptools.packages.find]
where = ["src"]
include = ["matpes", "matpes.*"]

[project.scripts]
matpes = "matpes.cli:main"

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.black]
line-length = 120

[tool.ruff]
target-version = "py310"
line-length = 120
lint.select = [
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "D",    # pydocstyle
  "E",    # pycodestyle error
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FA",   # flake8-future-annotations
  "FLY",  # flynt
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "PD",   # pandas-vet
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PYI",  # flakes8-pyi
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "SIM",  # flake8-simplify
  "SLOT", # flake8-slots
  "TCH",  # flake8-type-checking
  "TID",  # tidy imports
  "TID",  # flake8-tidy-imports
  "UP",   # pyupgrade
  "W",    # pycodestyle warning
  "YTT",  # flake8-2020
]
lint.ignore = [
  "B023",    # Function definition does not bind loop variable
  "B028",    # No explicit stacklevel keyword argument found
  "B904",    # Within an except clause, raise exceptions with ...
  "C408",    # unnecessary-collection-call
  "D105",    # Missing docstring in magic method
  "D205",    # 1 blank line required between summary line and description
  "D212",    # Multi-line docstring summary should start at the first line
  "PD901",   # pandas-df-variable-name
  "PERF203", # try-except-in-loop
  "PERF401", # manual-list-comprehension (TODO fix these or wait for autofix)
  "PLR",     # pylint refactor
  "PLW2901", # Outer for loop variable overwritten by inner assignment target
  "PT013",   # pytest-incorrect-pytest-import
  "RUF012",  # Disable checks for mutable class args. This is a non-problem.
  "SIM105",  # Use contextlib.suppress(OSError) instead of try-except-pass
    "ISC001"
]
lint.pydocstyle.convention = "google"
lint.isort.required-imports = ["from __future__ import annotations"]
lint.isort.split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["D"]
"tasks.py" = ["D"]

[tool.pytest.ini_options]
addopts = "--durations=30 --quiet -r xXs --color=yes -p no:warnings --import-mode=importlib"

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false
exclude = ["docs", "tasks.py"]

[[tool.mypy.overrides]]
module = ["requests.*", "tabulate.*"]
ignore_missing_imports = true

[tool.codespell]
ignore-words-list = """
titel,alls,ans,nd,mater,nwo,te,hart,ontop,ist,ot,fo,nax,coo,coul,ser,leary,thre,
fase,rute,reson,titels,ges,scalr,strat,struc,hda,nin,ons,pres,kno,loos,lamda,lew
"""
check-filenames = true

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
exclude_lines = [
  "@deprecated",
  "def __repr__",
  "if 0:",
  "if __name__ == .__main__.:",
  "if self.debug:",
  "if settings.DEBUG",
  "pragma: no cover",
  "raise AssertionError",
  "raise NotImplementedError",
  "input",
  "if TYPE_CHECKING:",
  "except PackageNotFoundError:"
]

[tool.pyright]
typeCheckingMode = "off"
reportPossiblyUnboundVariable = true
reportUnboundVariable = true
reportMissingImports = false
reportMissingModuleSource = false
reportInvalidTypeForm = false
exclude = ["**/tests"]
