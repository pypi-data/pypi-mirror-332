[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "starlette-caches"
dynamic = ["version"]
description = "Server-side HTTP caching for ASGI applications, inspired by Django's cache framework"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "Matthew Messinger", email = "mattmess1221@gmail.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Typing :: Typed",
]
dependencies = [
    "aiocache>=0.12.3",
    "starlette==0.*",
]

[project.optional-dependencies]
redis = ["redis>=5"]
memcached = ["aiomcache>=0.5.2"]
msgpack = ["msgpack>=0.5.5"]

[project.urls]
Repository = "https://github.com/mattmess1221/starlette-caches"
Documentation = "https://mattmess1221.github.io/starlette-caches"
Changelog = "https://mattmess1221.github.io/starlette-caches/changelog"
Issues = "https://github.com/mattmess1221/starlette-caches/issues"


[dependency-groups]
test = [
    "coverage",
    "pytest",
    "pytest-asyncio",
    "pytest-rerunfailures",
    "httpx",
    "fastapi>=0.115.8",
    "click>=8.1.8",
]

docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]>=0.27.0",
]

lint = [
    "ruff>=0.9.4",
]

types = [
    "mypy>=1.14.1",
]


[tool.uv]
default-groups = ["test", "lint"]

[tool.hatch.version]
path = "src/starlette_caches/__version__.py"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
# branch = true

[tool.coverage.report]
fail_under = 100
show_missing = true
skip_empty = true
skip_covered = true

exclude_also = [
    "if .*TYPE_CHECKING:",
]

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true
allow_empty_bodies = true

[tool.ruff.lint]
select = [
    "F",     # pyflakes,
    "E",     # pycodestyle error   
    "W",     # pycodestyle warning
    "I",     # isort
    "D",     # pycodestyle
    "UP",    # pyupgrade
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "FA",    # flake8-future-annotations
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PT",    # flake8-pytest
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slot
    "SIM",   # flake8-simplify
    "TC",    # flake8-type-checking
    "TD",    # flake8-todos
    "FIX",   # flake8-fixme
    "ERA",   # eradicate
    "PLE",   # pylint error
    "PLC",   # pylint convention
    "FLY",   # flynt
    "PERF",  # perflint
    "FURB",  # refurb
    "RUF",   # ruff specific rules
]

ignore = [
    "D1",
    "D203",
    "D213",
    "S101",
    "ANN401",
]
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",
    "SLF001",
]
