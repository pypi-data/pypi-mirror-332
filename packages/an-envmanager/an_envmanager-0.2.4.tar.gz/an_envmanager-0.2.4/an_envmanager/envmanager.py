# -*- coding: utf-8 -*-
"""ENVM_20250311_00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qiSU2wQ2753h86ui8b8j_22OOGQKGGGL

# EnvFileManager
ipynbファイルをenvファイルに変換します


```
2025/02/20 0.1.0 完成
2025/03/02 PyPIへアップロード
2025/03/03 0.1.1 GitHubのDebugHelperではなく、PyPIのを使うようにした。
2025/03/03 0.2.0 EnvManagerも一緒にPyPIにアップロードするようにした。
2025/03/03 0.1.0 アップロードできなくなったので、番号を振り直した。
2025/03/03 0.1.1 細かい部分で改良
2025/03/11 0.2.0 get_env_varでbool値がうまく返せないエラーがあったので修正
2025/03/11 0.2.4 PyPIへのアップロードを失敗したため、番号を変える。
```

# EnvFileManager

## 1. 初期設定
"""

# @title a. GDrive接続
from google.colab import drive
drive.mount('/content/drive')

# @title b. .env 読み込み{"form-width":"400px"}

# get_ipython().system( "pip install python-dotenv" )
# from dotenv import load_dotenv

# load_dotenv("/content/drive/MyDrive/env/settings_git.env")
# load_dotenv("/content/drive/MyDrive/env/settings_pid.env")


# import os
# Git_username = os.getenv( "Git_username" )
# Git_personal_access_token = os.getenv( "Git_personal_access_token" )

# Pid_env_folder = os.getenv( "Pid_env_folder" )
# Pid_env_config_file = os.getenv( "Pid_env_config_file" )

# @title c. 外部モジュール読み込みと宣言

# an_DebugHelper
# Git_repo_url = f"https://{ Git_username }:{ Git_personal_access_token }@github.com/{ Git_username }/{'an_DebugHelper'}.git"
# get_ipython().system( f"pip install git+{ Git_repo_url }" )

"""## 2. モジュール定義"""

# @title a. EnvFileManager 定義{"form-width":"400px"}
import os
import yaml
import json
from pathlib import Path
get_ipython().system( "pip install an_debughelper" )
from an_debughelper import DebugHelper

Pid_env_folder = Path( "/content/drive/MyDrive/env" )
Pid_env_config_file = Path( "config.yaml" )

class EnvFileManager:
    def __init__(self, ipynb_file, config_path = Pid_env_folder / Pid_env_config_file ):
        """
        環境変数を分類して.envファイルに保存する

        :param ipynb_file : 変換する ipynb ファイルのパス
        :param config_path: 抽出変数ルール定義ファイル
        """
        if not Path( config_path ).exists():
            raise FileNotFoundError(f"{config_path} が見つかりません。")
        self.debug = DebugHelper()
        self.debug.enable_log_to_file_stdout()
        self.debug.enable_log_to_file_stderr()
        self.debug.enable_timestamp()

        self.ipynb_file = ipynb_file
        self.config = self.load_config(config_path)

        self.debug.log_step(f"EnvFileManager 初期化", success=None)
        self.debug.log_step(f"対象のノートブック: {self.ipynb_file}", char = "📄")

        if not os.path.exists( Pid_env_folder ):
            os.makedirs( Pid_env_folder )
            self.debug.log_step( "envファイル保存用のフォルダを作成しました", success = True )
        # self.debug.run_command( "ls -l '/content/drive/MyDrive/Colab Notebooks/'", stdout = True, stderr = True )
        if not os.path.exists(self.ipynb_file):
            raise FileNotFoundError(f"{self.ipynb_file} が見つかりません。")
        else:
            self.debug.log_step(f"{self.ipynb_file} が見つかりました", success=True)

    def load_config(self, config_path):
        """YAMLファイルからプレフィックスの設定を読み込む"""
        with open(config_path, "r") as file:
            return yaml.safe_load(file)

    def extract_env_from_ipynb(self):
        """特定のコメント行で囲まれた部分の環境変数を抽出し、適切な.envファイルに分類"""
        env_vars = {}  # { "ファイル名": [変数リスト] }
        start_marker = "# START_ENV"
        end_marker = "# END_ENV"
        within_section = False

        i = 0
        with open(self.ipynb_file, "r", encoding="utf-8") as f:
            notebook = json.load(f)
            for cell in notebook.get("cells", []):
                if cell.get("cell_type") == "code":
                    for line in cell.get("source", []):
                        i += 1
                        self.debug.log_step( f"No.{ i }: {line}", end = "", success = None)
                        if start_marker in line:
                            within_section = True
                            self.debug.log_step( "Start marker", success = None )
                            continue
                        if end_marker in line:
                            within_section = False
                            self.debug.log_step( "End marker", success = None )
                            continue
                        if within_section:
                            if "os.environ" in line:  # 環境変数の定義
                                env_vars.setdefault( Path( Pid_env_folder ) / Path( "env_settings.env" ), []).append(line)
                                self.debug.log_step( f"次のファイルに書き出します : settings_env.env", char = "✏️" )
                            else:  # 通常の変数定義
                                for prefix, env_file in self.config["env_rules"].items():
                                    if line.strip().startswith(prefix):
                                        env_vars.setdefault(Path( Pid_env_folder ) / Path( env_file ), []).append(line)
                                        self.debug.log_step( f"次のファイルに書き出します : { prefix }", char = "✒️" )
                                        break
                                else:
                                    env_vars.setdefault(self.config["env_rules"]["default"], []).append(line)

        # 分類した環境変数を保存
        for file, lines in env_vars.items():
            with open(file, "w", encoding="utf-8") as f:
                f.writelines(lines)
            self.debug.log_step(f"{file} に環境変数を保存", success=True)

# %%writefile /content/drive/MyDrive/code/envmanager.py
# @title b. EnvManager 定義
import os
import yaml
from pathlib import Path

get_ipython().system("pip install an_DebugHelper")
from an_debughelper import DebugHelper
get_ipython().system("pip install python-dotenv")
from dotenv import load_dotenv, find_dotenv


class EnvManager:
    """
    複数の .env ファイルを読み込み、環境変数へのアクセスを容易にするクラス。
    特に settings_git.env を最初に読み込み、GitHub 関連の情報（git_username, git_PersonalAccessToken）
    を利用可能にします。
    """
    def __init__(self, env_files=None):
        """
        :param env_files: 読み込む .env ファイルのリスト（settings_git.env を含めることを推奨）
        """
        self.debug = DebugHelper( instance_name = "EnvManager" )
        self.debug.enable_timestamp()
        self.debug.enable_log_to_file_stdout()
        self.debug.enable_log_to_file_stderr()
        # まず settings_git.env を必ず読み込む
        git_env_path = Path("/content/drive/MyDrive/env/settings_git.env")  # ※適宜パスを変更してください
        if git_env_path.exists():
            load_dotenv(dotenv_path=git_env_path)
            self.debug.log_step(f"{git_env_path} が正常にロードされました。", success=True)
        else:
            self.debug.log_step(f"{git_env_path} が見つかりません。", success=False)

        # 他の.envファイルが指定されていればロードする
        self.env_files = env_files if env_files is not None else []
        self.load_all_envs()

    def load_all_envs(self):
        """指定された全ての .env ファイルをロードする"""
        for env_file in self.env_files:
            env_path = Path( "/content/drive/MyDrive/env" ).joinpath( env_file )
            if env_path.exists():
                load_dotenv(dotenv_path=env_path, override=False)
                self.debug.log_step(f"{env_file} が正常にロードされました。", success=True)
            else:
                self.debug.log_step(f"{env_file} が見つかりません。", success=False)

    def get_env_var(self, var_name, type = "string" ):
        """環境変数の値を返す"""
        allowed_types = ["string", "int", "float", "bool"]
        if type not in allowed_types:
            raise ValueError(f"Invalid type '{type}'. Allowed types are {allowed_types}.")
        elif type == "bool":
            if os.getenv(var_name, "string" ).lower() == "true":
                return True
            elif os.getenv(var_name, "string" ).lower() == "false":
                return False
            else:
                raise ValueError(f"Invalid boolean value for '{var_name}': {os.getenv(var_name)}")
        elif type == "string":
            return os.getenv(var_name, "")
        elif type == "int":
            return int(os.getenv(var_name, "0"))
        elif type == "float":
            return float(os.getenv(var_name, "0.0"))

"""## 3. テスト"""

# @title a. テスト{"form-width":"400px"}
# **使用例**
if __name__ == "__main__":

    manager = EnvFileManager( ipynb_file = "/content/drive/MyDrive/Colab Notebooks/CENV_20250302_00.ipynb" )
    manager.extract_env_from_ipynb()
    # # `.ipynb` から `.env` を作成
    # if manager.extract_env_from_ipynb():from google.colab import drive
    # drive.mount('/content/drive')

    #     # `.env` をカレントディレクトリへコピー
    #     manager.copy_env_to_current_dir()

# @title b. EnvManagerテスト
if __name__ == "__main__":
    envmanager = EnvManager( env_files = [ "settings_git.env", "settings_ven.env" ] )
    envmanager.load_all_envs()
    print( envmanager.get_env_var( "Ven_base_folder" ) )
    print( envmanager.get_env_var( "Ven_reset", type = "bool" ) )