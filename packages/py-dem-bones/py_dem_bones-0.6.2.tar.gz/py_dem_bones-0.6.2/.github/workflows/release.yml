name: Build and Release

on:
  push:
    tags: 
      - "[0-9]+\\.[0-9]+\\.[0-9]+.*"
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      fast-mode:
        description: 'Fast mode (reduced build variants)'
        required: false
        default: 'false'
        type: choice
        options: ['true', 'false']
      test-wheels:
        description: 'Test wheels compatibility'
        required: false
        default: 'false'
        type: choice
        options: ['true', 'false']
# Permissions needed for this workflow
permissions:
  contents: write    # For creating releases and pushing to gh-pages
  pull-requests: write  # For commenting on PRs
  pages: write      # For GitHub Pages deployment
  id-token: write   # For PyPI trusted publishing

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Build wheels using cibuildwheel
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
          # Windows builds
          - os: windows-latest
          # macOS builds - Intel
          - os: macos-13
          # macOS builds - Apple Silicon
          - os: macos-14
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: ${{ runner.os }}-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-eigen-
      
      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.0
        with:
          output-dir: wheelhouse
        env:
          CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "pp* *-musllinux* *-win32 *-manylinux_i686"
          CIBW_BEFORE_BUILD: "pip install -U pip setuptools wheel numpy pybind11 scikit-build-core cmake"
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ENVIRONMENT: "PYTHONIOENCODING=UTF-8 PIP_NO_BUILD_ISOLATION=1"
          CIBW_ENVIRONMENT_PASS_LINUX: "LANG LC_ALL"
          CIBW_ENVIRONMENT_LINUX: "LANG=C.UTF-8 LC_ALL=C.UTF-8 PYTHONIOENCODING=UTF-8 CMAKE_PREFIX_PATH=/opt/python/{package.platname}"
          CIBW_ENVIRONMENT_WINDOWS: "CMAKE_GENERATOR=Ninja CMAKE_POSITION_INDEPENDENT_CODE=ON"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
          CIBW_BEFORE_ALL_WINDOWS: "choco install -y ninja && dir \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" || dir \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\" || dir \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\" || dir \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\""
          CIBW_ENVIRONMENT_MACOS: "MAKEFLAGS=-j4 FORCE_PYTHON_VERSION={python_version}"
      
      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # Run tests during PR
  test-code:
    name: Test code on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    # Only run tests during PR
    if: github.event_name == 'pull_request'
    needs: build-wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        python-version: ['3.8', '3.10', '3.12']
        exclude:
          - os: macos-14
            python-version: '3.8'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse
      
      - name: Install nox
        run: |
          python -m pip install --upgrade pip
          python -m pip install nox
          python -m pip install numpy  # Required for tests
      
      - name: Run tests with nox
        run: |
          python -m nox --session pytest_skip_install
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false

  # Build source distribution
  build-sdist:
    name: Build source distribution
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt
      
      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc g++
        shell: bash
      
      - name: Build SDist
        run: |
          python -m pip install build numpy pybind11 scikit-build-core cmake
          python -m build --sdist
      
      - name: Test SDist
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov numpy
          python -m pip install dist/*.tar.gz
          python -c "import py_dem_bones; print(py_dem_bones.__version__)"
          python -m pytest tests/test_basic.py -v || echo "Basic tests failed but continuing"
      
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          if-no-files-found: error

  # Create GitHub Release and publish to PyPI
  release:
    name: Release
    needs: [build-wheels, build-sdist]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    environment:
      name: release
      url: https://pypi.org/p/py-dem-bones
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          CHANGES=$(grep -A 100 "## $VERSION" CHANGELOG.md | grep -B 100 -m 2 "^## " | grep -v "^## $VERSION" | grep -v "^## " | sed '/^$/d')
          TEMPLATE=$(cat .github/release-template.md)
          TEMPLATE="${TEMPLATE//\$RELEASE_VERSION/$VERSION}"
          TEMPLATE="${TEMPLATE//\$CHANGES/$CHANGES}"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$TEMPLATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash
      
      # Update release notes
      - name: Update Release Notes
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ env.RELEASE_NOTES }}
          files: dist/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
